__WSAFDIsSet(ByVal As SOCKET,ByVal As fd_set PTR) As Integer
_hread(ByVal As HFILE,ByVal As LPVOID,ByVal As Integer) As Integer
_hwrite(ByVal As HFILE,ByVal As LPCSTR,ByVal As Integer) As Integer
_lclose(ByVal As HFILE) As HFILE
_lcreat(ByVal As LPCSTR,ByVal As Integer) As HFILE
_llseek(ByVal As HFILE,ByVal As LONG,ByVal As Integer) As LONG
_lopen(ByVal As LPCSTR,ByVal As Integer) As HFILE
_lread(ByVal As HFILE,ByVal As LPVOID,ByVal As UINT) As UINT
_lwrite(ByVal As HFILE,ByVal As LPCSTR,ByVal As UINT) As UINT
_TrackMouseEvent(ByVal As LPTRACKMOUSEEVENT) As BOOL
AbortDoc(ByVal hdc As HDC) As Integer
AbortSystemShutdown(ByVal lpMachineName As LPCSTR) As BOOL
AbortSystemShutdown(ByVal lpMachineName As LPCWSTR) As BOOL
AbortPath(ByVal hdc As HDC) As BOOL
AbortPrinter(ByVal hPrinter As HANDLE) As BOOL
AccessCheck(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal ClientToken As HANDLE,ByVal DesiredAccess As DWORD,ByVal GenericMapping As PGENERIC_MAPPING,ByVal PrivilegeSet As PPRIVILEGE_SET,ByVal PrivilegeSetLength As PDWORD,ByVal GrantedAccess As PDWORD,ByVal Status As PBOOL) As BOOL
AcceptEx(ByVal sListenSocket As SOCKET,ByVal sAcceptSocket As SOCKET,ByVal lpOutputBuffer As PVOID,ByVal dwReceiveDataLength As DWORD,ByVal dwLocalAddressLength As DWORD,ByVal dwRemoteAddressLength As DWORD,ByVal lpdwBytesReceived As LPDWORD,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
AccessCheckAndAuditAlarm(ByVal SubsystemName As LPCSTR,ByVal HandleId As LPVOID,ByVal ObjectTypeName As LPSTR,ByVal ObjectName As LPSTR,ByVal SecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal DesiredAccess As DWORD,ByVal GenericMapping As PGENERIC_MAPPING,ByVal ObjectCreation As BOOL,ByVal GrantedAccess As PDWORD,ByVal AccessStatus As PBOOL,ByVal pfGenerateOnClose As PBOOL) As BOOL
AcceptSecurityContext(ByVal phCredential As PCredHandle,ByVal phContext As PCtxtHandle,ByVal pInput As PSecBufferDesc,ByVal fContextReq As ULONG,ByVal TargetDataRep As ULONG,ByVal phNewContext As PCtxtHandle,ByVal pOutput As PSecBufferDesc,ByVal pfContextAttr As PULONG,ByVal ptsExpiry As PTimeStamp) As SECURITY_STATUS
AccessibleObjectFromPoint(ByVal ptScreen As POINT,ByVal ppacc As IAccessible PTR PTR,ByVal pvarChild As VARIANT PTR) As HRESULT
AccessibleObjectFromEvent(ByVal hwnd As HWND,ByVal dwId As DWORD,ByVal dwChildId As DWORD,ByVal ppacc As IAccessible PTR,ByVal pvarChild As VARIANT PTR) As HRESULT
AccessibleChildren(ByVal paccContainer As IAccessible PTR,ByVal iChildStart As LONG,ByVal cChildren As LONG,ByVal rgvarChildren As VARIANT PTR,ByVal pcObtained As LONG PTR) As HRESULT
AccessCheckAndAuditAlarm(ByVal SubsystemName As LPCWSTR,ByVal HandleId As LPVOID,ByVal ObjectTypeName As LPWSTR,ByVal ObjectName As LPWSTR,ByVal SecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal DesiredAccess As DWORD,ByVal GenericMapping As PGENERIC_MAPPING,ByVal ObjectCreation As BOOL,ByVal GrantedAccess As PDWORD,ByVal AccessStatus As PBOOL,ByVal pfGenerateOnClose As PBOOL) As BOOL
AccessibleObjectFromWindow(ByVal hwnd As HWND,ByVal dwId As DWORD,ByVal riid As IID PTR,ByVal ppvObject As any PTR PTR) As HRESULT
accept(ByVal byval s as string As SOCKET,ByVal byval addr as sting As sockaddr PTR,ByVal byval addrlen as long As Integer PTR) As SOCKET
acmDriverDetails(ByVal hadid As HACMDRIVERID,ByVal padd As LPACMDRIVERDETAILSA,ByVal fdwDetails As DWORD) As MMRESULT
acmDriverOpen(ByVal phad As LPHACMDRIVER,ByVal hadid As HACMDRIVERID,ByVal fdwOpen As DWORD) As MMRESULT
acmDriverEnum(ByVal fnCallback As ACMDRIVERENUMCB,ByVal dwInstance As DWORD_PTR,ByVal fdwEnum As DWORD) As MMRESULT
acmDriverDetails(ByVal hadid As HACMDRIVERID,ByVal padd As LPACMDRIVERDETAILSW,ByVal fdwDetails As DWORD) As MMRESULT
acmDriverClose(ByVal had As HACMDRIVER,ByVal fdwClose As DWORD) As MMRESULT
acmFormatEnum(ByVal had As HACMDRIVER,ByVal pafd As LPACMFORMATDETAILSW,ByVal fnCallback As ACMFORMATENUMCBW,ByVal dwInstance As DWORD_PTR,ByVal fdwEnum As DWORD) As MMRESULT
acmFormatTagEnum(ByVal had As HACMDRIVER,ByVal paftd As LPACMFORMATTAGDETAILSA,ByVal fnCallback As ACMFORMATTAGENUMCBA,ByVal dwInstance As DWORD_PTR,ByVal fdwEnum As DWORD) As MMRESULT
acmFormatTagEnum(ByVal had As HACMDRIVER,ByVal paftd As LPACMFORMATTAGDETAILSW,ByVal fnCallback As ACMFORMATTAGENUMCBW,ByVal dwInstance As DWORD_PTR,ByVal fdwEnum As DWORD) As MMRESULT
acmFormatEnum(ByVal had As HACMDRIVER,ByVal pafd As LPACMFORMATDETAILSA,ByVal fnCallback As ACMFORMATENUMCBA,ByVal dwInstance As DWORD_PTR,ByVal fdwEnum As DWORD) As MMRESULT
AcquireCredentialsHandle(ByVal pszPrincipal As SEC_CHAR PTR,ByVal pszPackage As SEC_CHAR PTR,ByVal fCredentialUse As ULONG,ByVal pvLogonId As PLUID,ByVal pAuthData As PVOID,ByVal pGetKeyFn As SEC_GET_KEY_FN,ByVal pvGetKeyArgument As PVOID,ByVal phCredential As PCredHandle,ByVal ptsExpiry As PTimeStamp) As SECURITY_STATUS
AcquireCredentialsHandle(ByVal pszPrincipal As SEC_WCHAR PTR,ByVal pszPackage As SEC_WCHAR PTR,ByVal fCredentialUse As ULONG,ByVal pvLogonId As PLUID,ByVal pAuthData As PVOID,ByVal pGetKeyFn As SEC_GET_KEY_FN,ByVal pvGetKeyArgument As PVOID,ByVal phCredential As PCredHandle,ByVal ptsExpiry As PTimeStamp) As SECURITY_STATUS
ActivateActCtx(ByVal As HANDLE,ByVal As ULONG_PTR PTR) As BOOL
ActivateKeyboardLayout(ByVal HKL As HKL,ByVal flags As UINT) As HKL
AddAccessAllowedAce(ByVal pAcl As PACL,ByVal dwAceRevision As DWORD,ByVal AccessMask As DWORD,ByVal pSid As PSID) As BOOL
AddAtom(ByVal lpString As LPCSTR) As ATOM
AddAccessDeniedAceEx(ByVal pAcl As PACL,ByVal dwAceRevision As DWORD,ByVal AceFlags As DWORD,ByVal AccessMask As DWORD,ByVal pSid As PSID) As BOOL
AddAuditAccessAce(ByVal pAcl As PACL,ByVal dwAceRevision As DWORD,ByVal dwAccessMask As DWORD,ByVal pSid As PSID,ByVal bAuditSuccess As BOOL,ByVal bAuditFailure As BOOL) As BOOL
AddAce(ByVal pAcl As PACL,ByVal dwAceRevision As DWORD,ByVal dwStartingAceIndex As DWORD,ByVal pAceList As PVOID,ByVal nAceListLength As DWORD) As BOOL
AddAccessAllowedAceEx(ByVal pAcl As PACL,ByVal dwAceRevision As DWORD,ByVal AceFlags As DWORD,ByVal AccessMask As DWORD,ByVal pSid As PSID) As BOOL
AddAccessDeniedAce(ByVal pAcl As PACL,ByVal dwAceRevision As DWORD,ByVal AccessMask As DWORD,ByVal pSid As PSID) As BOOL
AddAtom(ByVal lpString As LPCWSTR) As ATOM
AddFontResourceEx(ByVal lpcstr As LPCSTR,ByVal dword As DWORD,ByVal As PVOID) As Integer
AddForm(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pForm As PBYTE) As BOOL
AddFontResource(ByVal lpFileName As LPCWSTR) As Integer
AddFontMemResourceEx(ByVal pvoid As PVOID,ByVal dword As DWORD,ByVal pDword As PVOID,ByVal As DWORD PTR) As HANDLE
AddFontResource(ByVal lpFileName As LPCSTR) As Integer
AddForm(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pForm As PBYTE) As BOOL
AddFontResourceEx(ByVal lpcstr As LPCWSTR,ByVal dword As DWORD,ByVal As PVOID) As Integer
AddIPAddress(ByVal Address As IPAddr,ByVal IpMask As IPMask,ByVal IfIndex As DWORD,ByVal NTEContext As PULONG,ByVal NTEInstance As PULONG) As DWORD
AddJob(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pData As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD) As BOOL
AddMonitor(ByVal pName As LPSTR,ByVal Level As DWORD,ByVal pMonitors As PBYTE) As BOOL
AddMonitor(ByVal pName As LPWSTR,ByVal Level As DWORD,ByVal pMonitors As PBYTE) As BOOL
AddPort(ByVal pName As LPWSTR,ByVal hwnd As HWND,ByVal pMonitorName As LPWSTR) As BOOL
AddPrinter(ByVal pName As LPSTR,ByVal Level As DWORD,ByVal pPrinter As PBYTE) As HANDLE
AddPrintProcessor(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal pPathName As LPWSTR,ByVal pPrintProcessorName As LPWSTR) As BOOL
AddPrinterConnection(ByVal pName As LPSTR) As BOOL
AddPrintProvidor(ByVal pName As LPWSTR,ByVal Level As DWORD,ByVal pProvidorInfo As PBYTE) As BOOL
AddPrinterDriver(ByVal pName As LPWSTR,ByVal Level As DWORD,ByVal pDriverInfo As PBYTE) As BOOL
AddPrintProvidor(ByVal pName As LPSTR,ByVal Level As DWORD,ByVal pProvidorInfo As PBYTE) As BOOL
AddPrintProcessor(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal pPathName As LPSTR,ByVal pPrintProcessorName As LPSTR) As BOOL
AddPrinterConnection(ByVal pName As LPWSTR) As BOOL
AddPort(ByVal pName As LPSTR,ByVal hwnd As HWND,ByVal pMonitorName As LPSTR) As BOOL
AddPrinter(ByVal pName As LPWSTR,ByVal Level As DWORD,ByVal pPrinter As PBYTE) As HANDLE
AddPrinterDriver(ByVal pName As LPSTR,ByVal Level As DWORD,ByVal pDriverInfo As PBYTE) As BOOL
AddRefActCtx(ByVal As HANDLE) 
AddVectoredExceptionHandler(ByVal As ULONG,ByVal As PVECTORED_EXCEPTION_HANDLER) As PVOID
AdjustWindowRectEx(ByVal lpRect As LPRECT,ByVal dwStyle As DWORD,ByVal bMenu As BOOL,ByVal dwExStyle As DWORD) As BOOL
AdjustWindowRect(ByVal lpRect As LPRECT,ByVal dwStyle As DWORD,ByVal bMenu As BOOL) As BOOL
AdjustTokenGroups(ByVal TokenHandle As HANDLE,ByVal ResetToDefault As BOOL,ByVal NewState As PTOKEN_GROUPS,ByVal BufferLength As DWORD,ByVal PreviousState As PTOKEN_GROUPS,ByVal ReturnLength As PDWORD) As BOOL
AdjustTokenPrivileges(ByVal TokenHandle As HANDLE,ByVal DisableAllPrivileges As BOOL,ByVal NewState As PTOKEN_PRIVILEGES,ByVal BufferLength As DWORD,ByVal PreviousState As PTOKEN_PRIVILEGES,ByVal ReturnLength As PDWORD) As BOOL
AdvancedDocumentProperties(ByVal hwnd As HWND,ByVal hPrinter As HANDLE,ByVal pDeviceName As LPSTR,ByVal pDevModeOutput As PDEVMODE,ByVal pDevModeInput As PDEVMODEA) As LONG
AdvancedDocumentProperties(ByVal hwnd As HWND,ByVal hPrinter As HANDLE,ByVal pDeviceName As LPWSTR,ByVal pDevModeOutput As PDEVMODE,ByVal pDevModeInput As PDEVMODEW) As LONG
AllocConsole() As BOOL
AllocateUserPhysicalPages(ByVal hProcess As HANDLE,ByVal NumberOfPages As PULONG_PTR,ByVal PageArray As PULONG_PTR) As BOOL
AllocateAndInitializeSid(ByVal pIdentifierAuthority As PSID_IDENTIFIER_AUTHORITY,ByVal nSubAuthorityCount As BYTE,ByVal nSubAuthority0 As DWORD,ByVal nSubAuthority1 As DWORD,ByVal nSubAuthority2 As DWORD,ByVal nSubAuthority3 As DWORD,ByVal nSubAuthority4 As DWORD,ByVal nSubAuthority5 As DWORD,ByVal nSubAuthority6 As DWORD,ByVal nSubAuthority7 As DWORD,ByVal lpPSid As PSID PTR) As BOOL
AllocateLocallyUniqueId(ByVal Luid As PLUID) As BOOL
AllowSetForegroundWindow(ByVal dwProcessId As DWORD) As BOOL
AngleArc(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal dwRadius As DWORD,ByVal eStartAngle As FLOAT,ByVal eSweepAngle As FLOAT) As BOOL
AnimatePalette(ByVal hPalette As HPALETTE,ByVal wStartIndex As UINT,ByVal wNumEntries As UINT,ByVal lpPaletteColors As PALETTEENTRY PTR) As BOOL
AnimateWindow(ByVal hwnd As HWND,ByVal dwTime As DWORD,ByVal dwFlags As DWORD) As BOOL
AnyPopup() As BOOL
AppendMenu(ByVal hMenu As HMENU,ByVal wFlags As UINT,ByVal wIDNewItem As UINT_PTR,ByVal lpNewItem As LPCSTR) As BOOL
AppendMenu(ByVal hMenu As HMENU,ByVal wFlags As UINT,ByVal wIDNewItem As UINT_PTR,ByVal lpNewItem As LPCWSTR) As BOOL
ApplyControlToken(ByVal phContext As PCtxtHandle,ByVal pInput As PSecBufferDesc) As SECURITY_STATUS
Arc(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer,ByVal X3 As Integer,ByVal Y3 As Integer,ByVal X4 As Integer,ByVal Y4 As Integer) As BOOL
ArcTo(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer,ByVal X3 As Integer,ByVal Y3 As Integer,ByVal X4 As Integer,ByVal Y4 As Integer) As BOOL
AreAnyAccessesGranted(ByVal GrantedAccess As DWORD,ByVal DesiredAccess As DWORD) As BOOL
AreAllAccessesGranted(ByVal GrantedAccess As DWORD,ByVal DesiredAccess As DWORD) As BOOL
AreFileApisANSI() As BOOL
ArrangeIconicWindows(ByVal hwnd As HWND) As UINT
AssignProcessToJobObject(ByVal hJob As HANDLE,ByVal hProcess As HANDLE) As BOOL
AssocQueryStringByKey(ByVal flags As ASSOCF,ByVal str As ASSOCSTR,ByVal hkAssoc As HKEY,ByVal pszExtra As LPCWSTR,ByVal pszOut As LPWSTR,ByVal pcchOut As DWORD PTR) As HRESULT
AssocCreate(ByVal Clsid As CLSID,ByVal riid As IID PTR,ByVal ppv As LPVOID PTR) As HRESULT
AssocQueryKey(ByVal flags As ASSOCF,ByVal key As ASSOCKEY,ByVal pszAssoc As LPCSTR,ByVal pszExtra As LPCSTR,ByVal phkeyOut As HKEY PTR) As HRESULT
AssocQueryKey(ByVal flags As ASSOCF,ByVal key As ASSOCKEY,ByVal pszAssoc As LPCWSTR,ByVal pszExtra As LPCWSTR,ByVal phkeyOut As HKEY PTR) As HRESULT
AssocQueryString(ByVal flags As ASSOCF,ByVal str As ASSOCSTR,ByVal pszAssoc As LPCWSTR,ByVal pszExtra As LPCWSTR,ByVal pszOut As LPWSTR,ByVal pcchOut As DWORD PTR) As HRESULT
AssocQueryString(ByVal flags As ASSOCF,ByVal str As ASSOCSTR,ByVal pszAssoc As LPCSTR,ByVal pszExtra As LPCSTR,ByVal pszOut As LPSTR,ByVal pcchOut As DWORD PTR) As HRESULT
AssocQueryStringByKey(ByVal flags As ASSOCF,ByVal str As ASSOCSTR,ByVal hkAssoc As HKEY,ByVal pszExtra As LPCSTR,ByVal pszOut As LPSTR,ByVal pcchOut As DWORD PTR) As HRESULT
AttachThreadInput(ByVal idAttach As DWORD,ByVal idAttachTo As DWORD,ByVal fAttach As BOOL) As BOOL
AttachConsole(ByVal As DWORD) As BOOL
AuthenticateUser(ByVal As PVOID PTR,ByVal As LPSTR,ByVal As LPSTR,ByVal As DWORD,ByVal As LPSTR,ByVal As DWORD,ByVal As LPSTR,ByVal As LPSTR) As DWORD
auxGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPAUXCAPSW,ByVal uSize As UINT) As MMRESULT
auxGetVolume(ByVal uDeviceID As UINT,ByVal lpdwVolume As PDWORD) As MMRESULT
auxGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPAUXCAPSA,ByVal uSize As UINT) As MMRESULT
auxGetNumDevs() As UINT
auxOutMessage(ByVal uDeviceID As UINT,ByVal msg As UINT,ByVal dw1 As DWORD,ByVal dw2 As DWORD) As MMRESULT
auxSetVolume(ByVal uDeviceID As UINT,ByVal dwVolume As DWORD) As MMRESULT
AVIBuildFilter(ByVal lpszFilter As LPSTR,ByVal cbFilter As LONG,ByVal fSaving As BOOL) As HRESULT
AVIBuildFilter(ByVal lpszFilter As LPWSTR,ByVal cbFilter As LONG,ByVal fSaving As BOOL) As HRESULT
AVIClearClipboard() As HRESULT
AVIFileGetStream(ByVal pfile As PAVIFILE,ByVal ppavi As PAVISTREAM PTR,ByVal fccType As DWORD,ByVal lParam As LONG) As HRESULT
AVIFileReadData(ByVal pfile As PAVIFILE,ByVal ckid As DWORD,ByVal lpData As LPVOID,ByVal lpcbData As LPLONG) As HRESULT
AVIFileOpen(ByVal ppfile As PAVIFILE PTR,ByVal szFile As LPCSTR,ByVal uMode As UINT,ByVal lpHandler As LPCLSID) As HRESULT
AVIFileInfo(ByVal pfile As PAVIFILE,ByVal pfi As PAVIFILEINFOW,ByVal lSize As LONG) As HRESULT
AVIFileWriteData(ByVal pfile As PAVIFILE,ByVal ckid As DWORD,ByVal lpData As LPVOID,ByVal cbData As LONG) As HRESULT
AVIFileEndRecord(ByVal pfile As PAVIFILE) As HRESULT
AVIFileOpen(ByVal ppfile As PAVIFILE PTR,ByVal szFile As LPCWSTR,ByVal uMode As UINT,ByVal lpHandler As LPCLSID) As HRESULT
AVIFileAddRef(ByVal pfile As PAVIFILE) As ULONG
AVIFileCreateStream(ByVal pfile As PAVIFILE,ByVal ppavi As PAVISTREAM PTR,ByVal psi As AVISTREAMINFOW PTR) As HRESULT
AVIFileInfo(ByVal pfile As PAVIFILE,ByVal pfi As PAVIFILEINFOA,ByVal lSize As LONG) As HRESULT
AVIFileExit() 
AVIFileInit() 
AVIFileCreateStream(ByVal pfile As PAVIFILE,ByVal ppavi As PAVISTREAM PTR,ByVal psi As AVISTREAMINFOA PTR) As HRESULT
AVIFileRelease(ByVal pfile As PAVIFILE) As ULONG
AVIGetFromClipboard(ByVal lppf As PAVIFILE PTR) As HRESULT
AVIMakeFileFromStreams(ByVal ppfile As PAVIFILE PTR,ByVal nStreams As INT_,ByVal papStreams As PAVISTREAM PTR) As HRESULT
AVIMakeCompressedStream(ByVal ppsCompressed As PAVISTREAM PTR,ByVal ppsSource As PAVISTREAM,ByVal lpOptions As AVICOMPRESSOPTIONS PTR,ByVal pclsidHandler As CLSID PTR) As HRESULT
AVIPutFileOnClipboard(ByVal pf As PAVIFILE) As HRESULT
AVIStreamFindSample(ByVal pavi As PAVISTREAM,ByVal lPos As LONG,ByVal lFlags As DWORD) As HRESULT
AVIStreamOpenFromFile(ByVal ppavi As PAVISTREAM PTR,ByVal szFile As LPCSTR,ByVal fccType As DWORD,ByVal lParam As LONG,ByVal mode As UINT,ByVal pclsidHandler As CLSID PTR) As HRESULT
AVIStreamInfo(ByVal pavi As PAVISTREAM,ByVal psi As AVISTREAMINFOW PTR,ByVal lSize As LONG) As HRESULT
AVIStreamRelease(ByVal pavi As PAVISTREAM) As ULONG
AVIStreamLength(ByVal pavi As PAVISTREAM) As LONG
AVISaveOptionsFree(ByVal nStreams As INT_,ByVal plpOptions As LPAVICOMPRESSOPTIONS PTR) As HRESULT
AVIStreamWriteData(ByVal pavi As PAVISTREAM,ByVal fcc As DWORD,ByVal lp As LPVOID,ByVal cb As LONG) As HRESULT
AVIStreamCreate(ByVal ppavi As PAVISTREAM PTR,ByVal lParam1 As LONG,ByVal lParam2 As LONG,ByVal pclsidHandler As CLSID PTR) As HRESULT
AVIStreamSetFormat(ByVal pavi As PAVISTREAM,ByVal lPos As LONG,ByVal lpFormat As LPVOID,ByVal cbFormat As LONG) As HRESULT
AVIStreamOpenFromFile(ByVal ppavi As PAVISTREAM PTR,ByVal szFile As LPCWSTR,ByVal fccType As DWORD,ByVal lParam As LONG,ByVal mode As UINT,ByVal pclsidHandler As CLSID PTR) As HRESULT
AVIStreamReadFormat(ByVal pavi As PAVISTREAM,ByVal lPos As LONG,ByVal lpFormat As LPVOID,ByVal lpcbFormat As LONG PTR) As HRESULT
AVISaveV(ByVal szFile As LPCWSTR,ByVal pclsidHandler As CLSID PTR,ByVal lpfnCallback As AVISAVECALLBACK,ByVal nStreams As INT_,ByVal ppavi As PAVISTREAM PTR,ByVal plpOptions As LPAVICOMPRESSOPTIONS PTR) As HRESULT
AVIStreamStart(ByVal pavi As PAVISTREAM) As LONG
AVIStreamTimeToSample(ByVal pavi As PAVISTREAM,ByVal lTime As LONG) As LONG
AVIStreamGetFrameClose(ByVal pg As PGETFRAME) As HRESULT
AVIStreamWrite(ByVal pavi As PAVISTREAM,ByVal lStart As LONG,ByVal lSamples As LONG,ByVal lpBuffer As LPVOID,ByVal cbBuffer As LONG,ByVal dwFlags As DWORD,ByVal plSampWritten As LONG PTR,ByVal plBytesWritten As LONG PTR) As HRESULT
AVIStreamGetFrame(ByVal pg As PGETFRAME,ByVal lPos As LONG) As LPVOID
AVIStreamGetFrameOpen(ByVal pavi As PAVISTREAM,ByVal lpbiWanted As LPBITMAPINFOHEADER) As PGETFRAME
AVIStreamSampleToTime(ByVal pavi As PAVISTREAM,ByVal lSample As LONG) As LONG
AVISaveOptions(ByVal hwnd As HWND,ByVal uiFlags As UINT,ByVal nStreams As INT_,ByVal ppavi As PAVISTREAM PTR,ByVal plpOptions As LPAVICOMPRESSOPTIONS PTR) As BOOL
AVISaveV(ByVal szFile As LPCSTR,ByVal pclsidHandler As CLSID PTR,ByVal lpfnCallback As AVISAVECALLBACK,ByVal nStreams As INT_,ByVal ppavi As PAVISTREAM PTR,ByVal plpOptions As LPAVICOMPRESSOPTIONS PTR) As HRESULT
AVIStreamInfo(ByVal pavi As PAVISTREAM,ByVal psi As AVISTREAMINFOA PTR,ByVal lSize As LONG) As HRESULT
AVIStreamReadData(ByVal pavi As PAVISTREAM,ByVal fcc As DWORD,ByVal lp As LPVOID,ByVal lpcb As LONG PTR) As HRESULT
AVIStreamRead(ByVal pavi As PAVISTREAM,ByVal lStart As LONG,ByVal lSamples As LONG,ByVal lpBuffer As LPVOID,ByVal cbBuffer As LONG,ByVal plBytes As LONG PTR,ByVal plSamples As LONG PTR) As HRESULT
AVIStreamAddRef(ByVal pavi As PAVISTREAM) As ULONG
aWinMain(ByVal As HINSTANCE,ByVal As HINSTANCE,ByVal As LPSTR,ByVal As Integer) As Integer
BackupEventLog(ByVal hEventLog As HANDLE,ByVal lpBackupFileName As LPCWSTR) As BOOL
BackupSeek(ByVal hFile As HANDLE,ByVal dwLowBytesToSeek As DWORD,ByVal dwHighBytesToSeek As DWORD,ByVal lpdwLowByteSeeked As LPDWORD,ByVal lpdwHighByteSeeked As LPDWORD,ByVal lpContext As LPVOID PTR) As BOOL
BackupEventLog(ByVal hEventLog As HANDLE,ByVal lpBackupFileName As LPCSTR) As BOOL
BackupWrite(ByVal hFile As HANDLE,ByVal lpBuffer As LPBYTE,ByVal nNumberOfBytesToWrite As DWORD,ByVal lpNumberOfBytesWritten As LPDWORD,ByVal bAbort As BOOL,ByVal bProcessSecurity As BOOL,ByVal lpContext As LPVOID PTR) As BOOL
BackupRead(ByVal hFile As HANDLE,ByVal lpBuffer As LPBYTE,ByVal nNumberOfBytesToRead As DWORD,ByVal lpNumberOfBytesRead As LPDWORD,ByVal bAbort As BOOL,ByVal bProcessSecurity As BOOL,ByVal lpContext As LPVOID PTR) As BOOL
Beep_(ByVal As DWORD,ByVal As DWORD) As BOOL
BeginUpdateResource(ByVal pFileName As LPCSTR,ByVal bDeleteExistingResources As BOOL) As HANDLE
BeginPath(ByVal hdc As HDC) As BOOL
BeginUpdateResource(ByVal pFileName As LPCWSTR,ByVal bDeleteExistingResources As BOOL) As HANDLE
BeginDeferWindowPos(ByVal nNumWindows As Integer) As HDWP
BeginPaint(ByVal hwnd As HWND,ByVal lpPaint As LPPAINTSTRUCT) As HDC
ber_bvdup(ByVal pBerVal As BerValue PTR) As BerValue PTR
ber_next_element(ByVal pBerElement As BerElement PTR,ByVal pLen As ber_len_t PTR,ByVal opaque As zstring PTR) As ber_tag_t
ber_bvfree(ByVal bv As BerValue PTR) 
ber_scanf(ByVal pBerElement As BerElement PTR,ByVal fmt As zstring PTR,...) As ber_tag_t
ber_first_element(ByVal pBerElement As BerElement PTR,ByVal pLen As ber_len_t PTR,ByVal ppOpaque As byte PTR PTR) As ber_tag_t
ber_peek_tag(ByVal pBerElement As BerElement PTR,ByVal pLen As ber_len_t PTR) As ber_tag_t
ber_printf(ByVal pBerElement As BerElement PTR,ByVal fmt As zstring PTR,...) As Integer
ber_bvecfree(ByVal pBerVal As BerValue PTR PTR) 
ber_skip_tag(ByVal pBerElement As BerElement PTR,ByVal pLen As ber_len_t PTR) As ber_tag_t
ber_flatten(ByVal pBerElement As BerElement PTR,ByVal pBerVal As BerValue PTR PTR) As Integer
ber_init(ByVal pBerVal As BerValue PTR) As BerElement PTR
ber_alloc_t(ByVal Options As Integer) As BerElement PTR
ber_free(ByVal pBerElement As BerElement PTR,ByVal fbuf As Integer) 
BindImageEx(ByVal Flags As DWORD,ByVal ImageName As LPSTR,ByVal DllPath As LPSTR,ByVal SymbolPath As LPSTR,ByVal StatusRoutine As PIMAGEHLP_STATUS_ROUTINE) As BOOL
BindMoniker(ByVal pmk As LPMONIKER,ByVal grfOpt As DWORD,ByVal iidResult As IID PTR,ByVal ppvResult As PVOID PTR) As HRESULT
BindImage(ByVal ImageName As LPSTR,ByVal DllPath As LPSTR,ByVal SymbolPath As LPSTR) As BOOL
bind(ByVal s As SOCKET,ByVal addr As sockaddr PTR,ByVal namelen As Integer) As Integer
BitBlt(ByVal hDestDC As HDC,ByVal x As Integer,ByVal y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal hSrcDC As HDC,ByVal xSrc As Integer,ByVal ySrc As Integer,ByVal dwRop As DWORD) As BOOL
BringWindowToTop(ByVal hwnd As HWND) As BOOL
BroadcastSystemMessageEx(ByVal As DWORD,ByVal As LPDWORD,ByVal As UINT,ByVal As WPARAM,ByVal As LPARAM,ByVal As PBSMINFO) As Integer
BroadcastSystemMessageW(ByVal As DWORD,ByVal As LPDWORD,ByVal As UINT,ByVal As WPARAM,ByVal As LPARAM) As Integer
BroadcastSystemMessageEx(ByVal As DWORD,ByVal As LPDWORD,ByVal As UINT,ByVal As WPARAM,ByVal As LPARAM,ByVal As PBSMINFO) As Integer
BroadcastSystemMessageA(ByVal As DWORD,ByVal As LPDWORD,ByVal As UINT,ByVal As WPARAM,ByVal As LPARAM) As Integer
BroadcastSystemMessage(ByVal dw As DWORD,ByVal pdw As LPDWORD,ByVal un As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As Integer
BstrFromVector(ByVal psa As SAFEARRAY PTR,ByVal pBstr As BSTR PTR) As HRESULT
BuildSecurityDescriptor(ByVal pOwner As PTRUSTEE_W,ByVal pGroup As PTRUSTEE_W,ByVal cCountOfAccessEntries As ULONG,ByVal pListOfAccessEntries As PEXPLICIT_ACCESS_W,ByVal cCountOfAuditEntries As ULONG,ByVal pListOfAuditEntries As PEXPLICIT_ACCESS_W,ByVal pOldSD As PSECURITY_DESCRIPTOR,ByVal pSizeNewSD As PULONG,ByVal pNewSD As PSECURITY_DESCRIPTOR PTR) As DWORD
BuildCommDCB(ByVal lpDef As LPCWSTR,ByVal lpDCB As LPDCB) As BOOL
BuildSecurityDescriptor(ByVal pOwner As PTRUSTEE_A,ByVal pGroup As PTRUSTEE_A,ByVal cCountOfAccessEntries As ULONG,ByVal pListOfAccessEntries As PEXPLICIT_ACCESS_A,ByVal cCountOfAuditEntries As ULONG,ByVal pListOfAuditEntries As PEXPLICIT_ACCESS_A,ByVal pOldSD As PSECURITY_DESCRIPTOR,ByVal pSizeNewSD As PULONG,ByVal pNewSD As PSECURITY_DESCRIPTOR PTR) As DWORD
BuildCommDCBAndTimeouts(ByVal lpDef As LPCWSTR,ByVal lpDCB As LPDCB,ByVal lpCommTimeouts As LPCOMMTIMEOUTS) As BOOL
BuildTrusteeWithObjectsAndName(ByVal pTrustee As PTRUSTEE_A,ByVal pObjName As POBJECTS_AND_NAME_A,ByVal ObjectType As SE_OBJECT_TYPE,ByVal ObjectTypeName As LPSTR,ByVal InheritedObjectTypeName As LPSTR,ByVal name As LPSTR) 
BuildCommDCB(ByVal lpDef As LPCSTR,ByVal lpDCB As LPDCB) As BOOL
BuildCommDCBAndTimeouts(ByVal lpDef As LPCSTR,ByVal lpDCB As LPDCB,ByVal lpCommTimeouts As LPCOMMTIMEOUTS) As BOOL
BuildExplicitAccessWithName(ByVal pExplicitAccess As PEXPLICIT_ACCESS_W,ByVal pTrusteeName As LPWSTR,ByVal AccessPermissions As DWORD,ByVal AccessMode As ACCESS_MODE,ByVal Inheritance As DWORD) 
BuildTrusteeWithSid(ByVal pTrustee As PTRUSTEE_W,ByVal pSid As PSID) 
BuildTrusteeWithObjectsAndSid(ByVal pTrustee As PTRUSTEE_W,ByVal pObjSid As POBJECTS_AND_SID,ByVal pObjectGuid As GUID PTR,ByVal pInheritedObjectGuid As GUID PTR,ByVal pSid As PSID) 
BuildTrusteeWithObjectsAndName(ByVal pTrustee As PTRUSTEE_W,ByVal pObjName As POBJECTS_AND_NAME_W,ByVal ObjectType As SE_OBJECT_TYPE,ByVal ObjectTypeName As LPWSTR,ByVal InheritedObjectTypeName As LPWSTR,ByVal name As LPWSTR) 
BuildTrusteeWithName(ByVal pTrustee As PTRUSTEE_W,ByVal pname As LPWSTR) 
BuildImpersonateTrustee(ByVal pTrustee As PTRUSTEE_W,ByVal pImpersonateTrustee As PTRUSTEE_W) 
BuildExplicitAccessWithName(ByVal pExplicitAccess As PEXPLICIT_ACCESS_A,ByVal pTrusteeName As LPSTR,ByVal AccessPermissions As DWORD,ByVal AccessMode As ACCESS_MODE,ByVal Inheritance As DWORD) 
BuildTrusteeWithName(ByVal pTrustee As PTRUSTEE_A,ByVal pname As LPSTR) 
BuildImpersonateTrustee(ByVal pTrustee As PTRUSTEE_A,ByVal pImpersonateTrustee As PTRUSTEE_A) 
BuildImpersonateExplicitAccessWithName(ByVal pExplicitAccess As PEXPLICIT_ACCESS_W,ByVal pTrusteeName As LPWSTR,ByVal pTrustee As PTRUSTEE_W,ByVal AccessPermissions As DWORD,ByVal AccessMode As ACCESS_MODE,ByVal Inheritance As DWORD) 
BuildImpersonateExplicitAccessWithName(ByVal pExplicitAccess As PEXPLICIT_ACCESS_A,ByVal pTrusteeName As LPSTR,ByVal pTrustee As PTRUSTEE_A,ByVal AccessPermissions As DWORD,ByVal AccessMode As ACCESS_MODE,ByVal Inheritance As DWORD) 
BuildTrusteeWithSid(ByVal pTrustee As PTRUSTEE_A,ByVal pSid As PSID) 
BuildTrusteeWithObjectsAndSid(ByVal pTrustee As PTRUSTEE_A,ByVal pObjSid As POBJECTS_AND_SID,ByVal pObjectGuid As GUID PTR,ByVal pInheritedObjectGuid As GUID PTR,ByVal pSid As PSID) 
CallNamedPipe(ByVal lpNamedPipeName As LPCSTR,ByVal lpInBuffer As PVOID,ByVal nInBufferSize As DWORD,ByVal lpOutBuffer As PVOID,ByVal nOutBufferSize As DWORD,ByVal lpBytesRead As PDWORD,ByVal nTimeOut As DWORD) As BOOL
CallMsgFilter(ByVal lpMsg As LPMSG,ByVal ncode As INT_) As BOOL
CallWindowProc(ByVal lpPrevWndFunc As WNDPROC,ByVal hWnd As HWND,ByVal Msg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
CallNtPowerInformation(ByVal As POWER_INFORMATION_LEVEL,ByVal As PVOID,ByVal As ULONG,ByVal As PVOID,ByVal As ULONG) As NTSTATUS
CallNextHookEx(ByVal hHook As HHOOK,ByVal ncode As Integer,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
CallMsgFilter(ByVal lpMsg As LPMSG,ByVal ncode As INT_) As BOOL
CallNamedPipe(ByVal lpNamedPipeName As LPCWSTR,ByVal lpInBuffer As PVOID,ByVal nInBufferSize As DWORD,ByVal lpOutBuffer As PVOID,ByVal nOutBufferSize As DWORD,ByVal lpBytesRead As PDWORD,ByVal nTimeOut As DWORD) As BOOL
CallWindowProc(ByVal lpPrevWndFunc As WNDPROC,ByVal hWnd As HWND,ByVal Msg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
CancelWaitableTimer(ByVal hTimer As HANDLE) As BOOL
CancelIo(ByVal hFile As HANDLE) As BOOL
CancelDeviceWakeupRequest(ByVal hDevice As HANDLE) As BOOL
CancelDC(ByVal hdc As HDC) As BOOL
CanUserWritePwrScheme() As BOOLEAN
CascadeWindows(ByVal hwndParent As HWND,ByVal wHow As UINT,ByVal lpRect As LPCRECT,ByVal cKids As UINT,ByVal lpkids As HWND PTR) As WORD
CertFindChainInStore(ByVal hCertStore As HCERTSTORE,ByVal dwCertEncodingType As DWORD,ByVal dwFindFlags As DWORD,ByVal dwFindType As DWORD,ByVal pvFindPara As any PTR,ByVal pPrevChainContext As PCCERT_CHAIN_CONTEXT) As PCCERT_CHAIN_CONTEXT
CertVerifyCertificateChainPolicy(ByVal pszPolicyOID As LPCSTR,ByVal pChainContext As PCCERT_CHAIN_CONTEXT,ByVal pPolicyPara As PCERT_CHAIN_POLICY_PARA,ByVal pPolicyStatus As PCERT_CHAIN_POLICY_STATUS) As BOOL
CertFreeCertificateChain(ByVal pChainContext As PCCERT_CHAIN_CONTEXT) 
CertGetIssuerCertificateFromStore(ByVal hCertStore As HCERTSTORE,ByVal pSubjectContext As PCCERT_CONTEXT,ByVal pPrevIssuerContext As PCCERT_CONTEXT,ByVal pdwFlags As DWORD PTR) As PCCERT_CONTEXT
CertFreeCertificateContext(ByVal pCertContext As PCCERT_CONTEXT) As BOOL
CertCloseStore(ByVal hCertStore As HCERTSTORE,ByVal dwFlags As DWORD) As BOOL
CertOpenStore(ByVal lpszStoreProvider As LPCSTR,ByVal dwEncodingType As DWORD,ByVal hCryptProv As HCRYPTPROV,ByVal dwFlags As DWORD,ByVal pvPara As any PTR) As HCERTSTORE
CertFindCertificateInStore(ByVal hCertStore As HCERTSTORE,ByVal dwCertEncodingType As DWORD,ByVal dwFindFlags As DWORD,ByVal dwFindType As DWORD,ByVal pvFindPara As any PTR,ByVal pPrevCertContext As PCCERT_CONTEXT) As PCCERT_CONTEXT
CertOpenSystemStore(ByVal hProv As HCRYPTPROV,ByVal szSubsystemProtocol As LPCSTR) As HCERTSTORE
CertNameToStr(ByVal dwCertEncodingType As DWORD,ByVal pName As PCERT_NAME_BLOB,ByVal dwStrType As DWORD,ByVal psz As LPWSTR,ByVal csz As DWORD) As DWORD
CertGetCertificateChain(ByVal hChainEngine As HCERTCHAINENGINE,ByVal pCertContext As PCCERT_CONTEXT,ByVal pTime As LPFILETIME,ByVal hAdditionalStore As HCERTSTORE,ByVal pChainPara As PCERT_CHAIN_PARA,ByVal dwFlags As DWORD,ByVal pvReserved As LPVOID,ByVal ppChainContext As PCCERT_CHAIN_CONTEXT PTR) As BOOL
CertNameToStr(ByVal dwCertEncodingType As DWORD,ByVal pName As PCERT_NAME_BLOB,ByVal dwStrType As DWORD,ByVal psz As LPSTR,ByVal csz As DWORD) As DWORD
CertOpenSystemStore(ByVal hProv As HCRYPTPROV,ByVal szSubsystemProtocol As LPCWSTR) As HCERTSTORE
ChangeServiceConfig2(ByVal hService As SC_HANDLE,ByVal dwInfoLevel As DWORD,ByVal lpInfo As LPVOID) As BOOL
ChangeMenu(ByVal hMenu As HMENU,ByVal cmd As UINT,ByVal lpszNewItem As LPCWSTR,ByVal cmdInsert As UINT,ByVal flags As UINT) As BOOL
ChangeServiceConfig(ByVal hService As SC_HANDLE,ByVal dwServiceType As DWORD,ByVal dwStartType As DWORD,ByVal dwErrorControl As DWORD,ByVal lpBinaryPathName As LPCSTR,ByVal lpLoadOrderGroup As LPCSTR,ByVal lpdwTagId As LPDWORD,ByVal lpDependencies As LPCSTR,ByVal lpServiceStartName As LPCSTR,ByVal lpPassword As LPCSTR,ByVal lpDisplayName As LPCSTR) As BOOL
ChangeServiceConfig2(ByVal hService As SC_HANDLE,ByVal dwInfoLevel As DWORD,ByVal lpInfo As LPVOID) As BOOL
ChangeDisplaySettingsEx(ByVal lpszDeviceName As LPCSTR,ByVal lpDevMode As LPDEVMODEA,ByVal hwnd As HWND,ByVal dwflags As DWORD,ByVal lParam As LPVOID) As LONG
ChangeMenu(ByVal hMenu As HMENU,ByVal cmd As UINT,ByVal lpszNewItem As LPCSTR,ByVal cmdInsert As UINT,ByVal flags As UINT) As BOOL
ChangeDisplaySettings(ByVal lpDevMode As PDEVMODEA,ByVal dwFlags As DWORD) As LONG
ChangeServiceConfig(ByVal hService As SC_HANDLE,ByVal dwServiceType As DWORD,ByVal dwStartType As DWORD,ByVal dwErrorControl As DWORD,ByVal lpBinaryPathName As LPCWSTR,ByVal lpLoadOrderGroup As LPCWSTR,ByVal lpdwTagId As LPDWORD,ByVal lpDependencies As LPCWSTR,ByVal lpServiceStartName As LPCWSTR,ByVal lpPassword As LPCWSTR,ByVal lpDisplayName As LPCWSTR) As BOOL
ChangeClipboardChain(ByVal hwnd As HWND,ByVal hWndNext As HWND) As BOOL
ChangeDisplaySettings(ByVal lpDevMode As PDEVMODEW,ByVal dwFlags As DWORD) As LONG
ChangeDisplaySettingsEx(ByVal lpszDeviceName As LPCWSTR,ByVal lpDevMode As LPDEVMODEW,ByVal hwnd As HWND,ByVal dwflags As DWORD,ByVal lParam As LPVOID) As LONG
CharLower(ByVal lpsz As LPWSTR) As LPWSTR
CharPrev(ByVal lpszStart As LPCSTR,ByVal lpszCurrent As LPCSTR) As LPSTR
CharUpper(ByVal lpsz As LPSTR) As LPSTR
CharToOem(ByVal lpszSrc As LPCWSTR,ByVal lpszDst As LPSTR) As BOOL
CharNextEx(ByVal CodePage As WORD,ByVal lpCurrentChar As LPCSTR,ByVal dwFlags As DWORD) As LPSTR
CharNext(ByVal lpsz As LPCSTR) As LPSTR
CharToOem(ByVal lpszSrc As LPCSTR,ByVal lpszDst As LPSTR) As BOOL
CharLowerBuff(ByVal lpsz As LPSTR,ByVal cchLength As DWORD) As DWORD
CharNext(ByVal lpsz As LPCWSTR) As LPWSTR
CharUpperBuff(ByVal lpsz As LPSTR,ByVal cchLength As DWORD) As DWORD
CharNextEx(ByVal CodePage As WORD,ByVal lpCurrentChar As LPCWSTR,ByVal dwFlags As DWORD) As LPWSTR
CharPrev(ByVal lpszStart As LPCWSTR,ByVal lpszCurrent As LPCWSTR) As LPWSTR
CharPrevEx(ByVal CodePage As WORD,ByVal lpStart As LPCWSTR,ByVal lpCurrentChar As LPCWSTR,ByVal dwFlags As DWORD) As LPWSTR
CharUpperBuff(ByVal lpsz As LPWSTR,ByVal cchLength As DWORD) As DWORD
CharPrevEx(ByVal CodePage As WORD,ByVal lpStart As LPCSTR,ByVal lpCurrentChar As LPCSTR,ByVal dwFlags As DWORD) As LPSTR
CharLower(ByVal lpsz As LPSTR) As LPSTR
CharUpper(ByVal lpsz As LPWSTR) As LPWSTR
CharLowerBuff(ByVal lpsz As LPWSTR,ByVal cchLength As DWORD) As DWORD
CharToOemBuff(ByVal lpszSrc As LPCWSTR,ByVal lpszDst As LPSTR,ByVal cchDstLength As DWORD) As BOOL
CharToOemBuff(ByVal lpszSrc As LPCSTR,ByVal lpszDst As LPSTR,ByVal cchDstLength As DWORD) As BOOL
char_from_ndr(ByVal SourceMessage As PRPC_MESSAGE,ByVal Target As ubyte PTR) 
char_array_from_ndr(ByVal SourceMessage As PRPC_MESSAGE,ByVal LowerIndex As uinteger,ByVal UpperIndex As uinteger,ByVal Target As ubyte PTR) 
CheckColorsInGamut(ByVal hdc As HDC,ByVal lpv As PVOID,ByVal lpv2 As PVOID,ByVal dw As DWORD) As BOOL
CheckRemoteDebuggerPresent(ByVal As HANDLE,ByVal As PBOOL) As BOOL
CheckSumMappedFile(ByVal BaseAddress As LPVOID,ByVal FileLength As DWORD,ByVal HeaderSum As LPDWORD,ByVal CheckSum As LPDWORD) As PIMAGE_NT_HEADERS
CheckMenuItem(ByVal hMenu As HMENU,ByVal wIDCheckItem As UINT,ByVal wCheck As UINT) As DWORD
CheckDlgButton(ByVal hDlg As HWND,ByVal nIDButton As Integer,ByVal uCheck As UINT) As BOOL
CheckRadioButton(ByVal hDlg As HWND,ByVal nIDFirstButton As Integer,ByVal nIDLastButton As Integer,ByVal nIDCheckButton As Integer) As BOOL
CheckMenuRadioItem(ByVal hMenu As HMENU,ByVal un1 As UINT,ByVal un2 As UINT,ByVal un3 As UINT,ByVal un4 As UINT) As BOOL
ChildWindowFromPointEx(ByVal hWnd As HWND,ByVal pt As POINT,ByVal un As UINT) As HWND
ChildWindowFromPoint(ByVal hWnd As HWND,ByVal xPoint As POINT) As HWND
ChoosePixelFormat(ByVal hDC As HDC,ByVal pPixelFormatDescriptor As PIXELFORMATDESCRIPTOR PTR) As Integer
ChooseFont(ByVal pChoosefont As LPCHOOSEFONTA) As BOOL
ChooseFont(ByVal pChoosefont As LPCHOOSEFONTW) As BOOL
ChooseColor(ByVal pChoosecolor As LPCHOOSECOLORW) As BOOL
ChooseColor(ByVal pChoosecolor As LPCHOOSECOLORA) As BOOL
Chord(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer,ByVal X3 As Integer,ByVal Y3 As Integer,ByVal X4 As Integer,ByVal Y4 As Integer) As BOOL
ChrCmpI(ByVal w1 As WORD,ByVal w2 As WORD) As BOOL
ChrCmpI(ByVal w1 As WCHAR,ByVal w2 As WCHAR) As BOOL
cldap_open(ByVal HostName As PWCHAR,ByVal PortNumber As ULONG) As PLDAP
cldap_open(ByVal HostName As PCHAR,ByVal PortNumber As ULONG) As PLDAP
ClearEventLog(ByVal hEventLog As HANDLE,ByVal lpBackupFileName As LPCWSTR) As BOOL
ClearEventLog(ByVal hEventLog As HANDLE,ByVal lpBackupFileName As LPCSTR) As BOOL
ClearCommBreak(ByVal nCid As HANDLE) As BOOL
ClearCommError(ByVal hFile As HANDLE,ByVal lpErrors As PDWORD,ByVal lpStat As LPCOMSTAT) As BOOL
ClientToScreen(ByVal hwnd As HWND,ByVal lpPoint As LPPOINT) As BOOL
ClipCursor(ByVal lpRect As LPCRECT) As BOOL
CloseServiceHandle(ByVal hSCObject As SC_HANDLE) As BOOL
CloseWindowStation(ByVal hWinSta As HWINSTA) As BOOL
CloseEnhMetaFile(ByVal hdc As HDC) As HENHMETAFILE
CloseDriver(ByVal hDriver As HDRVR,ByVal lParam1 As LONG,ByVal lParam2 As LONG) As LRESULT
CloseWindow(ByVal hwnd As HWND) As BOOL
CloseClipboard() As BOOL
CloseDesktop(ByVal hDesktop As HDESK) As BOOL
CloseHandle(ByVal hObject As HANDLE) As BOOL
CloseFigure(ByVal hdc As HDC) As BOOL
CloseMetaFile(ByVal hMF As HDC) As HMETAFILE
ClosePrinter(ByVal hPrinter As HANDLE) As BOOL
CloseThemeData(ByVal As HTHEME) As HRESULT
CloseEventLog(ByVal hEventLog As HANDLE) As BOOL
closesocket(ByVal s As SOCKET) As Integer
CLSIDFromProgID(ByVal TSzProgID As LPCOLESTR,ByVal T As LPCLSID) As HRESULT
CLSIDFromString(ByVal lpsz As LPOLESTR,ByVal pclsid As LPCLSID) As HRESULT
CoAddRefServerProcess() As ULONG
CoBuildVersion() As DWORD
CoCopyProxy(ByVal pProxy As IUnknown PTR,ByVal ppCopy As IUnknown PTR PTR) As HRESULT
CoCreateInstanceEx(ByVal Clsid As CLSID PTR,ByVal punkOuter As IUnknown PTR,ByVal dwClsCtx As DWORD,ByVal pServerInfo As COSERVERINFO PTR,ByVal dwCount As DWORD,ByVal pResults As MULTI_QI PTR) As HRESULT
CoCreateGuid(ByVal pguid As GUID PTR) As HRESULT
CoCreateStandardMalloc(ByVal As DWORD,ByVal As IMalloc PTR PTR) As HRESULT
CoCreateFreeThreadedMarshaler(ByVal punkOuter As LPUNKNOWN,ByVal ppunkMarshal As LPUNKNOWN PTR) As HRESULT
CoCreateInstance(ByVal rclsid As CLSID PTR,ByVal pUnkOuter As LPUNKNOWN,ByVal dwClsContext As DWORD,ByVal riid As IID PTR,ByVal ppv As PVOID PTR) As HRESULT
CoDisconnectObject(ByVal pUnk As LPUNKNOWN,ByVal dwReserved As DWORD) As HRESULT
CoDosDateTimeToFileTime(ByVal nDosDate As WORD,ByVal nDosTime As WORD,ByVal lpFileTime As FILETIME PTR) As BOOL
CoFileTimeToDosDateTime(ByVal lpFileTime As FILETIME PTR,ByVal lpDosDate As LPWORD,ByVal lpDosTime As LPWORD) As BOOL
CoFileTimeNow(ByVal lpFileTime As FILETIME PTR) As HRESULT
CoFreeLibrary(ByVal hInst As HINSTANCE) 
CoFreeAllLibraries() 
CoFreeUnusedLibraries() 
CoGetMalloc(ByVal dwMemContext As DWORD,ByVal ppMalloc As LPMALLOC PTR) As HRESULT
CoGetInstanceFromIStorage(ByVal pServerInfo As COSERVERINFO PTR,ByVal pClsid As CLSID PTR,ByVal punkOuter As IUnknown PTR,ByVal dwClsCtx As DWORD,ByVal pstg As IStorage PTR,ByVal dwCount As DWORD,ByVal pResults As MULTI_QI PTR) As HRESULT
CoGetObject(ByVal pszName As LPCWSTR,ByVal pBindOptions As BIND_OPTS PTR,ByVal riid As IID PTR,ByVal ppv As any PTR PTR) As HRESULT
CoGetTreatAsClass(ByVal clsidOld As CLSID PTR,ByVal pClsidNew As LPCLSID) As HRESULT
CoGetPSClsid(ByVal riid As IID PTR,ByVal pClsid As CLSID PTR) As HRESULT
CoGetClassObject(ByVal rclsid As CLSID PTR,ByVal dwClsContext As DWORD,ByVal pvReserved As COSERVERINFO PTR,ByVal riid As IID PTR,ByVal ppv As PVOID PTR) As HRESULT
CoGetInstanceFromFile(ByVal pServerInfo As COSERVERINFO PTR,ByVal pClsid As CLSID PTR,ByVal punkOuter As IUnknown PTR,ByVal dwClsCtx As DWORD,ByVal grfMode As DWORD,ByVal pwszName As OLECHAR PTR,ByVal dwCount As DWORD,ByVal pResults As MULTI_QI PTR) As HRESULT
CoGetInterfaceAndReleaseStream(ByVal pStm As LPSTREAM,ByVal iid As IID PTR,ByVal ppv As PVOID PTR) As HRESULT
CoGetCallContext(ByVal riid As IID PTR,ByVal ppInterface As any PTR PTR) As HRESULT
CoGetStdMarshalEx(ByVal pUnkOuter As LPUNKNOWN,ByVal smexflags As DWORD,ByVal ppUnkInner As LPUNKNOWN PTR) As HRESULT
CoGetCurrentProcess() As DWORD
CoGetMarshalSizeMax(ByVal pulSize As ULONG PTR,ByVal riid As IID PTR,ByVal pUnk As LPUNKNOWN,ByVal dwDestContext As DWORD,ByVal pvDestContext As PVOID,ByVal mshlflags As DWORD) As HRESULT
CoGetStandardMarshal(ByVal riid As IID PTR,ByVal pUnk As LPUNKNOWN,ByVal dwDestContext As DWORD,ByVal pvDestContext As PVOID,ByVal mshlflags As DWORD,ByVal ppMarshal As LPMARSHAL PTR) As HRESULT
CoHasStrongExternalConnections(ByVal As LPUNKNOWN) As BOOL
CoImpersonateClient() As HRESULT
CoInitialize(ByVal pzReserved As PVOID) As HRESULT
CoInitializeSecurity(ByVal pSecDesc As PSECURITY_DESCRIPTOR,ByVal cAuthSvc As LONG,ByVal asAuthSvc As SOLE_AUTHENTICATION_SERVICE PTR,ByVal pReserved1 As any PTR,ByVal dwAuthnLevel As DWORD,ByVal dwImpLevel As DWORD,ByVal pAuthList As any PTR,ByVal dwCapabilities As DWORD,ByVal pReserved3 As any PTR) As HRESULT
CoInitializeEx(ByVal pvReserved As LPVOID,ByVal dwCoInit As DWORD) As HRESULT
CoIsHandlerConnected(ByVal pUnk As LPUNKNOWN) As BOOL
CoIsOle1Class(ByVal rclsid As CLSID PTR) As BOOL
CoLockObjectExternal(ByVal pUnk As LPUNKNOWN,ByVal fLock As BOOL,ByVal fLastUnlockReleases As BOOL) As HRESULT
CoLoadLibrary(ByVal lpszLibName As LPOLESTR,ByVal bAutoFree As BOOL) As HINSTANCE
ColorMatchToTarget(ByVal hdc As HDC,ByVal hdc2 As HDC,ByVal dw As DWORD) As BOOL
ColorHLSToRGB(ByVal wHue As WORD,ByVal wLuminance As WORD,ByVal wSaturation As WORD) As COLORREF
ColorRGBToHLS(ByVal clrRGB As COLORREF,ByVal pwHue As WORD PTR,ByVal pwLuminance As WORD PTR,ByVal pwSaturation As WORD PTR) 
ColorAdjustLuma(ByVal clrRGB As COLORREF,ByVal n As Integer,ByVal fScale As BOOL) As COLORREF
CoMarshalInterThreadInterfaceInStream(ByVal riid As IID PTR,ByVal pUnk As LPUNKNOWN,ByVal ppStm As LPSTREAM PTR) As HRESULT
CoMarshalInterface(ByVal pStm As LPSTREAM,ByVal riid As IID PTR,ByVal pUnk As LPUNKNOWN,ByVal dwDestContext As DWORD,ByVal pvDestContext As PVOID,ByVal mshlflags As DWORD) As HRESULT
CoMarshalHresult(ByVal pstm As LPSTREAM,ByVal hresult As HRESULT) As HRESULT
CombineTransform(ByVal lpxformResult As LPXFORM,ByVal lpxform1 As XFORM PTR,ByVal lpxform2 As XFORM PTR) As BOOL
CombineRgn(ByVal hDestRgn As HRGN,ByVal hSrcRgn1 As HRGN,ByVal hSrcRgn2 As HRGN,ByVal nCombineMode As Integer) As Integer
CommDlgExtendedError() As DWORD
CommConfigDialog(ByVal lpszName As LPCSTR,ByVal hWnd As HWND,ByVal lpCC As LPCOMMCONFIG) As BOOL
CommandLineToArgv(ByVal lpCmdLine As LPCWSTR,ByVal pNumArgs As Integer PTR) As LPWSTR PTR
CommitUrlCacheEntry(ByVal lpszUrlName As LPCSTR,ByVal lpszLocalFileName As LPCSTR,ByVal ExpireTime As FILETIME,ByVal LastModifiedTime As FILETIME,ByVal CacheEntryType As DWORD,ByVal lpHeaderInfo As LPBYTE,ByVal dwHeaderSize As DWORD,ByVal lpszFileExtension As LPCSTR,ByVal lpszOriginalUrl As DWORD) As BOOL
CommConfigDialog(ByVal lpszName As LPCWSTR,ByVal hWnd As HWND,ByVal lpCC As LPCOMMCONFIG) As BOOL
CommitUrlCacheEntry(ByVal lpszUrlName As LPCSTR,ByVal lpszLocalFileName As LPCWSTR,ByVal ExpireTime As FILETIME,ByVal LastModifiedTime As FILETIME,ByVal CacheEntryType As DWORD,ByVal lpHeaderInfo As LPBYTE,ByVal dwHeaderSize As DWORD,ByVal lpszFileExtension As LPCWSTR,ByVal lpszOriginalUrl As DWORD) As BOOL
CompareString(ByVal Locale As LCID,ByVal dwCmpFlags As DWORD,ByVal lpString1 As LPCSTR,ByVal cchCount1 As Integer,ByVal lpString2 As LPCSTR,ByVal cchCount2 As Integer) As Integer
CompleteAuthToken(ByVal phContext As PCtxtHandle,ByVal pToken As PSecBufferDesc) As SECURITY_STATUS
CompareString(ByVal Locale As LCID,ByVal dwCmpFlags As DWORD,ByVal lpString1 As LPCWSTR,ByVal cchCount1 As Integer,ByVal lpString2 As LPCWSTR,ByVal cchCount2 As Integer) As Integer
CompareFileTime(ByVal lpFileTime1 As FILETIME PTR,ByVal lpFileTime2 As FILETIME PTR) As LONG
ConfigTranslator(ByVal hwndParent As HWND,ByVal pvOption As DWORD PTR) As BOOL
ConfigDriver(ByVal As HWND,ByVal As WORD,ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As LPWSTR,ByVal As WORD,ByVal As WORD PTR) As BOOL
ConfigurePort(ByVal pName As LPWSTR,ByVal hwnd As HWND,ByVal pPortName As LPWSTR) As BOOL
ConfigDriver(ByVal As HWND,ByVal As WORD,ByVal As LPCSTR,ByVal As LPCSTR,ByVal As LPSTR,ByVal As WORD,ByVal As WORD PTR) As BOOL
ConfigDSN(ByVal hwndParent As HWND,ByVal fRequest As WORD,ByVal lpszDriver As LPCWSTR,ByVal lpszAttributes As LPCWSTR) As BOOL
ConfigurePort(ByVal pName As LPSTR,ByVal hwnd As HWND,ByVal pPortName As LPSTR) As BOOL
ConfigDSN(ByVal hwndParent As HWND,ByVal fRequest As WORD,ByVal lpszDriver As LPCSTR,ByVal lpszAttributes As LPCSTR) As BOOL
ConnectToPrinterDlg(ByVal hwnd As HWND,ByVal flags As DWORD) As HANDLE
ConnectNamedPipe(ByVal hNamedPipe As HANDLE,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
connect(ByVal s As SOCKET,ByVal name As sockaddr PTR,ByVal namelen As Integer) As Integer
ControlService(ByVal hService As SC_HANDLE,ByVal dwControl As DWORD,ByVal lpServiceStatus As LPSERVICE_STATUS) As BOOL
ContinueDebugEvent(ByVal dwProcessId As DWORD,ByVal dwThreadId As DWORD,ByVal dwContinueStatus As DWORD) As BOOL
ConvertDefaultLocale(ByVal Locale As LCID) As LCID
ConvertThreadToFiber(ByVal lpParameter As PVOID) As PVOID
ConvertFiberToThread() As BOOL
CopyLZFile(ByVal n1 As INT_,ByVal n2 As INT_) As LONG
CopyPdb(ByVal As CHAR PTR,ByVal As CHAR PTR,ByVal As BOOL) As BOOL
CopyFile(ByVal lpExistingFileName As LPCWSTR,ByVal lpNewFileName As LPCWSTR,ByVal bFailIfExists As BOOL) As BOOL
CopyFileEx(ByVal lpExistingFileName As LPCWSTR,ByVal lpNewFileName As LPCWSTR,ByVal lpProgressRoutine As LPPROGRESS_ROUTINE,ByVal lpData As LPVOID,ByVal pbCancel As LPBOOL,ByVal dwCopyFlags As DWORD) As BOOL
CopyEnhMetaFile(ByVal hemfSrc As HENHMETAFILE,ByVal lpszFile As LPCSTR) As HENHMETAFILE
CopyMetaFile(ByVal hMF As HMETAFILE,ByVal lpFileName As LPCSTR) As HMETAFILE
CopyAcceleratorTable(ByVal hAccelSrc As HACCEL,ByVal lpAccelDst As LPACCEL,ByVal cAccelEntries As Integer) As Integer
CopySid(ByVal nDestinationSidLength As DWORD,ByVal pDestinationSid As PSID,ByVal pSourceSid As PSID) As BOOL
CopyFileEx(ByVal lpExistingFileName As LPCSTR,ByVal lpNewFileName As LPCSTR,ByVal lpProgressRoutine As LPPROGRESS_ROUTINE,ByVal lpData As LPVOID,ByVal pbCancel As LPBOOL,ByVal dwCopyFlags As DWORD) As BOOL
CopyFile(ByVal lpExistingFileName As LPCSTR,ByVal lpNewFileName As LPCSTR,ByVal bFailIfExists As BOOL) As BOOL
CopyRect(ByVal lpDestRect As LPRECT,ByVal lpSourceRect As LPCRECT) As BOOL
CopyMetaFile(ByVal hMF As HMETAFILE,ByVal lpFileName As LPCWSTR) As HMETAFILE
CopyEnhMetaFile(ByVal hemfSrc As HENHMETAFILE,ByVal lpszFile As LPCWSTR) As HENHMETAFILE
CopyIcon(ByVal hIcon As HICON) As HICON
CopyImage(ByVal handle As HANDLE,ByVal un1 As UINT,ByVal n1 As Integer,ByVal n2 As Integer,ByVal un2 As UINT) As HANDLE
CoQueryAuthenticationServices(ByVal pcAuthSvc As DWORD PTR,ByVal asAuthSvc As SOLE_AUTHENTICATION_SERVICE PTR PTR) As HRESULT
CoQueryProxyBlanket(ByVal pProxy As IUnknown PTR,ByVal pwAuthnSvc As DWORD PTR,ByVal pAuthzSvc As DWORD PTR,ByVal pServerPrincName As OLECHAR PTR PTR,ByVal pAuthnLevel As DWORD PTR,ByVal pImpLevel As DWORD PTR,ByVal pAuthInfo As RPC_AUTH_IDENTITY_HANDLE PTR,ByVal pCapabilites As DWORD PTR) As HRESULT
CoQueryClientBlanket(ByVal pAuthnSvc As DWORD PTR,ByVal pAuthzSvc As DWORD PTR,ByVal pServerPrincName As OLECHAR PTR PTR,ByVal pAuthnLevel As DWORD PTR,ByVal pImpLevel As DWORD PTR,ByVal pPrivs As RPC_AUTHZ_HANDLE PTR,ByVal pCapabilities As DWORD PTR) As HRESULT
CoReleaseMarshalData(ByVal pStm As LPSTREAM) As HRESULT
CoRevokeClassObject(ByVal dwRegister As DWORD) As HRESULT
CoResumeClassObjects() As HRESULT
CoRegisterMallocSpy(ByVal pMallocSpy As LPMALLOCSPY) As HRESULT
CoRevokeMallocSpy() As HRESULT
CoRegisterClassObject(ByVal rclsid As CLSID PTR,ByVal pUnk As LPUNKNOWN,ByVal dwClsContext As DWORD,ByVal flags As DWORD,ByVal lpdwRegister As PDWORD) As HRESULT
CoRegisterPSClsid(ByVal riid As IID PTR,ByVal rclsid As CLSID PTR) As HRESULT
CoReleaseServerProcess() As ULONG
CoRegisterMessageFilter(ByVal lpMessageFilter As LPMESSAGEFILTER,ByVal lplpMessageFilter As LPMESSAGEFILTER PTR) As HRESULT
CoRevertToSelf() As HRESULT
CoSetProxyBlanket(ByVal pProxy As IUnknown PTR,ByVal dwAuthnSvc As DWORD,ByVal dwAuthzSvc As DWORD,ByVal pServerPrincName As OLECHAR PTR,ByVal dwAuthnLevel As DWORD,ByVal dwImpLevel As DWORD,ByVal pAuthInfo As RPC_AUTH_IDENTITY_HANDLE,ByVal dwCapabilities As DWORD) As HRESULT
CoSuspendClassObjects() As HRESULT
CoSwitchCallContext(ByVal pNewObject As IUnknown PTR,ByVal ppOldObject As IUnknown PTR PTR) As HRESULT
CoTaskMemAlloc(ByVal cb As ULONG) As PVOID
CoTaskMemRealloc(ByVal pv As PVOID,ByVal cb As ULONG) As PVOID
CoTaskMemFree(ByVal lpIDList As PVOID) 
CoTreatAsClass(ByVal clsidOld As CLSID PTR,ByVal clsidNew As CLSID PTR) As HRESULT
CoUnmarshalHresult(ByVal pstm As LPSTREAM,ByVal phresult As HRESULT PTR) As HRESULT
CoUnmarshalInterface(ByVal pStm As LPSTREAM,ByVal riid As IID PTR,ByVal ppv As PVOID PTR) As HRESULT
CoUninitialize() 
CountClipboardFormats() As Integer
CreateIconIndirect(ByVal piconinfo As PICONINFO) As HICON
CreateDialogIndirectParam(ByVal hInstance As HINSTANCE,ByVal lpTemplate As LPCDLGTEMPLATE,ByVal hWndParent As HWND,ByVal lpDialogFunc As DLGPROC,ByVal dwInitParam As LPARAM) As HWND
CreateDesktop(ByVal lpszDesktop As LPCWSTR,ByVal lpszDevice As LPCWSTR,ByVal pDevmode As LPDEVMODEW,ByVal dwFlags As DWORD,ByVal dwDesiredAccess As ACCESS_MASK,ByVal lpsa As LPSECURITY_ATTRIBUTES) As HDESK
CreateAcceleratorTable(ByVal lpaccl As LPACCEL,ByVal cEntries As Integer) As HACCEL
CreateUrlCacheGroup(ByVal dwFlags As DWORD,ByVal lpReserved As LPVOID) As GROUPID
CreateHatchBrush(ByVal nIndex As Integer,ByVal crColor As COLORREF) As HBRUSH
CreateDialogParam(ByVal hInstance As HINSTANCE,ByVal lpName As LPCWSTR,ByVal hWndParent As HWND,ByVal lpDialogFunc As DLGPROC,ByVal lParamInit As LPARAM) As HWND
CreateWaitableTimer(ByVal lpTimerAttributes As LPSECURITY_ATTRIBUTES,ByVal bManualReset As BOOL,ByVal lpTimerName As LPCSTR) As HANDLE
CreateCaret(ByVal hwnd As HWND,ByVal hBitmap As HBITMAP,ByVal nWidth As Integer,ByVal nHeight As Integer) As BOOL
CreateCursor(ByVal hInstance As HINSTANCE,ByVal nXhotspot As Integer,ByVal nYhotspot As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal lpANDbitPlane As PCVOID,ByVal lpXORbitPlane As PCVOID) As HCURSOR
CreateActCtx(ByVal As PCACTCTXA) As HANDLE
CreateSemaphore(ByVal lpSemaphoreAttributes As LPSECURITY_ATTRIBUTES,ByVal lInitialCount As LONG,ByVal lMaximumCount As LONG,ByVal lpName As LPCSTR) As HANDLE
CreateProcessAsUser(ByVal hToken As HANDLE,ByVal lpApplicationName As LPCSTR,ByVal lpCommandLine As LPSTR,ByVal lpProcessAttributes As LPSECURITY_ATTRIBUTES,ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES,ByVal bInheritHandles As BOOL,ByVal dwCreationFlags As DWORD,ByVal lpEnvironment As PVOID,ByVal lpCurrentDirectory As LPCSTR,ByVal lpStartupInfo As LPSTARTUPINFOA,ByVal lpProcessInformation As LPPROCESS_INFORMATION) As BOOL
CreateProcess(ByVal lpApplicationName As LPCSTR,ByVal lpCommandLine As LPSTR,ByVal lpProcessAttributes As LPSECURITY_ATTRIBUTES,ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES,ByVal bInheritHandles As BOOL,ByVal dwCreationFlags As DWORD,ByVal lpEnvironment As PVOID,ByVal lpCurrentDriectory As LPCSTR,ByVal lpStartupInfo As LPSTARTUPINFOA,ByVal lpProcessInformation As LPPROCESS_INFORMATION) As BOOL
CreateNamedPipe(ByVal lpName As LPCSTR,ByVal dwOpenMode As DWORD,ByVal dwPipeMode As DWORD,ByVal nMaxInstances As DWORD,ByVal nOutBufferSize As DWORD,ByVal nInBufferSize As DWORD,ByVal nDefaultTimeOut As DWORD,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As HANDLE
CreateMutex(ByVal lpMutexAttributes As LPSECURITY_ATTRIBUTES,ByVal bInitialOwner As BOOL,ByVal lpName As LPCSTR) As HANDLE
CreatePointerMoniker(ByVal punk As LPUNKNOWN,ByVal ppmk As LPMONIKER PTR) As HRESULT
CreateMailslot(ByVal lpName As LPCSTR,ByVal nMaxMessageSize As DWORD,ByVal lReadTimeout As DWORD,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As HANDLE
CreateFileMapping(ByVal hFile As HANDLE,ByVal lpFileMappigAttributes As LPSECURITY_ATTRIBUTES,ByVal flProtect As DWORD,ByVal dwMaximumSizeHigh As DWORD,ByVal dwMaximumSizeLow As DWORD,ByVal lpName As LPCSTR) As HANDLE
CreateAntiMoniker(ByVal ppmk As LPMONIKER PTR) As HRESULT
CreateEditableStream(ByVal ppsEditable As PAVISTREAM PTR,ByVal psSource As PAVISTREAM) As HRESULT
CreateUrlCacheEntry(ByVal lpszUrlName As LPCSTR,ByVal dwExpectedFileSize As DWORD,ByVal lpszFileExtension As LPCSTR,ByVal lpszFileName As LPSTR,ByVal dwReserved As DWORD) As BOOL
CreateAcceleratorTable(ByVal lpaccl As LPACCEL,ByVal cEntries As Integer) As HACCEL
CreateDesktop(ByVal lpszDesktop As LPCSTR,ByVal lpszDevice As LPCSTR,ByVal pDevmode As LPDEVMODEA,ByVal dwFlags As DWORD,ByVal dwDesiredAccess As ACCESS_MASK,ByVal lpsa As LPSECURITY_ATTRIBUTES) As HDESK
CreateDialogIndirectParam(ByVal hInstance As HINSTANCE,ByVal lpTemplate As LPCDLGTEMPLATE,ByVal hWndParent As HWND,ByVal lpDialogFunc As DLGPROC,ByVal dwInitParam As LPARAM) As HWND
CreateDialogParam(ByVal hInstance As HINSTANCE,ByVal lpName As LPCSTR,ByVal hWndParent As HWND,ByVal lpDialogFunc As DLGPROC,ByVal lParamInit As LPARAM) As HWND
CreateMDIWindow(ByVal lpClassName As LPCSTR,ByVal lpWindowName As LPCSTR,ByVal dwStyle As DWORD,ByVal x As Integer,ByVal y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal hWndParent As HWND,ByVal hInstance As HINSTANCE,ByVal lParam As LPARAM) As HWND
CreateWindowEx(ByVal dwExStyle As DWORD,ByVal lpClassName As LPCSTR,ByVal lpWindowName As LPCSTR,ByVal dwStyle As DWORD,ByVal x As Integer,ByVal y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal hWndParent As HWND,ByVal hMenu As HMENU,ByVal hInstance As HINSTANCE,ByVal lpParam As LPVOID) As HWND
CreateItemMoniker(ByVal lpszDelim As LPCOLESTR,ByVal lpszItem As LPCOLESTR,ByVal ppmk As LPMONIKER PTR) As HRESULT
CreateFileMoniker(ByVal lpszPathName As LPCOLESTR,ByVal ppmk As LPMONIKER PTR) As HRESULT
CreateGenericComposite(ByVal pmkFirst As LPMONIKER,ByVal pmkRest As LPMONIKER,ByVal ppmkComposite As LPMONIKER PTR) As HRESULT
CreateWindowStation(ByVal lpwinsta As LPSTR,ByVal dwReserved As DWORD,ByVal dwDesiredAccess As DWORD,ByVal lpsa As LPSECURITY_ATTRIBUTES) As HWINSTA
CreateBindCtx(ByVal reserved As DWORD,ByVal ppbc As LPBC PTR) As HRESULT
CreateMDIWindow(ByVal lpClassName As LPCWSTR,ByVal lpWindowName As LPCWSTR,ByVal dwStyle As DWORD,ByVal x As Integer,ByVal y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal hWndParent As HWND,ByVal hInstance As HINSTANCE,ByVal lParam As LPARAM) As HWND
CreatePalette(ByVal lpLogPalette As LOGPALETTE PTR) As HPALETTE
CreateColorSpace(ByVal lplogcolorspace As LPLOGCOLORSPACEW) As HCOLORSPACE
CreateConsoleScreenBuffer(ByVal dwDesiredAccess As DWORD,ByVal dwShareMode As DWORD,ByVal lpSecurityAttributes As SECURITY_ATTRIBUTES PTR,ByVal dwFlags As DWORD,ByVal lpScreenBufferData As LPVOID) As HANDLE
CreatePatternBrush(ByVal hBitmap As HBITMAP) As HBRUSH
CreateFile(ByVal lpFileName As LPCSTR,ByVal dwDesiredAccess As DWORD,ByVal dwShareMode As DWORD,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES,ByVal dwCreationDisposition As DWORD,ByVal dwFlagsAndAttributes As DWORD,ByVal hTemplateFile As HANDLE) As HANDLE
CreateEvent(ByVal lpEventAttributes As LPSECURITY_ATTRIBUTES,ByVal bManualReset As BOOL,ByVal bInitialState As BOOL,ByVal lpName As LPCSTR) As HANDLE
CreateDirectoryEx(ByVal lpTemplateDirectory As LPCSTR,ByVal lpNewDirectory As LPCSTR,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As BOOL
CreateDirectory(ByVal lpPathName As LPCSTR,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As BOOL
CreateProcessWithLogon(ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As DWORD,ByVal As LPCWSTR,ByVal As LPWSTR,ByVal As DWORD,ByVal As LPVOID,ByVal As LPCWSTR,ByVal As LPSTARTUPINFOW,ByVal As LPPROCESS_INFORMATION) As BOOL
CreateJobObject(ByVal lpJobAttributes As LPSECURITY_ATTRIBUTES,ByVal lpName As LPCWSTR) As HANDLE
CreateHardLink(ByVal lpFileName As LPCWSTR,ByVal lpExistingFileName As LPCWSTR,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As BOOL
CreateActCtx(ByVal As PCACTCTXW) As HANDLE
CreateSecurityPage(ByVal psi As LPSECURITYINFO) As HPROPSHEETPAGE
CreateDataAdviseHolder(ByVal ppDAHolder As LPDATAADVISEHOLDER PTR) As HRESULT
CreateMappedBitmap(ByVal hInstance As HINSTANCE,ByVal idBitmap As Integer,ByVal wFlags As UINT,ByVal lpColorMap As LPCOLORMAP,ByVal ByValumMaps As Integer) As HBITMAP
CreateToolbarEx(ByVal hWndParent As HWND,ByVal dwStyle As DWORD,ByVal wID As UINT,ByVal nBitmaps As Integer,ByVal hBMInst As HINSTANCE,ByVal wBMID As UINT,ByVal lpButtons As LPCTBBUTTON,ByVal iNumButtons As Integer,ByVal dxButton As Integer,ByVal dyButton As Integer,ByVal dxBitmap As Integer,ByVal dyBitmap As Integer,ByVal uStructSize As UINT) As HWND
CreateUpDownControl(ByVal dwStyle As DWORD,ByVal x As Integer,ByVal y As Integer,ByVal cx As Integer,ByVal cy As Integer,ByVal hParent As HWND,ByVal nID As Integer,ByVal hInst As HINSTANCE,ByVal hBuddy As HWND,ByVal nUpper As Integer,ByVal nLower As Integer,ByVal nPos As Integer) As HWND
CreatePen(ByVal nPenStyle As Integer,ByVal nWidth As Integer,ByVal crColor As COLORREF) As HPEN
CreatePenIndirect(ByVal lpLogPen As LOGPEN PTR) As HPEN
CreatePolygonRgn(ByVal lpPoint As POINT PTR,ByVal nCount As Integer,ByVal nPolyFillMode As Integer) As HRGN
CreatePolyPolygonRgn(ByVal lpPoint As POINT PTR,ByVal lpPolyCounts As INT_ PTR,ByVal nCount As Integer,ByVal nPolyFillMode As Integer) As HRGN
CreateDC(ByVal lpDriverName As LPCWSTR,ByVal lpDeviceName As LPCWSTR,ByVal lpOutput As LPCWSTR,ByVal lpInitData As DEVMODEW PTR) As HDC
CreateEnhMetaFile(ByVal hdcRef As HDC,ByVal lpFileName As LPCWSTR,ByVal lpRect As LPCRECT,ByVal lpDescription As LPCWSTR) As HDC
CreateFont(ByVal H As Integer,ByVal W As Integer,ByVal E As Integer,ByVal O As Integer,ByVal W As Integer,ByVal I As DWORD,ByVal u As DWORD,ByVal S As DWORD,ByVal C As DWORD,ByVal OP As DWORD,ByVal CP As DWORD,ByVal Q As DWORD,ByVal PAF As DWORD,ByVal F As LPCWSTR) As HFONT
CreateFontIndirect(ByVal lpLogFont As LOGFONTW PTR) As HFONT
CreateIC(ByVal lpDriverName As LPCWSTR,ByVal lpDeviceName As LPCWSTR,ByVal lpOutput As LPCWSTR,ByVal lpInitData As DEVMODEW PTR) As HDC
CreatePopupMenu() As HMENU
CreateScalableFontResource(ByVal fHidden As DWORD,ByVal lpszResourceFile As LPCWSTR,ByVal lpszFontFile As LPCWSTR,ByVal lpszCurrentPath As LPCWSTR) As BOOL
CreateRectRgn(ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer) As HRGN
CreateEnvironmentBlock(ByVal lpEnvironment As LPVOID PTR,ByVal hToken As HANDLE,ByVal bInherit As BOOL) As BOOL
CreateToolhelp32Snapshot(ByVal dwFlags As DWORD,ByVal th32ProcessID As DWORD) As HANDLE
CreateWaitableTimer(ByVal lpTimerAttributes As LPSECURITY_ATTRIBUTES,ByVal bManualReset As BOOL,ByVal lpTimerName As LPCWSTR) As HANDLE
CreateSemaphore(ByVal lpSemaphoreAttributes As LPSECURITY_ATTRIBUTES,ByVal lInitialCount As LONG,ByVal lMaximumCount As LONG,ByVal lpName As LPCWSTR) As HANDLE
CreateProcessAsUser(ByVal hToken As HANDLE,ByVal lpApplicationName As LPCWSTR,ByVal lpCommandLine As LPWSTR,ByVal lpProcessAttributes As LPSECURITY_ATTRIBUTES,ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES,ByVal bInheritHandles As BOOL,ByVal dwCreationFlags As DWORD,ByVal lpEnvironment As PVOID,ByVal lpCurrentDirectory As LPCWSTR,ByVal lpStartupInfo As LPSTARTUPINFOW,ByVal lpProcessInformation As LPPROCESS_INFORMATION) As BOOL
CreateProcess(ByVal lpApplicationName As LPCWSTR,ByVal lpCommandLine As LPWSTR,ByVal lpProcessAttributes As LPSECURITY_ATTRIBUTES,ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES,ByVal bInheritHandles As BOOL,ByVal dwCreationFlags As DWORD,ByVal lpEnvironment As PVOID,ByVal lpCurrentDriectory As LPCWSTR,ByVal lpStartupInfo As LPSTARTUPINFOW,ByVal lpProcessInformation As LPPROCESS_INFORMATION) As BOOL
CreateNamedPipe(ByVal lpName As LPCWSTR,ByVal dwOpenMode As DWORD,ByVal dwPipeMode As DWORD,ByVal nMaxInstances As DWORD,ByVal nOutBufferSize As DWORD,ByVal nInBufferSize As DWORD,ByVal nDefaultTimeOut As DWORD,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As HANDLE
CreateMutex(ByVal lpMutexAttributes As LPSECURITY_ATTRIBUTES,ByVal bInitialOwner As BOOL,ByVal lpName As LPCWSTR) As HANDLE
CreateService(ByVal hSCManager As SC_HANDLE,ByVal lpServiceName As LPCSTR,ByVal lpDisplayName As LPCSTR,ByVal dwDesiredAccess As DWORD,ByVal dwServiceType As DWORD,ByVal dwStartType As DWORD,ByVal dwErrorControl As DWORD,ByVal lpBinaryPathName As LPCSTR,ByVal lpLoadOrderGroup As LPCSTR,ByVal lpdwTagId As PDWORD,ByVal lpDependencies As LPCSTR,ByVal lp As LPCSTR,ByVal lpPassword As LPCSTR) As SC_HANDLE
CreateMailslot(ByVal lpName As LPCWSTR,ByVal nMaxMessageSize As DWORD,ByVal lReadTimeout As DWORD,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As HANDLE
CreateFileMapping(ByVal hFile As HANDLE,ByVal lpFileMappigAttributes As LPSECURITY_ATTRIBUTES,ByVal flProtect As DWORD,ByVal dwMaximumSizeHigh As DWORD,ByVal dwMaximumSizeLow As DWORD,ByVal lpName As LPCWSTR) As HANDLE
CreateFile(ByVal lpFileName As LPCWSTR,ByVal dwDesiredAccess As DWORD,ByVal dwShareMode As DWORD,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES,ByVal dwCreationDisposition As DWORD,ByVal dwFlagsAndAttributes As DWORD,ByVal hTemplateFile As HANDLE) As HANDLE
CreateScalableFontResource(ByVal fHidden As DWORD,ByVal lpszResourceFile As LPCSTR,ByVal lpszFontFile As LPCSTR,ByVal lpszCurrentPath As LPCSTR) As BOOL
CreatePropertySheetPage(ByVal lpcpropsheetpagea As LPCPROPSHEETPAGEA) As HPROPSHEETPAGE
CreateMenu() As HMENU
CreateEvent(ByVal lpEventAttributes As LPSECURITY_ATTRIBUTES,ByVal bManualReset As BOOL,ByVal bInitialState As BOOL,ByVal lpName As LPCWSTR) As HANDLE
CreateService(ByVal hSCManager As SC_HANDLE,ByVal lpServiceName As LPCWSTR,ByVal lpDisplayName As LPCWSTR,ByVal dwDesiredAccess As DWORD,ByVal dwServiceType As DWORD,ByVal dwStartType As DWORD,ByVal dwErrorControl As DWORD,ByVal lpBinaryPathName As LPCWSTR,ByVal lpLoadOrderGroup As LPCWSTR,ByVal lpdwTagId As PDWORD,ByVal lpDependencies As LPCWSTR,ByVal lp As LPCWSTR,ByVal lpPassword As LPCWSTR) As SC_HANDLE
CreateOleAdviseHolder(ByVal ppOAHolder As LPOLEADVISEHOLDER PTR) As HRESULT
CreateDirectoryEx(ByVal lpTemplateDirectory As LPCWSTR,ByVal lpNewDirectory As LPCWSTR,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As BOOL
CreateDirectory(ByVal lpPathName As LPCWSTR,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As BOOL
CreateILockBytesOnHGlobal(ByVal hGlobal As HGLOBAL,ByVal fDeleteOnRelease As BOOL,ByVal pplkbyt As LPLOCKBYTES PTR) As HRESULT
CreateStatusWindow(ByVal dwStyle As LONG,ByVal lpszText As LPCWSTR,ByVal hWndParent As HWND,ByVal wID As UINT) As HWND
CreateStreamOnHGlobal(ByVal hGlobal As HGLOBAL,ByVal fDeleteOnRelease As BOOL,ByVal ppstm As LPSTREAM PTR) As HRESULT
CreateStatusWindow(ByVal dwStyle As LONG,ByVal lpszText As LPCSTR,ByVal hWndParent As HWND,ByVal wID As UINT) As HWND
CreateIcon(ByVal hInstance As HINSTANCE,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal nPlanes As BYTE,ByVal nBitsPixel As BYTE,ByVal lpANDbits As BYTE PTR,ByVal lpXORbits As BYTE PTR) As HICON
CreateStdAccessibleObject(ByVal hwnd As HWND,ByVal idObject As LONG,ByVal riid As IID PTR,ByVal ppvObject As any PTR PTR) As HRESULT
CreateRectRgnIndirect(ByVal lpRect As LPCRECT) As HRGN
CreateIpForwardEntry(ByVal pRoute As PMIB_IPFORWARDROW) As DWORD
CreateStdAccessibleProxyW(ByVal As HWND,ByVal As LPCWSTR,ByVal As LONG,ByVal As IID PTR,ByVal As any PTR PTR) As HRESULT
CreateStdAccessibleProxyA(ByVal As HWND,ByVal As LPCSTR,ByVal As LONG,ByVal As IID PTR,ByVal As any PTR PTR) As HRESULT
CreateJobObject(ByVal lpJobAttributes As LPSECURITY_ATTRIBUTES,ByVal lpName As LPCSTR) As HANDLE
CreatePropertySheetPage(ByVal lpcpropsheetpagea As LPCPROPSHEETPAGEW) As HPROPSHEETPAGE
CreateMetaFile(ByVal lpString As LPCSTR) As HDC
CreateIC(ByVal lpDriverName As LPCSTR,ByVal lpDeviceName As LPCSTR,ByVal lpOutput As LPCSTR,ByVal lpInitData As DEVMODEA PTR) As HDC
CreateMemoryResourceNotification(ByVal As MEMORY_RESOURCE_NOTIFICATION_TYPE) As HANDLE
CreateIpNetEntry(ByVal pArpEntry As PMIB_IPNETROW) As DWORD
CreateProxyArpEntry(ByVal dwAddress As DWORD,ByVal dwMask As DWORD,ByVal dwIfIndex As DWORD) As DWORD
CreateFontIndirect(ByVal lpLogFont As LOGFONTA PTR) As HFONT
CreateFont(ByVal H As Integer,ByVal W As Integer,ByVal E As Integer,ByVal O As Integer,ByVal W As Integer,ByVal I As DWORD,ByVal u As DWORD,ByVal S As DWORD,ByVal C As DWORD,ByVal OP As DWORD,ByVal CP As DWORD,ByVal Q As DWORD,ByVal PAF As DWORD,ByVal F As LPCSTR) As HFONT
CreateRoundRectRgn(ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer,ByVal X3 As Integer,ByVal Y3 As Integer) As HRGN
CreateSolidBrush(ByVal crColor As COLORREF) As HBRUSH
CreateDataCache(ByVal pUnkOuter As LPUNKNOWN,ByVal rclsid As CLSID PTR,ByVal iid As IID PTR,ByVal ppv As PVOID PTR) As HRESULT
CreateDataAdviseHolder(ByVal ppDAHolder As LPDATAADVISEHOLDER PTR) As HRESULT
CreateHardLink(ByVal lpFileName As LPCSTR,ByVal lpExistingFileName As LPCSTR,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As BOOL
CreateIconFromResource(ByVal presbits As PBYTE,ByVal dwResSize As DWORD,ByVal fIcon As BOOL,ByVal dwVer As DWORD) As HICON
CreateIconFromResourceEx(ByVal presbits As PBYTE,ByVal dwResSize As DWORD,ByVal fIcon As BOOL,ByVal dwVer As DWORD,ByVal cxDesired As Integer,ByVal cyDesired As Integer,ByVal Flags As UINT) As HICON
CreateThread(ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES,ByVal dwStackSize As DWORD,ByVal lpStartAddress As LPTHREAD_START_ROUTINE,ByVal lpParameter As PVOID,ByVal dwCreationFlags As DWORD,ByVal lpThreadId As PDWORD) As HANDLE
CreateTimerQueueTimer(ByVal As PHANDLE,ByVal As HANDLE,ByVal As WAITORTIMERCALLBACKFUNC,ByVal As PVOID,ByVal As DWORD,ByVal As DWORD,ByVal As ULONG) As BOOL
CreateTimerQueue() As HANDLE
CreateTapePartition(ByVal hDevice As HANDLE,ByVal dwPartitionMethod As DWORD,ByVal dwCount As DWORD,ByVal dwSize As DWORD) As DWORD
CreateRemoteThread(ByVal hProcess As HANDLE,ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES,ByVal dwStackSize As DWORD,ByVal lpStartAddress As LPTHREAD_START_ROUTINE,ByVal lpParameter As LPVOID,ByVal dwCreationFlags As DWORD,ByVal lpThreadId As LPDWORD) As HANDLE
CreateBitmap(ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal nPlanes As UINT,ByVal nBitCount As UINT,ByVal lpBits As PCVOID) As HBITMAP
CreateBitmapIndirect(ByVal lpBitmap As BITMAP PTR) As HBITMAP
CreateBrushIndirect(ByVal lpLogBrush As LOGBRUSH PTR) As HBRUSH
CreatePrivateObjectSecurity(ByVal ParentDescriptor As PSECURITY_DESCRIPTOR,ByVal CreatorDescriptor As PSECURITY_DESCRIPTOR,ByVal NewDescriptor As PSECURITY_DESCRIPTOR PTR,ByVal IsDirectoryObject As BOOL,ByVal Token As HANDLE,ByVal GenericMapping As PGENERIC_MAPPING) As BOOL
CreateEnhMetaFile(ByVal hdcRef As HDC,ByVal lpFileName As LPCSTR,ByVal lpRect As LPCRECT,ByVal lpDescription As LPCSTR) As HDC
CreatePipe(ByVal phReadPipe As PHANDLE,ByVal phWritePipe As PHANDLE,ByVal lpPipeAttributes As LPSECURITY_ATTRIBUTES,ByVal nSize As DWORD) As BOOL
CreateIoCompletionPort(ByVal FileHandle As HANDLE,ByVal ExistingCompletionPort As HANDLE,ByVal CompletionKey As DWORD,ByVal NumberOfConcurrentThreads As DWORD) As HANDLE
CreateFiberEx(ByVal As SIZE_T,ByVal As SIZE_T,ByVal As DWORD,ByVal As LPFIBER_START_ROUTINE,ByVal As LPVOID) As LPVOID
CreateFiber(ByVal dwStackSize As SIZE_T,ByVal lpStartAddress As LPFIBER_START_ROUTINE,ByVal lpParameter As LPVOID) As LPVOID
CreateMetaFile(ByVal lpString As LPCWSTR) As HDC
CreateDC(ByVal lpDriverName As LPCSTR,ByVal lpDeviceName As LPCSTR,ByVal lpOutput As LPCSTR,ByVal lpInitData As DEVMODEA PTR) As HDC
CreateErrorInfo(ByVal pperrinfo As LPCREATEERRORINFO PTR) As HRESULT
CreateStdDispatch(ByVal punkOuter As IUnknown PTR,ByVal pvThis As any PTR,ByVal ptinfo As LPTYPEINFO,ByVal ppunkStdDisp As IUnknown PTR PTR) As HRESULT
CreateColorSpace(ByVal lplogcolorspace As LPLOGCOLORSPACEA) As HCOLORSPACE
CreateUrlCacheEntry(ByVal lpszUrlName As LPCSTR,ByVal dwExpectedFileSize As DWORD,ByVal lpszFileExtension As LPCSTR,ByVal lpszFileName As LPWSTR,ByVal dwReserved As DWORD) As BOOL
CreateCompatibleBitmap(ByVal hdc As HDC,ByVal nWidth As Integer,ByVal nHeight As Integer) As HBITMAP
CreateCompatibleDC(ByVal hdc As HDC) As HDC
CreateDIBitmap(ByVal hdc As HDC,ByVal lpInfoHeader As BITMAPINFOHEADER PTR,ByVal dwUsage As DWORD,ByVal lpInitBits As PCVOID,ByVal lpInitInfo As BITMAPINFO PTR,ByVal wUsage As UINT) As HBITMAP
CreateDIBPatternBrush(ByVal hPackedDIB As HGLOBAL,ByVal wUsage As UINT) As HBRUSH
CreateDIBPatternBrushPt(ByVal lpPackedDIB As PCVOID,ByVal iUsage As UINT) As HBRUSH
CreateDispTypeInfo(ByVal pidata As INTERFACEDATA PTR,ByVal lcid As LCID,ByVal pptinfo As LPTYPEINFO PTR) As HRESULT
CreateDIBSection(ByVal hDC As HDC,ByVal pBitmapInfo As BITMAPINFO PTR,ByVal un As UINT,ByVal lplpVoid As any PTR PTR,ByVal handle As HANDLE,ByVal dw As DWORD) As HBITMAP
CreateTypeLib(ByVal syskind As SYSKIND,ByVal szFile As OLECHAR PTR,ByVal ppctlib As LPCREATETYPELIB PTR) As HRESULT
CreateWindowStation(ByVal lpwinsta As LPWSTR,ByVal dwReserved As DWORD,ByVal dwDesiredAccess As DWORD,ByVal lpsa As LPSECURITY_ATTRIBUTES) As HWINSTA
CreateWindowEx(ByVal dwExStyle As DWORD,ByVal lpClassName As LPCWSTR,ByVal lpWindowName As LPCWSTR,ByVal dwStyle As DWORD,ByVal x As Integer,ByVal y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal hWndParent As HWND,ByVal hMenu As HMENU,ByVal hInstance As HINSTANCE,ByVal lpParam As LPVOID) As HWND
CreateDiscardableBitmap(ByVal hdc As HDC,ByVal nWidth As Integer,ByVal nHeight As Integer) As HBITMAP
CreateEllipticRgn(ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer) As HRGN
CreateEllipticRgnIndirect(ByVal lpRect As LPCRECT) As HRGN
CreateHalftonePalette(ByVal hdc As HDC) As HPALETTE
CryptSetKeyParam(ByVal hKey As HCRYPTKEY,ByVal dwParam As DWORD,ByVal pbData As PBYTE,ByVal dwFlags As DWORD) As BOOL
CryptGetHashValue(ByVal As HCRYPTHASH,ByVal As DWORD,ByVal As PBYTE,ByVal As PDWORD) As BOOL
CryptDestroyHash(ByVal hHash As HCRYPTHASH) As BOOL
CryptSignHash(ByVal hHash As HCRYPTHASH,ByVal dwKeySpec As DWORD,ByVal sDescription As LPCWSTR,ByVal dwFlags As DWORD,ByVal pbSignature As PBYTE,ByVal pdwSigLen As PDWORD) As BOOL
CryptVerifySignature(ByVal hHash As HCRYPTHASH,ByVal pbSignature As PBYTE,ByVal dwSigLen As DWORD,ByVal hPubKey As HCRYPTKEY,ByVal sDescription As LPCWSTR,ByVal dwFlags As DWORD) As BOOL
CryptAcquireContext(ByVal phProv As HCRYPTPROV PTR,ByVal pszContainer As LPCWSTR,ByVal pszProvider As LPCWSTR,ByVal dwProvType As DWORD,ByVal dwFlags As DWORD) As BOOL
CryptHashData(ByVal hHash As HCRYPTHASH,ByVal pbData As PBYTE,ByVal dwDataLen As DWORD,ByVal dwFlags As DWORD) As BOOL
CryptSetProvider(ByVal pszProvName As LPCSTR,ByVal dwProvType As DWORD) As BOOL
CryptVerifySignature(ByVal hHash As HCRYPTHASH,ByVal pbSignature As PBYTE,ByVal dwSigLen As DWORD,ByVal hPubKey As HCRYPTKEY,ByVal sDescription As LPCSTR,ByVal dwFlags As DWORD) As BOOL
CryptSignHash(ByVal hHash As HCRYPTHASH,ByVal dwKeySpec As DWORD,ByVal sDescription As LPCSTR,ByVal dwFlags As DWORD,ByVal pbSignature As PBYTE,ByVal pdwSigLen As PDWORD) As BOOL
CryptAcquireContext(ByVal phProv As HCRYPTPROV PTR,ByVal pszContainer As LPCSTR,ByVal pszProvider As LPCSTR,ByVal dwProvType As DWORD,ByVal dwFlags As DWORD) As BOOL
CryptContextAddRef(ByVal hProv As HCRYPTPROV,ByVal pdwReserved As DWORD PTR,ByVal dwFlags As DWORD) As BOOL
CryptReleaseContext(ByVal hProv As HCRYPTPROV,ByVal dwFlags As DWORD) As BOOL
CryptGenKey(ByVal hProv As HCRYPTPROV,ByVal Algid As ALG_ID,ByVal dwFlags As DWORD,ByVal phKey As HCRYPTKEY PTR) As BOOL
CryptDeriveKey(ByVal hProv As HCRYPTPROV,ByVal Algid As ALG_ID,ByVal hBaseData As HCRYPTHASH,ByVal dwFlags As DWORD,ByVal phKey As HCRYPTKEY PTR) As BOOL
CryptDestroyKey(ByVal hKey As HCRYPTKEY) As BOOL
CryptHashSessionKey(ByVal hHash As HCRYPTHASH,ByVal hKey As HCRYPTKEY,ByVal dwFlags As DWORD) As BOOL
CryptGetKeyParam(ByVal hKey As HCRYPTKEY,ByVal dwParam As DWORD,ByVal pbData As PBYTE,ByVal pdwDataLen As PDWORD,ByVal dwFlags As DWORD) As BOOL
CryptSetHashParam(ByVal hHash As HCRYPTHASH,ByVal dwParam As DWORD,ByVal pbData As PBYTE,ByVal dwFlags As DWORD) As BOOL
CryptGetHashParam(ByVal hHash As HCRYPTHASH,ByVal dwParam As DWORD,ByVal pbData As PBYTE,ByVal pdwDataLen As PDWORD,ByVal dwFlags As DWORD) As BOOL
CryptSetProvParam(ByVal hProv As HCRYPTPROV,ByVal dwParam As DWORD,ByVal pbData As PBYTE,ByVal dwFlags As DWORD) As BOOL
CryptSetProvider(ByVal pszProvName As LPCWSTR,ByVal dwProvType As DWORD) As BOOL
CryptGetProvParam(ByVal hProv As HCRYPTPROV,ByVal dwParam As DWORD,ByVal pbData As PBYTE,ByVal pdwDataLen As PDWORD,ByVal dwFlags As DWORD) As BOOL
CryptGenRandom(ByVal hProv As HCRYPTPROV,ByVal dwLen As DWORD,ByVal pbBuffer As PBYTE) As BOOL
CryptGetUserKey(ByVal hProv As HCRYPTPROV,ByVal dwKeySpec As DWORD,ByVal phUserKey As HCRYPTKEY PTR) As BOOL
CryptExportKey(ByVal hKey As HCRYPTKEY,ByVal hExpKey As HCRYPTKEY,ByVal dwBlobType As DWORD,ByVal dwFlags As DWORD,ByVal pbData As PBYTE,ByVal pdwDataLen As PDWORD) As BOOL
CryptImportKey(ByVal hProv As HCRYPTPROV,ByVal pbData As PBYTE,ByVal dwDataLen As DWORD,ByVal hPubKey As HCRYPTKEY,ByVal dwFlags As DWORD,ByVal phKey As HCRYPTKEY PTR) As BOOL
CryptEncrypt(ByVal hKey As HCRYPTKEY,ByVal hHash As HCRYPTHASH,ByVal Final As BOOL,ByVal dwFlags As DWORD,ByVal pbData As PBYTE,ByVal pdwDataLen As PDWORD,ByVal dwBufLen As DWORD) As BOOL
CryptDecrypt(ByVal hKey As HCRYPTKEY,ByVal hHash As HCRYPTHASH,ByVal Final As BOOL,ByVal dwFlags As DWORD,ByVal pbData As PBYTE,ByVal pdwDataLen As PDWORD) As BOOL
CryptCreateHash(ByVal hProv As HCRYPTPROV,ByVal Algid As ALG_ID,ByVal hKey As HCRYPTKEY,ByVal dwFlags As DWORD,ByVal phHash As HCRYPTHASH PTR) As BOOL
CustomControlInfo(ByVal acci As LPCCINFOA) As UINT
CustomControlInfo(ByVal acci As LPCCINFOW) As UINT
D3DRMVectorNormalize(ByVal As LPD3DVECTOR) As LPD3DVECTOR
D3DRMCreateColorRGBA(ByVal red As D3DVALUE,ByVal green As D3DVALUE,ByVal blue As D3DVALUE,ByVal alpha As D3DVALUE) As D3DCOLOR
D3DRMQuaternionFromMatrix(ByVal As LPD3DRMQUATERNION,ByVal As D3DRMMATRIX4D) As LPD3DRMQUATERNION
D3DRMMatrixFromQuaternion(ByVal dmMat As D3DRMMATRIX4D,ByVal lpDqQuat As LPD3DRMQUATERNION) 
D3DRMQuaternionSlerp(ByVal q As LPD3DRMQUATERNION,ByVal a As LPD3DRMQUATERNION,ByVal b As LPD3DRMQUATERNION,ByVal alpha As D3DVALUE) As LPD3DRMQUATERNION
D3DRMQuaternionMultiply(ByVal q As LPD3DRMQUATERNION,ByVal a As LPD3DRMQUATERNION,ByVal b As LPD3DRMQUATERNION) As LPD3DRMQUATERNION
D3DRMCreateColorRGB(ByVal red As D3DVALUE,ByVal green As D3DVALUE,ByVal blue As D3DVALUE) As D3DCOLOR
D3DRMColorGetGreen(ByVal As D3DCOLOR) As D3DVALUE
D3DRMColorGetBlue(ByVal As D3DCOLOR) As D3DVALUE
D3DRMColorGetAlpha(ByVal As D3DCOLOR) As D3DVALUE
D3DRMVectorAdd(ByVal d As LPD3DVECTOR,ByVal s1 As LPD3DVECTOR,ByVal s2 As LPD3DVECTOR) As LPD3DVECTOR
D3DRMVectorSubtract(ByVal d As LPD3DVECTOR,ByVal s1 As LPD3DVECTOR,ByVal s2 As LPD3DVECTOR) As LPD3DVECTOR
D3DRMVectorReflect(ByVal d As LPD3DVECTOR,ByVal ray As LPD3DVECTOR,ByVal norm As LPD3DVECTOR) As LPD3DVECTOR
D3DRMVectorCrossProduct(ByVal d As LPD3DVECTOR,ByVal s1 As LPD3DVECTOR,ByVal s2 As LPD3DVECTOR) As LPD3DVECTOR
D3DRMVectorDotProduct(ByVal s1 As LPD3DVECTOR,ByVal s2 As LPD3DVECTOR) As D3DVALUE
D3DRMColorGetRed(ByVal As D3DCOLOR) As D3DVALUE
D3DRMVectorModulus(ByVal v As LPD3DVECTOR) As D3DVALUE
D3DRMVectorRotate(ByVal r As LPD3DVECTOR,ByVal v As LPD3DVECTOR,ByVal axis As LPD3DVECTOR,ByVal theta As D3DVALUE) As LPD3DVECTOR
D3DRMVectorScale(ByVal d As LPD3DVECTOR,ByVal s As LPD3DVECTOR,ByVal factor As D3DVALUE) As LPD3DVECTOR
D3DRMVectorRandom(ByVal d As LPD3DVECTOR) As LPD3DVECTOR
D3DRMQuaternionFromRotation(ByVal quat As LPD3DRMQUATERNION,ByVal v As LPD3DVECTOR,ByVal theta As D3DVALUE) As LPD3DRMQUATERNION
D3DXCreateFontIndirectA(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pDesc As D3DXFONT_DESCA PTR,ByVal ppFont As LPD3DXFONT PTR) As HRESULT
D3DXCreateCubeTexture(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Size As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateFontA(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Height As INT_,ByVal Width As UINT,ByVal Weight As UINT,ByVal MipLevels As UINT,ByVal Italic As BOOL,ByVal CharSet As DWORD,ByVal OutputPrecision As DWORD,ByVal Quality As DWORD,ByVal PitchAndFamily As DWORD,ByVal pFaceName As LPCSTR,ByVal ppFont As LPD3DXFONT PTR) As HRESULT
D3DXMatrixAffineTransformation(ByVal pOut As D3DXMATRIX PTR,ByVal Scaling As FLOAT,ByVal pRotationCenter As D3DXVECTOR3 PTR,ByVal pRotation As D3DXQUATERNION PTR,ByVal pTranslation As D3DXVECTOR3 PTR) As D3DXMATRIX PTR
D3DXFrameFind(ByVal pFrameRoot As D3DXFRAME PTR,ByVal Name As LPCSTR) As LPD3DXFRAME
D3DXCreatePMeshFromStream(ByVal pStream As IStream PTR,ByVal Options As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppMaterials As LPD3DXBUFFER PTR,ByVal ppEffectInstances As LPD3DXBUFFER PTR,ByVal pNumMaterials As DWORD PTR,ByVal ppPMesh As LPD3DXPMESH PTR) As HRESULT
D3DXCreateRenderToSurface(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Width As UINT,ByVal Height As UINT,ByVal Format As D3DFORMAT,ByVal DepthStencil As BOOL,ByVal DepthStencilFormat As D3DFORMAT,ByVal ppRenderToSurface As LPD3DXRENDERTOSURFACE PTR) As HRESULT
D3DXVec3Transform(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR4 PTR
D3DXVec3TransformCoord(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR3 PTR
D3DXVec3TransformNormal(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR3 PTR
D3DXVec3TransformArray(ByVal pOut As D3DXVECTOR4 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR3 PTR,ByVal VStride As UINT,ByVal pM As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR4 PTR
D3DXVec3TransformCoordArray(ByVal pOut As D3DXVECTOR3 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR3 PTR,ByVal VStride As UINT,ByVal pM As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR3 PTR
D3DXVec3TransformNormalArray(ByVal pOut As D3DXVECTOR3 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR3 PTR,ByVal VStride As UINT,ByVal pM As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR3 PTR
D3DXVec3Project(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal pViewport As D3DVIEWPORT9 PTR,ByVal pProjection As D3DXMATRIX PTR,ByVal pView As D3DXMATRIX PTR,ByVal pWorld As D3DXMATRIX PTR) As D3DXVECTOR3 PTR
D3DXVec3Unproject(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal pViewport As D3DVIEWPORT9 PTR,ByVal pProjection As D3DXMATRIX PTR,ByVal pView As D3DXMATRIX PTR,ByVal pWorld As D3DXMATRIX PTR) As D3DXVECTOR3 PTR
D3DXVec3ProjectArray(ByVal pOut As D3DXVECTOR3 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR3 PTR,ByVal VStride As UINT,ByVal pViewport As D3DVIEWPORT9 PTR,ByVal pProjection As D3DXMATRIX PTR,ByVal pView As D3DXMATRIX PTR,ByVal pWorld As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR3 PTR
D3DXVec3UnprojectArray(ByVal pOut As D3DXVECTOR3 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR3 PTR,ByVal VStride As UINT,ByVal pViewport As D3DVIEWPORT9 PTR,ByVal pProjection As D3DXMATRIX PTR,ByVal pView As D3DXMATRIX PTR,ByVal pWorld As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR3 PTR
D3DXVec4Length(ByVal pV As D3DXVECTOR4 PTR) As FLOAT
D3DXVec4LengthSq(ByVal pV As D3DXVECTOR4 PTR) As FLOAT
D3DXVec4Dot(ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As FLOAT
D3DXVec4Add(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Subtract(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Minimize(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Maximize(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Scale(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR4 PTR,ByVal s As FLOAT) As D3DXVECTOR4 PTR
D3DXVec4Lerp(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal s As FLOAT) As D3DXVECTOR4 PTR
D3DXVec4Cross(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal pV3 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Normalize(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Hermite(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pT1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal pT2 As D3DXVECTOR4 PTR,ByVal s As FLOAT) As D3DXVECTOR4 PTR
D3DXVec4CatmullRom(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV0 As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal pV3 As D3DXVECTOR4 PTR,ByVal s As FLOAT) As D3DXVECTOR4 PTR
D3DXVec4BaryCentric(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal pV3 As D3DXVECTOR4 PTR,ByVal f As FLOAT,ByVal g As FLOAT) As D3DXVECTOR4 PTR
D3DXVec4Transform(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR4 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR4 PTR
D3DXVec4TransformArray(ByVal pOut As D3DXVECTOR4 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR4 PTR,ByVal VStride As UINT,ByVal pM As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR4 PTR
D3DXMatrixIdentity(ByVal pOut As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixIsIdentity(ByVal pM As D3DXMATRIX PTR) As BOOL
D3DXMatrixDeterminant(ByVal pM As D3DXMATRIX PTR) As FLOAT
D3DXMatrixDecompose(ByVal pOutScale As D3DXVECTOR3 PTR,ByVal pOutRotation As D3DXQUATERNION PTR,ByVal pOutTranslation As D3DXVECTOR3 PTR,ByVal pM As D3DXMATRIX PTR) As HRESULT
D3DXMatrixTranspose(ByVal pOut As D3DXMATRIX PTR,ByVal pM As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixMultiply(ByVal pOut As D3DXMATRIX PTR,ByVal pM1 As D3DXMATRIX PTR,ByVal pM2 As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixMultiplyTranspose(ByVal pOut As D3DXMATRIX PTR,ByVal pM1 As D3DXMATRIX PTR,ByVal pM2 As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixInverse(ByVal pOut As D3DXMATRIX PTR,ByVal pDeterminant As FLOAT PTR,ByVal pM As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixScaling(ByVal pOut As D3DXMATRIX PTR,ByVal sx As FLOAT,ByVal sy As FLOAT,ByVal sz As FLOAT) As D3DXMATRIX PTR
D3DXMatrixTranslation(ByVal pOut As D3DXMATRIX PTR,ByVal x As FLOAT,ByVal y As FLOAT,ByVal z As FLOAT) As D3DXMATRIX PTR
D3DXMatrixRotationX(ByVal pOut As D3DXMATRIX PTR,ByVal Angle As FLOAT) As D3DXMATRIX PTR
D3DXMatrixRotationY(ByVal pOut As D3DXMATRIX PTR,ByVal Angle As FLOAT) As D3DXMATRIX PTR
D3DXMatrixRotationZ(ByVal pOut As D3DXMATRIX PTR,ByVal Angle As FLOAT) As D3DXMATRIX PTR
D3DXMatrixRotationAxis(ByVal pOut As D3DXMATRIX PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal Angle As FLOAT) As D3DXMATRIX PTR
D3DXMatrixRotationQuaternion(ByVal pOut As D3DXMATRIX PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXMATRIX PTR
D3DXMatrixRotationYawPitchRoll(ByVal pOut As D3DXMATRIX PTR,ByVal Yaw As FLOAT,ByVal Pitch As FLOAT,ByVal Roll As FLOAT) As D3DXMATRIX PTR
D3DXMatrixTransformation(ByVal pOut As D3DXMATRIX PTR,ByVal pScalingCenter As D3DXVECTOR3 PTR,ByVal pScalingRotation As D3DXQUATERNION PTR,ByVal pScaling As D3DXVECTOR3 PTR,ByVal pRotationCenter As D3DXVECTOR3 PTR,ByVal pRotation As D3DXQUATERNION PTR,ByVal pTranslation As D3DXVECTOR3 PTR) As D3DXMATRIX PTR
D3DXMatrixTransformation2D(ByVal pOut As D3DXMATRIX PTR,ByVal pScalingCenter As D3DXVECTOR2 PTR,ByVal ScalingRotation As FLOAT,ByVal pScaling As D3DXVECTOR2 PTR,ByVal pRotationCenter As D3DXVECTOR2 PTR,ByVal Rotation As FLOAT,ByVal pTranslation As D3DXVECTOR2 PTR) As D3DXMATRIX PTR
D3DXCreateFontIndirectW(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pDesc As D3DXFONT_DESCW PTR,ByVal ppFont As LPD3DXFONT PTR) As HRESULT
D3DXMatrixAffineTransformation2D(ByVal pOut As D3DXMATRIX PTR,ByVal Scaling As FLOAT,ByVal pRotationCenter As D3DXVECTOR2 PTR,ByVal Rotation As FLOAT,ByVal pTranslation As D3DXVECTOR2 PTR) As D3DXMATRIX PTR
D3DXMatrixLookAtRH(ByVal pOut As D3DXMATRIX PTR,ByVal pEye As D3DXVECTOR3 PTR,ByVal pAt As D3DXVECTOR3 PTR,ByVal pUp As D3DXVECTOR3 PTR) As D3DXMATRIX PTR
D3DXMatrixLookAtLH(ByVal pOut As D3DXMATRIX PTR,ByVal pEye As D3DXVECTOR3 PTR,ByVal pAt As D3DXVECTOR3 PTR,ByVal pUp As D3DXVECTOR3 PTR) As D3DXMATRIX PTR
D3DXMatrixPerspectiveRH(ByVal pOut As D3DXMATRIX PTR,ByVal w As FLOAT,ByVal h As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixPerspectiveLH(ByVal pOut As D3DXMATRIX PTR,ByVal w As FLOAT,ByVal h As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixPerspectiveFovRH(ByVal pOut As D3DXMATRIX PTR,ByVal fovy As FLOAT,ByVal Aspect As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixPerspectiveFovLH(ByVal pOut As D3DXMATRIX PTR,ByVal fovy As FLOAT,ByVal Aspect As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixPerspectiveOffCenterRH(ByVal pOut As D3DXMATRIX PTR,ByVal l As FLOAT,ByVal r As FLOAT,ByVal b As FLOAT,ByVal t As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixPerspectiveOffCenterLH(ByVal pOut As D3DXMATRIX PTR,ByVal l As FLOAT,ByVal r As FLOAT,ByVal b As FLOAT,ByVal t As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixOrthoRH(ByVal pOut As D3DXMATRIX PTR,ByVal w As FLOAT,ByVal h As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixOrthoLH(ByVal pOut As D3DXMATRIX PTR,ByVal w As FLOAT,ByVal h As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixOrthoOffCenterRH(ByVal pOut As D3DXMATRIX PTR,ByVal l As FLOAT,ByVal r As FLOAT,ByVal b As FLOAT,ByVal t As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixOrthoOffCenterLH(ByVal pOut As D3DXMATRIX PTR,ByVal l As FLOAT,ByVal r As FLOAT,ByVal b As FLOAT,ByVal t As FLOAT,ByVal zn As FLOAT,ByVal zf As FLOAT) As D3DXMATRIX PTR
D3DXMatrixShadow(ByVal pOut As D3DXMATRIX PTR,ByVal pLight As D3DXVECTOR4 PTR,ByVal pPlane As D3DXPLANE PTR) As D3DXMATRIX PTR
D3DXMatrixReflect(ByVal pOut As D3DXMATRIX PTR,ByVal pPlane As D3DXPLANE PTR) As D3DXMATRIX PTR
D3DXQuaternionLength(ByVal pQ As D3DXQUATERNION PTR) As FLOAT
D3DXQuaternionLengthSq(ByVal pQ As D3DXQUATERNION PTR) As FLOAT
D3DXQuaternionDot(ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR) As FLOAT
D3DXQuaternionIdentity(ByVal pOut As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionIsIdentity(ByVal pQ As D3DXQUATERNION PTR) As BOOL
D3DXQuaternionConjugate(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionRotationMatrix(ByVal pOut As D3DXQUATERNION PTR,ByVal pM As D3DXMATRIX PTR) As D3DXQUATERNION PTR
D3DXQuaternionRotationAxis(ByVal pOut As D3DXQUATERNION PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal Angle As FLOAT) As D3DXQUATERNION PTR
D3DXQuaternionRotationYawPitchRoll(ByVal pOut As D3DXQUATERNION PTR,ByVal Yaw As FLOAT,ByVal Pitch As FLOAT,ByVal Roll As FLOAT) As D3DXQUATERNION PTR
D3DXQuaternionMultiply(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionNormalize(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionInverse(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionLn(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionExp(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionSlerp(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR,ByVal t As FLOAT) As D3DXQUATERNION PTR
D3DXQuaternionSquad(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pA As D3DXQUATERNION PTR,ByVal pB As D3DXQUATERNION PTR,ByVal pC As D3DXQUATERNION PTR,ByVal t As FLOAT) As D3DXQUATERNION PTR
D3DXQuaternionBaryCentric(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR,ByVal pQ3 As D3DXQUATERNION PTR,ByVal f As FLOAT,ByVal g As FLOAT) As D3DXQUATERNION PTR
D3DXPlaneDot(ByVal pP As D3DXPLANE PTR,ByVal pV As D3DXVECTOR4 PTR) As FLOAT
D3DXPlaneDotCoord(ByVal pP As D3DXPLANE PTR,ByVal pV As D3DXVECTOR3 PTR) As FLOAT
D3DXPlaneDotNormal(ByVal pP As D3DXPLANE PTR,ByVal pV As D3DXVECTOR3 PTR) As FLOAT
D3DXPlaneScale(ByVal pOut As D3DXPLANE PTR,ByVal pP As D3DXPLANE PTR,ByVal s As FLOAT) As D3DXPLANE PTR
D3DXPlaneNormalize(ByVal pOut As D3DXPLANE PTR,ByVal pP As D3DXPLANE PTR) As D3DXPLANE PTR
D3DXPlaneIntersectLine(ByVal pOut As D3DXVECTOR3 PTR,ByVal pP As D3DXPLANE PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXPlaneFromPointNormal(ByVal pOut As D3DXPLANE PTR,ByVal pPoint As D3DXVECTOR3 PTR,ByVal pNormal As D3DXVECTOR3 PTR) As D3DXPLANE PTR
D3DXPlaneFromPoints(ByVal pOut As D3DXPLANE PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal pV3 As D3DXVECTOR3 PTR) As D3DXPLANE PTR
D3DXPlaneTransform(ByVal pOut As D3DXPLANE PTR,ByVal pP As D3DXPLANE PTR,ByVal pM As D3DXMATRIX PTR) As D3DXPLANE PTR
D3DXPlaneTransformArray(ByVal pOut As D3DXPLANE PTR,ByVal OutStride As UINT,ByVal pP As D3DXPLANE PTR,ByVal PStride As UINT,ByVal pM As D3DXMATRIX PTR,ByVal n As UINT) As D3DXPLANE PTR
D3DXColorNegative(ByVal pOut As D3DXCOLOR PTR,ByVal pC As D3DXCOLOR PTR) As D3DXCOLOR PTR
D3DXColorAdd(ByVal pOut As D3DXCOLOR PTR,ByVal pC1 As D3DXCOLOR PTR,ByVal pC2 As D3DXCOLOR PTR) As D3DXCOLOR PTR
D3DXColorSubtract(ByVal pOut As D3DXCOLOR PTR,ByVal pC1 As D3DXCOLOR PTR,ByVal pC2 As D3DXCOLOR PTR) As D3DXCOLOR PTR
D3DXColorScale(ByVal pOut As D3DXCOLOR PTR,ByVal pC As D3DXCOLOR PTR,ByVal s As FLOAT) As D3DXCOLOR PTR
D3DXColorModulate(ByVal pOut As D3DXCOLOR PTR,ByVal pC1 As D3DXCOLOR PTR,ByVal pC2 As D3DXCOLOR PTR) As D3DXCOLOR PTR
D3DXColorLerp(ByVal pOut As D3DXCOLOR PTR,ByVal pC1 As D3DXCOLOR PTR,ByVal pC2 As D3DXCOLOR PTR,ByVal s As FLOAT) As D3DXCOLOR PTR
D3DXColorAdjustSaturation(ByVal pOut As D3DXCOLOR PTR,ByVal pC As D3DXCOLOR PTR,ByVal s As FLOAT) As D3DXCOLOR PTR
D3DXColorAdjustContrast(ByVal pOut As D3DXCOLOR PTR,ByVal pC As D3DXCOLOR PTR,ByVal c As FLOAT) As D3DXCOLOR PTR
D3DXFresnelTerm(ByVal CosTheta As FLOAT,ByVal RefractionIndex As FLOAT) As FLOAT
D3DXCreateMatrixStack(ByVal Flags As DWORD,ByVal ppStack As LPD3DXMATRIXSTACK PTR) As HRESULT
D3DXSHEvalDirection(ByVal pOut As FLOAT PTR,ByVal Order As UINT,ByVal pDir As D3DXVECTOR3 PTR) As FLOAT PTR
D3DXSHRotate(ByVal pOut As FLOAT PTR,ByVal Order As UINT,ByVal pMatrix As D3DXMATRIX PTR,ByVal pIn As FLOAT PTR) As FLOAT PTR
D3DXSHRotateZ(ByVal pOut As FLOAT PTR,ByVal Order As UINT,ByVal Angle As FLOAT,ByVal pIn As FLOAT PTR) As FLOAT PTR
D3DXSHAdd(ByVal pOut As FLOAT PTR,ByVal Order As UINT,ByVal pA As FLOAT PTR,ByVal pB As FLOAT PTR) As FLOAT PTR
D3DXSHScale(ByVal pOut As FLOAT PTR,ByVal Order As UINT,ByVal pIn As FLOAT PTR,ByVal Scale As FLOAT) As FLOAT PTR
D3DXSHDot(ByVal Order As UINT,ByVal pA As FLOAT PTR,ByVal pB As FLOAT PTR) As FLOAT
D3DXSHEvalDirectionalLight(ByVal Order As UINT,ByVal pDir As D3DXVECTOR3 PTR,ByVal RIntensity As FLOAT,ByVal GIntensity As FLOAT,ByVal BIntensity As FLOAT,ByVal pROut As FLOAT PTR,ByVal pGOut As FLOAT PTR,ByVal pBOut As FLOAT PTR) As HRESULT
D3DXSHEvalSphericalLight(ByVal Order As UINT,ByVal pPos As D3DXVECTOR3 PTR,ByVal Radius As FLOAT,ByVal RIntensity As FLOAT,ByVal GIntensity As FLOAT,ByVal BIntensity As FLOAT,ByVal pROut As FLOAT PTR,ByVal pGOut As FLOAT PTR,ByVal pBOut As FLOAT PTR) As HRESULT
D3DXSHEvalConeLight(ByVal Order As UINT,ByVal pDir As D3DXVECTOR3 PTR,ByVal Radius As FLOAT,ByVal RIntensity As FLOAT,ByVal GIntensity As FLOAT,ByVal BIntensity As FLOAT,ByVal pROut As FLOAT PTR,ByVal pGOut As FLOAT PTR,ByVal pBOut As FLOAT PTR) As HRESULT
D3DXSHEvalHemisphereLight(ByVal Order As UINT,ByVal pDir As D3DXVECTOR3 PTR,ByVal Top As D3DXCOLOR,ByVal Bottom As D3DXCOLOR,ByVal pROut As FLOAT PTR,ByVal pGOut As FLOAT PTR,ByVal pBOut As FLOAT PTR) As HRESULT
D3DXSHProjectCubeMap(ByVal uOrder As UINT,ByVal pCubeMap As LPDIRECT3DCUBETEXTURE9,ByVal pROut As FLOAT PTR,ByVal pGOut As FLOAT PTR,ByVal pBOut As FLOAT PTR) As HRESULT
D3DXCreateMesh(ByVal NumFaces As DWORD,ByVal NumVertices As DWORD,ByVal Options As DWORD,ByVal pDeclaration As D3DVERTEXELEMENT9 PTR,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXCreateMeshFVF(ByVal NumFaces As DWORD,ByVal NumVertices As DWORD,ByVal Options As DWORD,ByVal FVF As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXCreateSPMesh(ByVal pMesh As LPD3DXMESH,ByVal pAdjacency As DWORD PTR,ByVal pVertexAttributeWeights As D3DXATTRIBUTEWEIGHTS PTR,ByVal pVertexWeights As FLOAT PTR,ByVal ppSMesh As LPD3DXSPMESH PTR) As HRESULT
D3DXCleanMesh(ByVal CleanType As D3DXCLEANTYPE,ByVal pMeshIn As LPD3DXMESH,ByVal pAdjacencyIn As DWORD PTR,ByVal ppMeshOut As LPD3DXMESH PTR,ByVal pAdjacencyOut As DWORD PTR,ByVal ppErrorsAndWarnings As LPD3DXBUFFER PTR) As HRESULT
D3DXValidMesh(ByVal pMeshIn As LPD3DXMESH,ByVal pAdjacency As DWORD PTR,ByVal ppErrorsAndWarnings As LPD3DXBUFFER PTR) As HRESULT
D3DXGeneratePMesh(ByVal pMesh As LPD3DXMESH,ByVal pAdjacency As DWORD PTR,ByVal pVertexAttributeWeights As D3DXATTRIBUTEWEIGHTS PTR,ByVal pVertexWeights As FLOAT PTR,ByVal MinValue As DWORD,ByVal Options As DWORD,ByVal ppPMesh As LPD3DXPMESH PTR) As HRESULT
D3DXSimplifyMesh(ByVal pMesh As LPD3DXMESH,ByVal pAdjacency As DWORD PTR,ByVal pVertexAttributeWeights As D3DXATTRIBUTEWEIGHTS PTR,ByVal pVertexWeights As FLOAT PTR,ByVal MinValue As DWORD,ByVal Options As DWORD,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXComputeBoundingSphere(ByVal pFirstPosition As D3DXVECTOR3 PTR,ByVal NumVertices As DWORD,ByVal dwStride As DWORD,ByVal pCenter As D3DXVECTOR3 PTR,ByVal pRadius As FLOAT PTR) As HRESULT
D3DXComputeBoundingBox(ByVal pFirstPosition As D3DXVECTOR3 PTR,ByVal NumVertices As DWORD,ByVal dwStride As DWORD,ByVal pMin As D3DXVECTOR3 PTR,ByVal pMax As D3DXVECTOR3 PTR) As HRESULT
D3DXComputeNormals(ByVal pMesh As LPD3DXBASEMESH,ByVal pAdjacency As DWORD PTR) As HRESULT
D3DXCreateBuffer(ByVal NumBytes As DWORD,ByVal ppBuffer As LPD3DXBUFFER PTR) As HRESULT
D3DXLoadMeshFromXInMemory(ByVal Memory As LPCVOID,ByVal SizeOfMemory As DWORD,ByVal Options As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppAdjacency As LPD3DXBUFFER PTR,ByVal ppMaterials As LPD3DXBUFFER PTR,ByVal ppEffectInstances As LPD3DXBUFFER PTR,ByVal pNumMaterials As DWORD PTR,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXLoadMeshFromXResource(ByVal Module As HMODULE,ByVal Name As LPCSTR,ByVal Type As LPCSTR,ByVal Options As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppAdjacency As LPD3DXBUFFER PTR,ByVal ppMaterials As LPD3DXBUFFER PTR,ByVal ppEffectInstances As LPD3DXBUFFER PTR,ByVal pNumMaterials As DWORD PTR,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXLoadMeshFromX(ByVal pFilename As LPCWSTR,ByVal Options As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppAdjacency As LPD3DXBUFFER PTR,ByVal ppMaterials As LPD3DXBUFFER PTR,ByVal ppEffectInstances As LPD3DXBUFFER PTR,ByVal pNumMaterials As DWORD PTR,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXSaveMeshToX(ByVal pFilename As LPCWSTR,ByVal pMesh As LPD3DXMESH,ByVal pAdjacency As DWORD PTR,ByVal pMaterials As D3DXMATERIAL PTR,ByVal pEffectInstances As D3DXEFFECTINSTANCE PTR,ByVal NumMaterials As DWORD,ByVal Format As DWORD) As HRESULT
D3DXLoadMeshFromX(ByVal pFilename As LPCSTR,ByVal Options As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppAdjacency As LPD3DXBUFFER PTR,ByVal ppMaterials As LPD3DXBUFFER PTR,ByVal ppEffectInstances As LPD3DXBUFFER PTR,ByVal pNumMaterials As DWORD PTR,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXSaveMeshToX(ByVal pFilename As LPCSTR,ByVal pMesh As LPD3DXMESH,ByVal pAdjacency As DWORD PTR,ByVal pMaterials As D3DXMATERIAL PTR,ByVal pEffectInstances As D3DXEFFECTINSTANCE PTR,ByVal NumMaterials As DWORD,ByVal Format As DWORD) As HRESULT
D3DXCreateRenderToEnvMap(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Size As UINT,ByVal MipLevels As UINT,ByVal Format As D3DFORMAT,ByVal DepthStencil As BOOL,ByVal DepthStencilFormat As D3DFORMAT,ByVal ppRenderToEnvMap As LPD3DXRenderToEnvMap PTR) As HRESULT
D3DXCreateSkinInfo(ByVal NumVertices As DWORD,ByVal pDeclaration As D3DVERTEXELEMENT9 PTR,ByVal NumBones As DWORD,ByVal ppSkinInfo As LPD3DXSKININFO PTR) As HRESULT
D3DXCreateSkinInfoFVF(ByVal NumVertices As DWORD,ByVal FVF As DWORD,ByVal NumBones As DWORD,ByVal ppSkinInfo As LPD3DXSKININFO PTR) As HRESULT
D3DXLoadMeshFromXof(ByVal pxofMesh As LPD3DXFILEDATA,ByVal Options As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppAdjacency As LPD3DXBUFFER PTR,ByVal ppMaterials As LPD3DXBUFFER PTR,ByVal ppEffectInstances As LPD3DXBUFFER PTR,ByVal pNumMaterials As DWORD PTR,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXLoadSkinMeshFromXof(ByVal pxofMesh As LPD3DXFILEDATA,ByVal Options As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppAdjacency As LPD3DXBUFFER PTR,ByVal ppMaterials As LPD3DXBUFFER PTR,ByVal ppEffectInstances As LPD3DXBUFFER PTR,ByVal pMatOut As DWORD PTR,ByVal ppSkinInfo As LPD3DXSKININFO PTR,ByVal ppMesh As LPD3DXMESH PTR) As HRESULT
D3DXCreateSkinInfoFromBlendedMesh(ByVal pMesh As LPD3DXBASEMESH,ByVal NumBones As DWORD,ByVal pBoneCombinationTable As D3DXBONECOMBINATION PTR,ByVal ppSkinInfo As LPD3DXSKININFO PTR) As HRESULT
D3DXTessellateNPatches(ByVal pMeshIn As LPD3DXMESH,ByVal pAdjacencyIn As DWORD PTR,ByVal NumSegs As FLOAT,ByVal QuadraticInterpNormals As BOOL,ByVal ppMeshOut As LPD3DXMESH PTR,ByVal ppAdjacencyOut As LPD3DXBUFFER PTR) As HRESULT
D3DXGenerateOutputDecl(ByVal pOutput As D3DVERTEXELEMENT9 PTR,ByVal pInput As D3DVERTEXELEMENT9 PTR) As HRESULT
D3DXLoadPatchMeshFromXof(ByVal pXofObjMesh As LPD3DXFILEDATA,ByVal Options As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppMaterials As LPD3DXBUFFER PTR,ByVal ppEffectInstances As LPD3DXBUFFER PTR,ByVal pNumMaterials As PDWORD,ByVal ppMesh As LPD3DXPATCHMESH PTR) As HRESULT
D3DXRectPatchSize(ByVal pfNumSegs As FLOAT PTR,ByVal pdwTriangles As DWORD PTR,ByVal pdwVertices As DWORD PTR) As HRESULT
D3DXTriPatchSize(ByVal pfNumSegs As FLOAT PTR,ByVal pdwTriangles As DWORD PTR,ByVal pdwVertices As DWORD PTR) As HRESULT
D3DXTessellateRectPatch(ByVal pVB As LPDIRECT3DVERTEXBUFFER9,ByVal pNumSegs As FLOAT PTR,ByVal pdwInDecl As D3DVERTEXELEMENT9 PTR,ByVal pRectPatchInfo As D3DRECTPATCH_INFO PTR,ByVal pMesh As LPD3DXMESH) As HRESULT
D3DXTessellateTriPatch(ByVal pVB As LPDIRECT3DVERTEXBUFFER9,ByVal pNumSegs As FLOAT PTR,ByVal pInDecl As D3DVERTEXELEMENT9 PTR,ByVal pTriPatchInfo As D3DTRIPATCH_INFO PTR,ByVal pMesh As LPD3DXMESH) As HRESULT
D3DXCreateNPatchMesh(ByVal pMeshSysMem As LPD3DXMESH,ByVal pPatchMesh As LPD3DXPATCHMESH PTR) As HRESULT
D3DXCreatePatchMesh(ByVal pInfo As D3DXPATCHINFO PTR,ByVal dwNumPatches As DWORD,ByVal dwNumVertices As DWORD,ByVal dwOptions As DWORD,ByVal pDecl As D3DVERTEXELEMENT9 PTR,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal pPatchMesh As LPD3DXPATCHMESH PTR) As HRESULT
D3DXValidPatchMesh(ByVal pMesh As LPD3DXPATCHMESH,ByVal dwcDegenerateVertices As DWORD PTR,ByVal dwcDegeneratePatches As DWORD PTR,ByVal ppErrorsAndWarnings As LPD3DXBUFFER PTR) As HRESULT
D3DXGetFVFVertexSize(ByVal FVF As DWORD) As UINT
D3DXGetDeclVertexSize(ByVal pDecl As D3DVERTEXELEMENT9 PTR,ByVal Stream As DWORD) As UINT
D3DXGetDeclLength(ByVal pDecl As D3DVERTEXELEMENT9 PTR) As UINT
D3DXDeclaratorFromFVF(ByVal FVF As DWORD,ByVal pDeclarator As D3DVERTEXELEMENT9 PTR) As HRESULT
D3DXFVFFromDeclarator(ByVal pDeclarator As D3DVERTEXELEMENT9 PTR,ByVal pFVF As DWORD PTR) As HRESULT
D3DXWeldVertices(ByVal pMesh As LPD3DXMESH,ByVal Flags As DWORD,ByVal pEpsilons As D3DXWELDEPSILONS PTR,ByVal pAdjacencyIn As DWORD PTR,ByVal pAdjacencyOut As DWORD PTR,ByVal pFaceRemap As DWORD PTR,ByVal ppVertexRemap As LPD3DXBUFFER PTR) As HRESULT
D3DXIntersect(ByVal pMesh As LPD3DXBASEMESH,ByVal pRayPos As D3DXVECTOR3 PTR,ByVal pRayDir As D3DXVECTOR3 PTR,ByVal pHit As BOOL PTR,ByVal pFaceIndex As DWORD PTR,ByVal pU As FLOAT PTR,ByVal pV As FLOAT PTR,ByVal pDist As FLOAT PTR,ByVal ppAllHits As LPD3DXBUFFER PTR,ByVal pCountOfHits As DWORD PTR) As HRESULT
D3DXIntersectSubset(ByVal pMesh As LPD3DXBASEMESH,ByVal AttribId As DWORD,ByVal pRayPos As D3DXVECTOR3 PTR,ByVal pRayDir As D3DXVECTOR3 PTR,ByVal pHit As BOOL PTR,ByVal pFaceIndex As DWORD PTR,ByVal pU As FLOAT PTR,ByVal pV As FLOAT PTR,ByVal pDist As FLOAT PTR,ByVal ppAllHits As LPD3DXBUFFER PTR,ByVal pCountOfHits As DWORD PTR) As HRESULT
D3DXSplitMesh(ByVal pMeshIn As LPD3DXMESH,ByVal pAdjacencyIn As DWORD PTR,ByVal MaxSize As DWORD,ByVal Options As DWORD,ByVal pMeshesOut As DWORD PTR,ByVal ppMeshArrayOut As LPD3DXBUFFER PTR,ByVal ppAdjacencyArrayOut As LPD3DXBUFFER PTR,ByVal ppFaceRemapArrayOut As LPD3DXBUFFER PTR,ByVal ppVertRemapArrayOut As LPD3DXBUFFER PTR) As HRESULT
D3DXIntersectTri(ByVal p0 As D3DXVECTOR3 PTR,ByVal p1 As D3DXVECTOR3 PTR,ByVal p2 As D3DXVECTOR3 PTR,ByVal pRayPos As D3DXVECTOR3 PTR,ByVal pRayDir As D3DXVECTOR3 PTR,ByVal pU As FLOAT PTR,ByVal pV As FLOAT PTR,ByVal pDist As FLOAT PTR) As BOOL
D3DXSphereBoundProbe(ByVal pCenter As D3DXVECTOR3 PTR,ByVal Radius As FLOAT,ByVal pRayPosition As D3DXVECTOR3 PTR,ByVal pRayDirection As D3DXVECTOR3 PTR) As BOOL
D3DXBoxBoundProbe(ByVal pMin As D3DXVECTOR3 PTR,ByVal pMax As D3DXVECTOR3 PTR,ByVal pRayPosition As D3DXVECTOR3 PTR,ByVal pRayDirection As D3DXVECTOR3 PTR) As BOOL
D3DXComputeTangent(ByVal Mesh As LPD3DXMESH,ByVal TexStage As DWORD,ByVal TangentIndex As DWORD,ByVal BinormIndex As DWORD,ByVal Wrap As DWORD,ByVal pAdjacency As DWORD PTR) As HRESULT
D3DXConvertMeshSubsetToSingleStrip(ByVal MeshIn As LPD3DXBASEMESH,ByVal AttribId As DWORD,ByVal IBOptions As DWORD,ByVal ppIndexBuffer As LPDIRECT3DINDEXBUFFER9 PTR,ByVal pNumIndices As DWORD PTR) As HRESULT
D3DXConvertMeshSubsetToStrips(ByVal MeshIn As LPD3DXBASEMESH,ByVal AttribId As DWORD,ByVal IBOptions As DWORD,ByVal ppIndexBuffer As LPDIRECT3DINDEXBUFFER9 PTR,ByVal pNumIndices As DWORD PTR,ByVal ppStripLengths As LPD3DXBUFFER PTR,ByVal pNumStrips As DWORD PTR) As HRESULT
D3DXOptimizeFaces(ByVal pbIndices As LPCVOID,ByVal cFaces As UINT,ByVal cVertices As UINT,ByVal b32BitIndices As BOOL,ByVal pFaceRemap As DWORD PTR) As HRESULT
D3DXOptimizeVertices(ByVal pbIndices As LPCVOID,ByVal cFaces As UINT,ByVal cVertices As UINT,ByVal b32BitIndices As BOOL,ByVal pVertexRemap As DWORD PTR) As HRESULT
D3DXCreatePRTBuffer(ByVal NumSamples As UINT,ByVal NumCoeffs As UINT,ByVal NumChannels As UINT,ByVal ppBuffer As LPD3DXPRTBUFFER PTR) As HRESULT
D3DXCreatePRTBufferTex(ByVal Width As UINT,ByVal Height As UINT,ByVal NumCoeffs As UINT,ByVal NumChannels As UINT,ByVal ppBuffer As LPD3DXPRTBUFFER PTR) As HRESULT
D3DXLoadPRTBufferFromFileA(ByVal pFilename As LPCSTR,ByVal ppBuffer As LPD3DXPRTBUFFER PTR) As HRESULT
D3DXLoadPRTBufferFromFileW(ByVal pFilename As LPCWSTR,ByVal ppBuffer As LPD3DXPRTBUFFER PTR) As HRESULT
D3DXSavePRTBufferToFileA(ByVal pFileName As LPCSTR,ByVal pBuffer As LPD3DXPRTBUFFER) As HRESULT
D3DXSavePRTBufferToFileW(ByVal pFileName As LPCWSTR,ByVal pBuffer As LPD3DXPRTBUFFER) As HRESULT
D3DXLoadPRTCompBufferFromFileA(ByVal pFilename As LPCSTR,ByVal ppBuffer As LPD3DXPRTCOMPBUFFER PTR) As HRESULT
D3DXLoadPRTCompBufferFromFileW(ByVal pFilename As LPCWSTR,ByVal ppBuffer As LPD3DXPRTCOMPBUFFER PTR) As HRESULT
D3DXSavePRTCompBufferToFileA(ByVal pFileName As LPCSTR,ByVal pBuffer As LPD3DXPRTCOMPBUFFER) As HRESULT
D3DXSavePRTCompBufferToFileW(ByVal pFileName As LPCWSTR,ByVal pBuffer As LPD3DXPRTCOMPBUFFER) As HRESULT
D3DXCreatePRTCompBuffer(ByVal Quality As D3DXSHCOMPRESSQUALITYTYPE,ByVal NumClusters As UINT,ByVal NumPCA As UINT,ByVal pBufferIn As LPD3DXPRTBUFFER,ByVal ppBufferOut As LPD3DXPRTCOMPBUFFER PTR) As HRESULT
D3DXCreateTextureGutterHelper(ByVal Width As UINT,ByVal Height As UINT,ByVal pMesh As LPD3DXMESH,ByVal GutterSize As FLOAT,ByVal ppBuffer As LPD3DXTEXTUREGUTTERHELPER PTR) As HRESULT
D3DXCreatePRTEngine(ByVal pMesh As LPD3DXMESH,ByVal ExtractUVs As BOOL,ByVal pBlockerMesh As LPD3DXMESH,ByVal ppEngine As LPD3DXPRTENGINE PTR) As HRESULT
D3DXConcatenateMeshes(ByVal ppMeshes As LPD3DXMESH PTR,ByVal NumMeshes As UINT,ByVal Options As DWORD,ByVal pGeomXForms As D3DXMATRIX PTR,ByVal pTextureXForms As D3DXMATRIX PTR,ByVal pDecl As D3DVERTEXELEMENT9 PTR,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal ppMeshOut As LPD3DXMESH PTR) As HRESULT
D3DXSHPRTCompSuperCluster(ByVal pClusterIDs As UINT PTR,ByVal pScene As LPD3DXMESH,ByVal MaxNumClusters As UINT,ByVal NumClusters As UINT,ByVal pSuperClusterIDs As UINT PTR,ByVal pNumSuperClusters As UINT PTR) As HRESULT
D3DXSHPRTCompSplitMeshSC(ByVal pClusterIDs As UINT PTR,ByVal NumVertices As UINT,ByVal NumClusters As UINT,ByVal pSuperClusterIDs As UINT PTR,ByVal NumSuperClusters As UINT,ByVal pInputIB As LPVOID,ByVal InputIBIs32Bit As BOOL,ByVal NumFaces As UINT,ByVal ppIBData As LPD3DXBUFFER PTR,ByVal pIBDataLength As UINT PTR,ByVal OutputIBIs32Bit As BOOL,ByVal ppFaceRemap As LPD3DXBUFFER PTR,ByVal ppVertData As LPD3DXBUFFER PTR,ByVal pVertDataLength As UINT PTR,ByVal pSCClusterList As UINT PTR,ByVal pSCData As D3DXSHPRTSPLITMESHCLUSTERDATA PTR) As HRESULT
D3DXAssembleShader(ByVal pSrcData As LPCSTR,ByVal SrcDataLen As UINT,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXCompileShader(ByVal pSrcData As LPCSTR,ByVal SrcDataLen As UINT,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal pFunctionName As LPCSTR,ByVal pProfile As LPCSTR,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR,ByVal ppConstantTable As LPD3DXCONSTANTTABLE PTR) As HRESULT
D3DXDisassembleShader(ByVal pShader As DWORD PTR,ByVal EnableColorCode As BOOL,ByVal pComments As LPCSTR,ByVal ppDisassembly As LPD3DXBUFFER PTR) As HRESULT
D3DXGetPixelShaderProfile(ByVal pDevice As LPDIRECT3DDEVICE9) As LPCSTR
D3DXGetVertexShaderProfile(ByVal pDevice As LPDIRECT3DDEVICE9) As LPCSTR
D3DXFindShaderComment(ByVal pFunction As DWORD PTR,ByVal FourCC As DWORD,ByVal ppData As LPCVOID PTR,ByVal pSizeInBytes As UINT PTR) As HRESULT
D3DXGetShaderSize(ByVal pFunction As DWORD PTR) As UINT
D3DXGetShaderVersion(ByVal pFunction As DWORD PTR) As DWORD
D3DXGetShaderInputSemantics(ByVal pFunction As DWORD PTR,ByVal pSemantics As D3DXSEMANTIC PTR,ByVal pCount As UINT PTR) As HRESULT
D3DXGetShaderOutputSemantics(ByVal pFunction As DWORD PTR,ByVal pSemantics As D3DXSEMANTIC PTR,ByVal pCount As UINT PTR) As HRESULT
D3DXGetShaderSamplers(ByVal pFunction As DWORD PTR,ByVal pSamplers As LPCSTR PTR,ByVal pCount As UINT PTR) As HRESULT
D3DXGetShaderConstantTable(ByVal pFunction As DWORD PTR,ByVal ppConstantTable As LPD3DXCONSTANTTABLE PTR) As HRESULT
D3DXCreateTextureShader(ByVal pFunction As DWORD PTR,ByVal ppTextureShader As LPD3DXTEXTURESHADER PTR) As HRESULT
D3DXGatherFragments(ByVal pSrcData As LPCSTR,ByVal SrcDataLen As UINT,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateFragmentLinker(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal ShaderCacheSize As UINT,ByVal ppFragmentLinker As LPD3DXFRAGMENTLINKER PTR) As HRESULT
D3DXAssembleShaderFromFile(ByVal pSrcFile As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXAssembleShaderFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXCompileShaderFromFile(ByVal pSrcFile As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal pFunctionName As LPCSTR,ByVal pProfile As LPCSTR,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR,ByVal ppConstantTable As LPD3DXCONSTANTTABLE PTR) As HRESULT
D3DXCompileShaderFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal pFunctionName As LPCSTR,ByVal pProfile As LPCSTR,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR,ByVal ppConstantTable As LPD3DXCONSTANTTABLE PTR) As HRESULT
D3DXGatherFragmentsFromFile(ByVal pSrcFile As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXGatherFragmentsFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXAssembleShaderFromFile(ByVal pSrcFile As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXAssembleShaderFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXCompileShaderFromFile(ByVal pSrcFile As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal pFunctionName As LPCSTR,ByVal pProfile As LPCSTR,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR,ByVal ppConstantTable As LPD3DXCONSTANTTABLE PTR) As HRESULT
D3DXCompileShaderFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal pFunctionName As LPCSTR,ByVal pProfile As LPCSTR,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR,ByVal ppConstantTable As LPD3DXCONSTANTTABLE PTR) As HRESULT
D3DXGatherFragmentsFromFile(ByVal pSrcFile As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXGatherFragmentsFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppShader As LPD3DXBUFFER PTR,ByVal ppErrorMsgs As LPD3DXBUFFER PTR) As HRESULT
D3DXCreatePolygon(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Length As FLOAT,ByVal Sides As UINT,ByVal ppMesh As LPD3DXMESH PTR,ByVal ppAdjacency As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateBox(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Width As FLOAT,ByVal Height As FLOAT,ByVal Depth As FLOAT,ByVal ppMesh As LPD3DXMESH PTR,ByVal ppAdjacency As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateCylinder(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Radius1 As FLOAT,ByVal Radius2 As FLOAT,ByVal Length As FLOAT,ByVal Slices As UINT,ByVal Stacks As UINT,ByVal ppMesh As LPD3DXMESH PTR,ByVal ppAdjacency As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateSphere(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Radius As FLOAT,ByVal Slices As UINT,ByVal Stacks As UINT,ByVal ppMesh As LPD3DXMESH PTR,ByVal ppAdjacency As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateTorus(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal InnerRadius As FLOAT,ByVal OuterRadius As FLOAT,ByVal Sides As UINT,ByVal Rings As UINT,ByVal ppMesh As LPD3DXMESH PTR,ByVal ppAdjacency As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateTeapot(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal ppMesh As LPD3DXMESH PTR,ByVal ppAdjacency As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateText(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hDC As HDC,ByVal pText As LPCWSTR,ByVal Deviation As FLOAT,ByVal Extrusion As FLOAT,ByVal ppMesh As LPD3DXMESH PTR,ByVal ppAdjacency As LPD3DXBUFFER PTR,ByVal pGlyphMetrics As LPGLYPHMETRICSFLOAT) As HRESULT
D3DXCreateText(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hDC As HDC,ByVal pText As LPCSTR,ByVal Deviation As FLOAT,ByVal Extrusion As FLOAT,ByVal ppMesh As LPD3DXMESH PTR,ByVal ppAdjacency As LPD3DXBUFFER PTR,ByVal pGlyphMetrics As LPGLYPHMETRICSFLOAT) As HRESULT
D3DXGetImageInfoFromFileInMemory(ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadSurfaceFromFileInMemory(ByVal pDestSurface As LPDIRECT3DSURFACE9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestRect As RECT PTR,ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal pSrcRect As RECT PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadSurfaceFromSurface(ByVal pDestSurface As LPDIRECT3DSURFACE9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestRect As RECT PTR,ByVal pSrcSurface As LPDIRECT3DSURFACE9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcRect As RECT PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR) As HRESULT
D3DXLoadSurfaceFromMemory(ByVal pDestSurface As LPDIRECT3DSURFACE9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestRect As RECT PTR,ByVal pSrcMemory As LPCVOID,ByVal SrcFormat As D3DFORMAT,ByVal SrcPitch As UINT,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcRect As RECT PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR) As HRESULT
D3DXSaveSurfaceToFileInMemory(ByVal ppDestBuf As LPD3DXBUFFER PTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcSurface As LPDIRECT3DSURFACE9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcRect As RECT PTR) As HRESULT
D3DXLoadVolumeFromFileInMemory(ByVal pDestVolume As LPDIRECT3DVOLUME9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestBox As D3DBOX PTR,ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal pSrcBox As D3DBOX PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadVolumeFromVolume(ByVal pDestVolume As LPDIRECT3DVOLUME9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestBox As D3DBOX PTR,ByVal pSrcVolume As LPDIRECT3DVOLUME9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcBox As D3DBOX PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR) As HRESULT
D3DXLoadVolumeFromMemory(ByVal pDestVolume As LPDIRECT3DVOLUME9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestBox As D3DBOX PTR,ByVal pSrcMemory As LPCVOID,ByVal SrcFormat As D3DFORMAT,ByVal SrcRowPitch As UINT,ByVal SrcSlicePitch As UINT,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcBox As D3DBOX PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR) As HRESULT
D3DXSaveVolumeToFileInMemory(ByVal ppDestBuf As LPD3DXBUFFER PTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcVolume As LPDIRECT3DVOLUME9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcBox As D3DBOX PTR) As HRESULT
D3DXCheckTextureRequirements(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pWidth As UINT PTR,ByVal pHeight As UINT PTR,ByVal pNumMipLevels As UINT PTR,ByVal Usage As DWORD,ByVal pFormat As D3DFORMAT PTR,ByVal Pool As D3DPOOL) As HRESULT
D3DXCheckCubeTextureRequirements(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSize As UINT PTR,ByVal pNumMipLevels As UINT PTR,ByVal Usage As DWORD,ByVal pFormat As D3DFORMAT PTR,ByVal Pool As D3DPOOL) As HRESULT
D3DXCheckVolumeTextureRequirements(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pWidth As UINT PTR,ByVal pHeight As UINT PTR,ByVal pDepth As UINT PTR,ByVal pNumMipLevels As UINT PTR,ByVal Usage As DWORD,ByVal pFormat As D3DFORMAT PTR,ByVal Pool As D3DPOOL) As HRESULT
D3DXCreateTexture(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Width As UINT,ByVal Height As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXVec3BaryCentric(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal pV3 As D3DXVECTOR3 PTR,ByVal f As FLOAT,ByVal g As FLOAT) As D3DXVECTOR3 PTR
D3DXCreateVolumeTexture(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Width As UINT,ByVal Height As UINT,ByVal Depth As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXCreateTextureFromFileInMemory(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromFileInMemory(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromFileInMemory(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXCreateTextureFromFileInMemoryEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal Width As UINT,ByVal Height As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromFileInMemoryEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal Size As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromFileInMemoryEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcData As LPCVOID,ByVal SrcDataSize As UINT,ByVal Width As UINT,ByVal Height As UINT,ByVal Depth As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXSaveTextureToFileInMemory(ByVal ppDestBuf As LPD3DXBUFFER PTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcTexture As LPDIRECT3DBASETEXTURE9,ByVal pSrcPalette As PALETTEENTRY PTR) As HRESULT
D3DXFilterTexture(ByVal pBaseTexture As LPDIRECT3DBASETEXTURE9,ByVal pPalette As PALETTEENTRY PTR,ByVal SrcLevel As UINT,ByVal Filter As DWORD) As HRESULT
D3DXFillTexture(ByVal pTexture As LPDIRECT3DTEXTURE9,ByVal pFunction As LPD3DXFILL2D,ByVal pData As LPVOID) As HRESULT
D3DXFillCubeTexture(ByVal pCubeTexture As LPDIRECT3DCUBETEXTURE9,ByVal pFunction As LPD3DXFILL3D,ByVal pData As LPVOID) As HRESULT
D3DXFillVolumeTexture(ByVal pVolumeTexture As LPDIRECT3DVOLUMETEXTURE9,ByVal pFunction As LPD3DXFILL3D,ByVal pData As LPVOID) As HRESULT
D3DXFillTextureTX(ByVal pTexture As LPDIRECT3DTEXTURE9,ByVal pTextureShader As LPD3DXTEXTURESHADER) As HRESULT
D3DXFillCubeTextureTX(ByVal pCubeTexture As LPDIRECT3DCUBETEXTURE9,ByVal pTextureShader As LPD3DXTEXTURESHADER) As HRESULT
D3DXFillVolumeTextureTX(ByVal pVolumeTexture As LPDIRECT3DVOLUMETEXTURE9,ByVal pTextureShader As LPD3DXTEXTURESHADER) As HRESULT
D3DXComputeNormalMap(ByVal pTexture As LPDIRECT3DTEXTURE9,ByVal pSrcTexture As LPDIRECT3DTEXTURE9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal Flags As DWORD,ByVal Channel As DWORD,ByVal Amplitude As FLOAT) As HRESULT
D3DXGetImageInfoFromFile(ByVal pSrcFile As LPCWSTR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXGetImageInfoFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadSurfaceFromFile(ByVal pDestSurface As LPDIRECT3DSURFACE9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestRect As RECT PTR,ByVal pSrcFile As LPCWSTR,ByVal pSrcRect As RECT PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadSurfaceFromResource(ByVal pDestSurface As LPDIRECT3DSURFACE9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestRect As RECT PTR,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal pSrcRect As RECT PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXSaveSurfaceToFile(ByVal pDestFile As LPCWSTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcSurface As LPDIRECT3DSURFACE9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcRect As RECT PTR) As HRESULT
D3DXLoadVolumeFromFile(ByVal pDestVolume As LPDIRECT3DVOLUME9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestBox As D3DBOX PTR,ByVal pSrcFile As LPCWSTR,ByVal pSrcBox As D3DBOX PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadVolumeFromResource(ByVal pDestVolume As LPDIRECT3DVOLUME9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestBox As D3DBOX PTR,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal pSrcBox As D3DBOX PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXSaveVolumeToFile(ByVal pDestFile As LPCWSTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcVolume As LPDIRECT3DVOLUME9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcBox As D3DBOX PTR) As HRESULT
D3DXCreateTextureFromFile(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCWSTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromFile(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCWSTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromFile(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCWSTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXCreateTextureFromResource(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromResource(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromResource(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXCreateTextureFromFileEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCWSTR,ByVal Width As UINT,ByVal Height As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromFileEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCWSTR,ByVal Size As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromFileEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCWSTR,ByVal Width As UINT,ByVal Height As UINT,ByVal Depth As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXCreateTextureFromResourceEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal Width As UINT,ByVal Height As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromResourceEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal Size As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromResourceEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal Width As UINT,ByVal Height As UINT,ByVal Depth As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXSaveTextureToFile(ByVal pDestFile As LPCWSTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcTexture As LPDIRECT3DBASETEXTURE9,ByVal pSrcPalette As PALETTEENTRY PTR) As HRESULT
D3DXGetImageInfoFromFile(ByVal pSrcFile As LPCSTR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXGetImageInfoFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadSurfaceFromFile(ByVal pDestSurface As LPDIRECT3DSURFACE9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestRect As RECT PTR,ByVal pSrcFile As LPCSTR,ByVal pSrcRect As RECT PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadSurfaceFromResource(ByVal pDestSurface As LPDIRECT3DSURFACE9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestRect As RECT PTR,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal pSrcRect As RECT PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXSaveSurfaceToFile(ByVal pDestFile As LPCSTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcSurface As LPDIRECT3DSURFACE9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcRect As RECT PTR) As HRESULT
D3DXLoadVolumeFromFile(ByVal pDestVolume As LPDIRECT3DVOLUME9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestBox As D3DBOX PTR,ByVal pSrcFile As LPCSTR,ByVal pSrcBox As D3DBOX PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXLoadVolumeFromResource(ByVal pDestVolume As LPDIRECT3DVOLUME9,ByVal pDestPalette As PALETTEENTRY PTR,ByVal pDestBox As D3DBOX PTR,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal pSrcBox As D3DBOX PTR,ByVal Filter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR) As HRESULT
D3DXSaveVolumeToFile(ByVal pDestFile As LPCSTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcVolume As LPDIRECT3DVOLUME9,ByVal pSrcPalette As PALETTEENTRY PTR,ByVal pSrcBox As D3DBOX PTR) As HRESULT
D3DXCreateTextureFromFile(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCSTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromFile(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCSTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromFile(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCSTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXCreateTextureFromResource(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromResource(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromResource(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXCreateTextureFromFileEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCSTR,ByVal Width As UINT,ByVal Height As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromFileEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCSTR,ByVal Size As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromFileEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCSTR,ByVal Width As UINT,ByVal Height As UINT,ByVal Depth As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXCreateTextureFromResourceEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal Width As UINT,ByVal Height As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppTexture As LPDIRECT3DTEXTURE9 PTR) As HRESULT
D3DXCreateCubeTextureFromResourceEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal Size As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppCubeTexture As LPDIRECT3DCUBETEXTURE9 PTR) As HRESULT
D3DXCreateVolumeTextureFromResourceEx(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal Width As UINT,ByVal Height As UINT,ByVal Depth As UINT,ByVal MipLevels As UINT,ByVal Usage As DWORD,ByVal Format As D3DFORMAT,ByVal Pool As D3DPOOL,ByVal Filter As DWORD,ByVal MipFilter As DWORD,ByVal ColorKey As D3DCOLOR,ByVal pSrcInfo As D3DXIMAGE_INFO PTR,ByVal pPalette As PALETTEENTRY PTR,ByVal ppVolumeTexture As LPDIRECT3DVOLUMETEXTURE9 PTR) As HRESULT
D3DXSaveTextureToFile(ByVal pDestFile As LPCSTR,ByVal DestFormat As D3DXIMAGE_FILEFORMAT,ByVal pSrcTexture As LPDIRECT3DBASETEXTURE9,ByVal pSrcPalette As PALETTEENTRY PTR) As HRESULT
D3DXFileCreate(ByVal lplpDirectXFile As ID3DXFile PTR PTR) As HRESULT
D3DXInitialize() As HRESULT
D3DXUninitialize() As HRESULT
D3DXGetDeviceCount() As DWORD
D3DXGetDeviceDescription(ByVal deviceIndex As DWORD,ByVal pd3dxDeviceDesc As D3DX_DEVICEDESC PTR) As HRESULT
D3DXGetMaxNumVideoModes(ByVal deviceIndex As DWORD,ByVal flags As DWORD) As DWORD
D3DXGetVideoMode(ByVal deviceIndex As DWORD,ByVal flags As DWORD,ByVal modeIndex As DWORD,ByVal pModeDesc As D3DX_VIDMODEDESC PTR) As HRESULT
D3DXGetMaxSurfaceFormats(ByVal deviceIndex As DWORD,ByVal pDesc As D3DX_VIDMODEDESC PTR,ByVal surfClassFlags As DWORD) As DWORD
D3DXGetSurfaceFormat(ByVal deviceIndex As DWORD,ByVal pDesc As D3DX_VIDMODEDESC PTR,ByVal surfClassFlags As DWORD,ByVal surfaceIndex As DWORD,ByVal pFormat As D3DX_SURFACEFORMAT PTR) As HRESULT
D3DXGetCurrentVideoMode(ByVal deviceIndex As DWORD,ByVal pVidMode As D3DX_VIDMODEDESC PTR) As HRESULT
D3DXGetDeviceCaps(ByVal deviceIndex As DWORD,ByVal pVidMode As D3DX_VIDMODEDESC PTR,ByVal pD3DCaps As D3DDEVICEDESC7 PTR,ByVal pDDHALCaps As DDCAPS PTR,ByVal pDDHELCaps As DDCAPS PTR) As HRESULT
D3DXCreateContext(ByVal deviceIndex As DWORD,ByVal flags As DWORD,ByVal hwnd As HWND,ByVal width As DWORD,ByVal height As DWORD,ByVal ppCtx As LPD3DXCONTEXT PTR) As HRESULT
D3DXCreateContextEx(ByVal deviceIndex As DWORD,ByVal flags As DWORD,ByVal hwnd As HWND,ByVal hwndFocus As HWND,ByVal numColorBits As DWORD,ByVal numAlphaBits As DWORD,ByVal numDepthbits As DWORD,ByVal numStencilBits As DWORD,ByVal numBackBuffers As DWORD,ByVal width As DWORD,ByVal height As DWORD,ByVal refreshRate As DWORD,ByVal ppCtx As LPD3DXCONTEXT PTR) As HRESULT
D3DXMakeDDPixelFormat(ByVal d3dxFormat As D3DX_SURFACEFORMAT,ByVal pddpf As DDPIXELFORMAT PTR) As HRESULT
D3DXMakeSurfaceFormat(ByVal pddpf As DDPIXELFORMAT PTR) As D3DX_SURFACEFORMAT
D3DXCheckTextureRequirements(ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal pFlags As LPDWORD,ByVal pWidth As LPDWORD,ByVal pHeight As LPDWORD,ByVal pPixelFormat As D3DX_SURFACEFORMAT PTR) As HRESULT
D3DXCreateTexture(ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal pFlags As LPDWORD,ByVal pWidth As LPDWORD,ByVal pHeight As LPDWORD,ByVal pPixelFormat As D3DX_SURFACEFORMAT PTR,ByVal pDDPal As LPDIRECTDRAWPALETTE,ByVal ppDDSurf As LPDIRECTDRAWSURFACE7 PTR,ByVal pNumMipMaps As LPDWORD) As HRESULT
D3DXCreateCubeMapTexture(ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal pFlags As LPDWORD,ByVal cubefaces As DWORD,ByVal colorEmptyFaces As D3DCOLOR,ByVal pWidth As LPDWORD,ByVal pHeight As LPDWORD,ByVal pPixelFormat As D3DX_SURFACEFORMAT PTR,ByVal pDDPal As LPDIRECTDRAWPALETTE,ByVal ppDDSurf As LPDIRECTDRAWSURFACE7 PTR,ByVal pNumMipMaps As LPDWORD) As HRESULT
D3DXCreateTextureFromFile(ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal pFlags As LPDWORD,ByVal pWidth As LPDWORD,ByVal pHeight As LPDWORD,ByVal pPixelFormat As D3DX_SURFACEFORMAT PTR,ByVal pDDPal As LPDIRECTDRAWPALETTE,ByVal ppDDSurf As LPDIRECTDRAWSURFACE7 PTR,ByVal pNumMipMaps As LPDWORD,ByVal pSrcName As LPSTR,ByVal filterType As D3DX_FILTERTYPE) As HRESULT
D3DXLoadTextureFromFile(ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal pTexture As LPDIRECTDRAWSURFACE7,ByVal mipMapLevel As DWORD,ByVal pSrcName As LPSTR,ByVal pSrcRect As RECT PTR,ByVal pDestRect As RECT PTR,ByVal filterType As D3DX_FILTERTYPE) As HRESULT
D3DXLoadTextureFromSurface(ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal pTexture As LPDIRECTDRAWSURFACE7,ByVal mipMapLevel As DWORD,ByVal pSurfaceSrc As LPDIRECTDRAWSURFACE7,ByVal pSrcRect As RECT PTR,ByVal pDestRect As RECT PTR,ByVal filterType As D3DX_FILTERTYPE) As HRESULT
D3DXLoadTextureFromMemory(ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal pTexture As LPDIRECTDRAWSURFACE7,ByVal mipMapLevel As DWORD,ByVal pMemory As LPVOID,ByVal pDDPal As LPDIRECTDRAWPALETTE,ByVal srcPixelFormat As D3DX_SURFACEFORMAT,ByVal srcPitch As DWORD,ByVal pDestRect As RECT PTR,ByVal filterType As D3DX_FILTERTYPE) As HRESULT
D3DXVec2Length(ByVal pV As D3DXVECTOR2 PTR) As Single
D3DXVec2LengthSq(ByVal pV As D3DXVECTOR2 PTR) As Single
D3DXVec2Dot(ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As Single
D3DXVec2CCW(ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As Single
D3DXVec2Add(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Subtract(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Minimize(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Maximize(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Scale(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV As D3DXVECTOR2 PTR,ByVal s As Single) As D3DXVECTOR2 PTR
D3DXVec2Lerp(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR,ByVal s As Single) As D3DXVECTOR2 PTR
D3DXVec2Normalize(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Hermite(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pT1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR,ByVal pT2 As D3DXVECTOR2 PTR,ByVal s As Single) As D3DXVECTOR2 PTR
D3DXVec2BaryCentric(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR,ByVal pV3 As D3DXVECTOR2 PTR,ByVal f As Single,ByVal g As Single) As D3DXVECTOR2 PTR
D3DXVec2Transform(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR2 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR4 PTR
D3DXVec2TransformCoord(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV As D3DXVECTOR2 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR2 PTR
D3DXVec2TransformNormal(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV As D3DXVECTOR2 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR2 PTR
D3DXVec3Length(ByVal pV As D3DXVECTOR3 PTR) As Single
D3DXVec3LengthSq(ByVal pV As D3DXVECTOR3 PTR) As Single
D3DXVec3Dot(ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As Single
D3DXVec3Cross(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Add(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Subtract(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Minimize(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Maximize(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Scale(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal s As Single) As D3DXVECTOR3 PTR
D3DXVec3Lerp(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal s As Single) As D3DXVECTOR3 PTR
D3DXVec3Normalize(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Hermite(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pT1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal pT2 As D3DXVECTOR3 PTR,ByVal s As Single) As D3DXVECTOR3 PTR
D3DXVec3BaryCentric(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal pV3 As D3DXVECTOR3 PTR,ByVal f As Single,ByVal g As Single) As D3DXVECTOR3 PTR
D3DXVec3Transform(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR4 PTR
D3DXVec3TransformCoord(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR3 PTR
D3DXVec3TransformNormal(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR3 PTR
D3DXVec4Length(ByVal pV As D3DXVECTOR4 PTR) As Single
D3DXVec4LengthSq(ByVal pV As D3DXVECTOR4 PTR) As Single
D3DXVec4Dot(ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As Single
D3DXVec4Add(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Subtract(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Minimize(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Maximize(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Scale(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR4 PTR,ByVal s As Single) As D3DXVECTOR4 PTR
D3DXVec4Lerp(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal s As Single) As D3DXVECTOR4 PTR
D3DXVec4Cross(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal pV3 As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Normalize(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR4 PTR) As D3DXVECTOR4 PTR
D3DXVec4Hermite(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pT1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal pT2 As D3DXVECTOR4 PTR,ByVal s As Single) As D3DXVECTOR4 PTR
D3DXVec4BaryCentric(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV1 As D3DXVECTOR4 PTR,ByVal pV2 As D3DXVECTOR4 PTR,ByVal pV3 As D3DXVECTOR4 PTR,ByVal f As Single,ByVal g As Single) As D3DXVECTOR4 PTR
D3DXVec4Transform(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR4 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR4 PTR
D3DXMatrixIdentity(ByVal pOut As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixIsIdentity(ByVal pM As D3DXMATRIX PTR) As BOOL
D3DXMatrixfDeterminant(ByVal pM As D3DXMATRIX PTR) As Single
D3DXMatrixMultiply(ByVal pOut As D3DXMATRIX PTR,ByVal pM1 As D3DXMATRIX PTR,ByVal pM2 As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixTranspose(ByVal pOut As D3DXMATRIX PTR,ByVal pM As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixInverse(ByVal pOut As D3DXMATRIX PTR,ByVal pfDeterminant As Single PTR,ByVal pM As D3DXMATRIX PTR) As D3DXMATRIX PTR
D3DXMatrixScaling(ByVal pOut As D3DXMATRIX PTR,ByVal sx As Single,ByVal sy As Single,ByVal sz As Single) As D3DXMATRIX PTR
D3DXMatrixTranslation(ByVal pOut As D3DXMATRIX PTR,ByVal x As Single,ByVal y As Single,ByVal z As Single) As D3DXMATRIX PTR
D3DXMatrixRotationX(ByVal pOut As D3DXMATRIX PTR,ByVal angle As Single) As D3DXMATRIX PTR
D3DXMatrixRotationY(ByVal pOut As D3DXMATRIX PTR,ByVal angle As Single) As D3DXMATRIX PTR
D3DXMatrixRotationZ(ByVal pOut As D3DXMATRIX PTR,ByVal angle As Single) As D3DXMATRIX PTR
D3DXMatrixRotationAxis(ByVal pOut As D3DXMATRIX PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal angle As Single) As D3DXMATRIX PTR
D3DXMatrixRotationQuaternion(ByVal pOut As D3DXMATRIX PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXMATRIX PTR
D3DXMatrixRotationYawPitchRoll(ByVal pOut As D3DXMATRIX PTR,ByVal yaw As Single,ByVal pitch As Single,ByVal roll As Single) As D3DXMATRIX PTR
D3DXMatrixTransformation(ByVal pOut As D3DXMATRIX PTR,ByVal pScalingCenter As D3DXVECTOR3 PTR,ByVal pScalingRotation As D3DXQUATERNION PTR,ByVal pScaling As D3DXVECTOR3 PTR,ByVal pRotationCenter As D3DXVECTOR3 PTR,ByVal pRotation As D3DXQUATERNION PTR,ByVal pTranslation As D3DXVECTOR3 PTR) As D3DXMATRIX PTR
D3DXMatrixAffineTransformation(ByVal pOut As D3DXMATRIX PTR,ByVal Scaling As Single,ByVal pRotationCenter As D3DXVECTOR3 PTR,ByVal pRotation As D3DXQUATERNION PTR,ByVal pTranslation As D3DXVECTOR3 PTR) As D3DXMATRIX PTR
D3DXMatrixLookAt(ByVal pOut As D3DXMATRIX PTR,ByVal pEye As D3DXVECTOR3 PTR,ByVal pAt As D3DXVECTOR3 PTR,ByVal pUp As D3DXVECTOR3 PTR) As D3DXMATRIX PTR
D3DXMatrixLookAtLH(ByVal pOut As D3DXMATRIX PTR,ByVal pEye As D3DXVECTOR3 PTR,ByVal pAt As D3DXVECTOR3 PTR,ByVal pUp As D3DXVECTOR3 PTR) As D3DXMATRIX PTR
D3DXMatrixPerspective(ByVal pOut As D3DXMATRIX PTR,ByVal w As Single,ByVal h As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixPerspectiveLH(ByVal pOut As D3DXMATRIX PTR,ByVal w As Single,ByVal h As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixPerspectiveFov(ByVal pOut As D3DXMATRIX PTR,ByVal fovy As Single,ByVal aspect As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixPerspectiveFovLH(ByVal pOut As D3DXMATRIX PTR,ByVal fovy As Single,ByVal aspect As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixPerspectiveOffCenter(ByVal pOut As D3DXMATRIX PTR,ByVal l As Single,ByVal r As Single,ByVal b As Single,ByVal t As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixPerspectiveOffCenterLH(ByVal pOut As D3DXMATRIX PTR,ByVal l As Single,ByVal r As Single,ByVal b As Single,ByVal t As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixOrtho(ByVal pOut As D3DXMATRIX PTR,ByVal w As Single,ByVal h As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixOrthoLH(ByVal pOut As D3DXMATRIX PTR,ByVal w As Single,ByVal h As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixOrthoOffCenter(ByVal pOut As D3DXMATRIX PTR,ByVal l As Single,ByVal r As Single,ByVal b As Single,ByVal t As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixOrthoOffCenterLH(ByVal pOut As D3DXMATRIX PTR,ByVal l As Single,ByVal r As Single,ByVal b As Single,ByVal t As Single,ByVal zn As Single,ByVal zf As Single) As D3DXMATRIX PTR
D3DXMatrixShadow(ByVal pOut As D3DXMATRIX PTR,ByVal pLight As D3DXVECTOR4 PTR,ByVal pPlane As D3DXPLANE PTR) As D3DXMATRIX PTR
D3DXMatrixReflect(ByVal pOut As D3DXMATRIX PTR,ByVal pPlane As D3DXPLANE PTR) As D3DXMATRIX PTR
D3DXQuaternionLength(ByVal pQ As D3DXQUATERNION PTR) As Single
D3DXQuaternionLengthSq(ByVal pQ As D3DXQUATERNION PTR) As Single
D3DXQuaternionDot(ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR) As Single
D3DXQuaternionIdentity(ByVal pOut As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionIsIdentity(ByVal pQ As D3DXQUATERNION PTR) As BOOL
D3DXQuaternionConjugate(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionRotationMatrix(ByVal pOut As D3DXQUATERNION PTR,ByVal pM As D3DXMATRIX PTR) As D3DXQUATERNION PTR
D3DXQuaternionRotationAxis(ByVal pOut As D3DXQUATERNION PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal angle As Single) As D3DXQUATERNION PTR
D3DXQuaternionRotationYawPitchRoll(ByVal pOut As D3DXQUATERNION PTR,ByVal yaw As Single,ByVal pitch As Single,ByVal roll As Single) As D3DXQUATERNION PTR
D3DXQuaternionMultiply(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionNormalize(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionInverse(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionLn(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionExp(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ As D3DXQUATERNION PTR) As D3DXQUATERNION PTR
D3DXQuaternionSlerp(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR,ByVal t As Single) As D3DXQUATERNION PTR
D3DXQuaternionSquad(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR,ByVal pQ3 As D3DXQUATERNION PTR,ByVal pQ4 As D3DXQUATERNION PTR,ByVal t As Single) As D3DXQUATERNION PTR
D3DXQuaternionBaryCentric(ByVal pOut As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR,ByVal pQ3 As D3DXQUATERNION PTR,ByVal f As Single,ByVal g As Single) As D3DXQUATERNION PTR
D3DXPlaneDot(ByVal pP As D3DXPLANE PTR,ByVal pV As D3DXVECTOR4 PTR) As Single
D3DXPlaneDotCoord(ByVal pP As D3DXPLANE PTR,ByVal pV As D3DXVECTOR3 PTR) As Single
D3DXPlaneDotNormal(ByVal pP As D3DXPLANE PTR,ByVal pV As D3DXVECTOR3 PTR) As Single
D3DXPlaneNormalize(ByVal pOut As D3DXPLANE PTR,ByVal pP As D3DXPLANE PTR) As D3DXPLANE PTR
D3DXPlaneIntersectLine(ByVal pOut As D3DXVECTOR3 PTR,ByVal pP As D3DXPLANE PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXPlaneFromPointNormal(ByVal pOut As D3DXPLANE PTR,ByVal pPoint As D3DXVECTOR3 PTR,ByVal pNormal As D3DXVECTOR3 PTR) As D3DXPLANE PTR
D3DXPlaneFromPoints(ByVal pOut As D3DXPLANE PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal pV3 As D3DXVECTOR3 PTR) As D3DXPLANE PTR
D3DXPlaneTransform(ByVal pOut As D3DXPLANE PTR,ByVal pP As D3DXPLANE PTR,ByVal pM As D3DXMATRIX PTR) As D3DXPLANE PTR
D3DXColorNegative(ByVal pOut As D3DXCOLOR PTR,ByVal pC As D3DXCOLOR PTR) As D3DXCOLOR PTR
D3DXColorAdd(ByVal pOut As D3DXCOLOR PTR,ByVal pC1 As D3DXCOLOR PTR,ByVal pC2 As D3DXCOLOR PTR) As D3DXCOLOR PTR
D3DXColorSubtract(ByVal pOut As D3DXCOLOR PTR,ByVal pC1 As D3DXCOLOR PTR,ByVal pC2 As D3DXCOLOR PTR) As D3DXCOLOR PTR
D3DXColorScale(ByVal pOut As D3DXCOLOR PTR,ByVal pC As D3DXCOLOR PTR,ByVal s As Single) As D3DXCOLOR PTR
D3DXColorModulate(ByVal pOut As D3DXCOLOR PTR,ByVal pC1 As D3DXCOLOR PTR,ByVal pC2 As D3DXCOLOR PTR) As D3DXCOLOR PTR
D3DXColorLerp(ByVal pOut As D3DXCOLOR PTR,ByVal pC1 As D3DXCOLOR PTR,ByVal pC2 As D3DXCOLOR PTR,ByVal s As Single) As D3DXCOLOR PTR
D3DXColorAdjustSaturation(ByVal pOut As D3DXCOLOR PTR,ByVal pC As D3DXCOLOR PTR,ByVal s As Single) As D3DXCOLOR PTR
D3DXColorAdjustContrast(ByVal pOut As D3DXCOLOR PTR,ByVal pC As D3DXCOLOR PTR,ByVal c As Single) As D3DXCOLOR PTR
D3DXCreateMatrixStack(ByVal flags As DWORD,ByVal ppStack As LPD3DXMATRIXSTACK PTR) As HRESULT
D3DXCreatePolygon(ByVal pDevice As LPDIRECT3DDEVICE7,ByVal sideSize As Single,ByVal numSides As DWORD,ByVal numTexCoords As DWORD,ByVal ppShape As LPD3DXSIMPLESHAPE PTR) As HRESULT
D3DXCreateBox(ByVal pDevice As LPDIRECT3DDEVICE7,ByVal width As Single,ByVal height As Single,ByVal depth As Single,ByVal numTexCoords As DWORD,ByVal ppShape As LPD3DXSIMPLESHAPE PTR) As HRESULT
D3DXCreateCylinder(ByVal pDevice As LPDIRECT3DDEVICE7,ByVal baseRadius As Single,ByVal topRadius As Single,ByVal height As Single,ByVal numSlices As DWORD,ByVal numStacks As DWORD,ByVal numTexCoords As DWORD,ByVal ppShape As LPD3DXSIMPLESHAPE PTR) As HRESULT
D3DXCreateTorus(ByVal pDevice As LPDIRECT3DDEVICE7,ByVal innerRadius As Single,ByVal outerRadius As Single,ByVal numSides As DWORD,ByVal numRings As DWORD,ByVal numTexCoords As DWORD,ByVal ppShape As LPD3DXSIMPLESHAPE PTR) As HRESULT
D3DXCreateTeapot(ByVal pDevice As LPDIRECT3DDEVICE7,ByVal numTexCoords As DWORD,ByVal ppShape As LPD3DXSIMPLESHAPE PTR) As HRESULT
D3DXCreateSphere(ByVal pDevice As LPDIRECT3DDEVICE7,ByVal radius As Single,ByVal numSlices As DWORD,ByVal numStacks As DWORD,ByVal numTexCoords As DWORD,ByVal ppShape As LPD3DXSIMPLESHAPE PTR) As HRESULT
D3DXPrepareDeviceForSprite(ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal ZEnable As BOOL) As HRESULT
D3DXDrawSpriteSimple(ByVal pd3dTexture As LPDIRECTDRAWSURFACE7,ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal ppointDest As D3DXVECTOR3 PTR,ByVal alpha As Single,ByVal scale As Single,ByVal angleRad As Single,ByVal pOffset As D3DXVECTOR2 PTR,ByVal pSourceRect As RECT PTR) As HRESULT
D3DXDrawSpriteTransform(ByVal pd3dTexture As LPDIRECTDRAWSURFACE7,ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal pMatrixTransform As D3DXMATRIX PTR,ByVal alpha As Single,ByVal pSourceRect As RECT PTR) As HRESULT
D3DXDrawSprite3D(ByVal pd3dTexture As LPDIRECTDRAWSURFACE7,ByVal pd3dDevice As LPDIRECT3DDEVICE7,ByVal quad As D3DXVECTOR4 PTR,ByVal alpha As Single,ByVal pSourceRect As RECT PTR) As HRESULT
D3DXCreateFontW(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal Height As INT_,ByVal Width As UINT,ByVal Weight As UINT,ByVal MipLevels As UINT,ByVal Italic As BOOL,ByVal CharSet As DWORD,ByVal OutputPrecision As DWORD,ByVal Quality As DWORD,ByVal PitchAndFamily As DWORD,ByVal pFaceName As LPCWSTR,ByVal ppFont As LPD3DXFONT PTR) As HRESULT
D3DXCreateSprite(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal ppSprite As LPD3DXSPRITE PTR) As HRESULT
D3DXGetDriverLevel(ByVal pDevice As LPDIRECT3DDEVICE9) As UINT
D3DXVec3CatmullRom(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV0 As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal pV3 As D3DXVECTOR3 PTR,ByVal s As FLOAT) As D3DXVECTOR3 PTR
D3DXVec3Hermite(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pT1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal pT2 As D3DXVECTOR3 PTR,ByVal s As FLOAT) As D3DXVECTOR3 PTR
D3DXVec3Normalize(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXCheckVersion(ByVal D3DSdkVersion As UINT,ByVal D3DXSdkVersion As UINT) As BOOL
D3DXSaveMeshHierarchyToFile(ByVal Filename As LPCSTR,ByVal XFormat As DWORD,ByVal pFrameRoot As D3DXFRAME PTR,ByVal pAnimcontroller As LPD3DXANIMATIONCONTROLLER,ByVal pUserDataSaver As LPD3DXSAVEUSERDATA) As HRESULT
D3DXLoadMeshHierarchyFromX(ByVal Filename As LPCSTR,ByVal MeshOptions As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal pAlloc As LPD3DXALLOCATEHIERARCHY,ByVal pUserDataLoader As LPD3DXLOADUSERDATA,ByVal ppFrameHierarchy As LPD3DXFRAME PTR,ByVal ppAnimController As LPD3DXANIMATIONCONTROLLER PTR) As HRESULT
D3DXSaveMeshHierarchyToFile(ByVal Filename As LPCWSTR,ByVal XFormat As DWORD,ByVal pFrameRoot As D3DXFRAME PTR,ByVal pAnimController As LPD3DXANIMATIONCONTROLLER,ByVal pUserDataSaver As LPD3DXSAVEUSERDATA) As HRESULT
D3DXLoadMeshHierarchyFromX(ByVal Filename As LPCWSTR,ByVal MeshOptions As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal pAlloc As LPD3DXALLOCATEHIERARCHY,ByVal pUserDataLoader As LPD3DXLOADUSERDATA,ByVal ppFrameHierarchy As LPD3DXFRAME PTR,ByVal ppAnimController As LPD3DXANIMATIONCONTROLLER PTR) As HRESULT
D3DXCreateAnimationController(ByVal MaxNumMatrices As UINT,ByVal MaxNumAnimationSets As UINT,ByVal MaxNumTracks As UINT,ByVal MaxNumEvents As UINT,ByVal ppAnimController As LPD3DXANIMATIONCONTROLLER PTR) As HRESULT
D3DXCreateCompressedAnimationSet(ByVal pName As LPCSTR,ByVal TicksPerSecond As Double,ByVal Playback As D3DXPLAYBACK_TYPE,ByVal pCompressedData As LPD3DXBUFFER,ByVal NumCallbackKeys As UINT,ByVal pCallbackKeys As D3DXKEY_CALLBACK PTR,ByVal ppAnimationSet As LPD3DXCOMPRESSEDANIMATIONSET PTR) As HRESULT
D3DXCreateKeyframedAnimationSet(ByVal pName As LPCSTR,ByVal TicksPerSecond As Double,ByVal Playback As D3DXPLAYBACK_TYPE,ByVal NumAnimations As UINT,ByVal NumCallbackKeys As UINT,ByVal pCallbackKeys As D3DXKEY_CALLBACK PTR,ByVal ppAnimationSet As LPD3DXKEYFRAMEDANIMATIONSET PTR) As HRESULT
D3DXFrameCalculateBoundingSphere(ByVal pFrameRoot As D3DXFRAME PTR,ByVal pObjectCenter As LPD3DXVECTOR3,ByVal pObjectRadius As FLOAT PTR) As HRESULT
D3DXFrameNumNamedMatrices(ByVal pFrameRoot As D3DXFRAME PTR) As UINT
D3DXFrameRegisterNamedMatrices(ByVal pFrameRoot As LPD3DXFRAME,ByVal pAnimController As LPD3DXANIMATIONCONTROLLER) As HRESULT
D3DXFrameAppendChild(ByVal pFrameParent As LPD3DXFRAME,ByVal pFrameChild As D3DXFRAME PTR) As HRESULT
D3DXFrameDestroy(ByVal pFrameRoot As LPD3DXFRAME,ByVal pAlloc As LPD3DXALLOCATEHIERARCHY) As HRESULT
D3DXLoadMeshHierarchyFromXInMemory(ByVal Memory As LPCVOID,ByVal SizeOfMemory As DWORD,ByVal MeshOptions As DWORD,ByVal pD3DDevice As LPDIRECT3DDEVICE9,ByVal pAlloc As LPD3DXALLOCATEHIERARCHY,ByVal pUserDataLoader As LPD3DXLOADUSERDATA,ByVal ppFrameHierarchy As LPD3DXFRAME PTR,ByVal ppAnimController As LPD3DXANIMATIONCONTROLLER PTR) As HRESULT
D3DXVec3Lerp(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR,ByVal s As FLOAT) As D3DXVECTOR3 PTR
D3DXVec3Scale(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV As D3DXVECTOR3 PTR,ByVal s As FLOAT) As D3DXVECTOR3 PTR
D3DXVec3Maximize(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Minimize(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Subtract(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Add(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Cross(ByVal pOut As D3DXVECTOR3 PTR,ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As D3DXVECTOR3 PTR
D3DXVec3Dot(ByVal pV1 As D3DXVECTOR3 PTR,ByVal pV2 As D3DXVECTOR3 PTR) As FLOAT
D3DXVec3LengthSq(ByVal pV As D3DXVECTOR3 PTR) As FLOAT
D3DXVec3Length(ByVal pV As D3DXVECTOR3 PTR) As FLOAT
D3DXVec2TransformNormalArray(ByVal pOut As D3DXVECTOR2 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR2 PTR,ByVal VStride As UINT,ByVal pM As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR2 PTR
D3DXVec2TransformCoordArray(ByVal pOut As D3DXVECTOR2 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR2 PTR,ByVal VStride As UINT,ByVal pM As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR2 PTR
D3DXVec2TransformArray(ByVal pOut As D3DXVECTOR4 PTR,ByVal OutStride As UINT,ByVal pV As D3DXVECTOR2 PTR,ByVal VStride As UINT,ByVal pM As D3DXMATRIX PTR,ByVal n As UINT) As D3DXVECTOR4 PTR
D3DXVec2TransformNormal(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV As D3DXVECTOR2 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR2 PTR
D3DXVec2TransformCoord(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV As D3DXVECTOR2 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR2 PTR
D3DXVec2Transform(ByVal pOut As D3DXVECTOR4 PTR,ByVal pV As D3DXVECTOR2 PTR,ByVal pM As D3DXMATRIX PTR) As D3DXVECTOR4 PTR
D3DXVec2BaryCentric(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR,ByVal pV3 As D3DXVECTOR2 PTR,ByVal f As FLOAT,ByVal g As FLOAT) As D3DXVECTOR2 PTR
D3DXVec2CatmullRom(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV0 As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR,ByVal pV3 As D3DXVECTOR2 PTR,ByVal s As FLOAT) As D3DXVECTOR2 PTR
D3DXVec2Hermite(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pT1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR,ByVal pT2 As D3DXVECTOR2 PTR,ByVal s As FLOAT) As D3DXVECTOR2 PTR
D3DXVec2Normalize(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Lerp(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR,ByVal s As FLOAT) As D3DXVECTOR2 PTR
D3DXVec2Scale(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV As D3DXVECTOR2 PTR,ByVal s As FLOAT) As D3DXVECTOR2 PTR
D3DXVec2Maximize(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Minimize(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Subtract(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2Add(ByVal pOut As D3DXVECTOR2 PTR,ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As D3DXVECTOR2 PTR
D3DXVec2CCW(ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As FLOAT
D3DXVec2Dot(ByVal pV1 As D3DXVECTOR2 PTR,ByVal pV2 As D3DXVECTOR2 PTR) As FLOAT
D3DXVec2LengthSq(ByVal pV As D3DXVECTOR2 PTR) As FLOAT
D3DXVec2Length(ByVal pV As D3DXVECTOR2 PTR) As FLOAT
D3DXFloat16To32Array(ByVal pOut As FLOAT PTR,ByVal pIn As D3DXFLOAT16 PTR,ByVal n As UINT) As FLOAT PTR
D3DXFloat32To16Array(ByVal pOut As D3DXFLOAT16 PTR,ByVal pIn As FLOAT PTR,ByVal n As UINT) As D3DXFLOAT16 PTR
D3DXCreateEffectCompilerFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppCompiler As LPD3DXEFFECTCOMPILER PTR,ByVal ppParseErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateEffectCompilerFromFile(ByVal pSrcFile As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppCompiler As LPD3DXEFFECTCOMPILER PTR,ByVal ppParseErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateEffectFromResource(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal pPool As LPD3DXEFFECTPOOL,ByVal ppEffect As LPD3DXEFFECT PTR,ByVal ppCompilationErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateEffectFromFile(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal pPool As LPD3DXEFFECTPOOL,ByVal ppEffect As LPD3DXEFFECT PTR,ByVal ppCompilationErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateEffectCompilerFromResource(ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppCompiler As LPD3DXEFFECTCOMPILER PTR,ByVal ppParseErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateEffectCompilerFromFile(ByVal pSrcFile As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppCompiler As LPD3DXEFFECTCOMPILER PTR,ByVal ppParseErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateEffectFromResource(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal hSrcModule As HMODULE,ByVal pSrcResource As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal pPool As LPD3DXEFFECTPOOL,ByVal ppEffect As LPD3DXEFFECT PTR,ByVal ppCompilationErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateEffectFromFile(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcFile As LPCWSTR,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal pPool As LPD3DXEFFECTPOOL,ByVal ppEffect As LPD3DXEFFECT PTR,ByVal ppCompilationErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXDisassembleEffect(ByVal pEffect As LPD3DXEFFECT,ByVal EnableColorCode As BOOL,ByVal ppDisassembly As LPD3DXBUFFER PTR) As HRESULT
D3DXBuildSpriteTransform(ByVal pMatrix As D3DXMATRIX PTR,ByVal prectDest As RECT PTR,ByVal angleRad As Single,ByVal pOffset As D3DXVECTOR2 PTR) 
D3DXQuaternionToAxisAngle(ByVal pQ As D3DXQUATERNION PTR,ByVal pAxis As D3DXVECTOR3 PTR,ByVal pAngle As Single PTR) 
D3DXCreateEffectCompiler(ByVal pSrcData As LPCSTR,ByVal SrcDataLen As UINT,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal ppCompiler As LPD3DXEFFECTCOMPILER PTR,ByVal ppParseErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXGetErrorString(ByVal hr As HRESULT,ByVal strLength As DWORD,ByVal pStr As LPSTR) 
D3DXQuaternionSquadSetup(ByVal pAOut As D3DXQUATERNION PTR,ByVal pBOut As D3DXQUATERNION PTR,ByVal pCOut As D3DXQUATERNION PTR,ByVal pQ0 As D3DXQUATERNION PTR,ByVal pQ1 As D3DXQUATERNION PTR,ByVal pQ2 As D3DXQUATERNION PTR,ByVal pQ3 As D3DXQUATERNION PTR) 
D3DXQuaternionToAxisAngle(ByVal pQ As D3DXQUATERNION PTR,ByVal pAxis As D3DXVECTOR3 PTR,ByVal pAngle As FLOAT PTR) 
D3DXCreateEffect(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal pSrcData As LPCVOID,ByVal SrcDataLen As UINT,ByVal pDefines As D3DXMACRO PTR,ByVal pInclude As LPD3DXINCLUDE,ByVal Flags As DWORD,ByVal pPool As LPD3DXEFFECTPOOL,ByVal ppEffect As LPD3DXEFFECT PTR,ByVal ppCompilationErrors As LPD3DXBUFFER PTR) As HRESULT
D3DXCreateEffectPool(ByVal ppPool As LPD3DXEFFECTPOOL PTR) As HRESULT
D3DXCreateLine(ByVal pDevice As LPDIRECT3DDEVICE9,ByVal ppLine As LPD3DXLINE PTR) As HRESULT
data_from_ndr(ByVal source As PRPC_MESSAGE,ByVal target As any PTR,ByVal format As zstring PTR,ByVal MscPak As ubyte) 
data_size_ndr(ByVal source As any PTR,ByVal target As PRPC_MESSAGE,ByVal format As zstring PTR,ByVal MscPak As ubyte) 
data_into_ndr(ByVal source As any PTR,ByVal target As PRPC_MESSAGE,ByVal format As zstring PTR,ByVal MscPak As ubyte) 
DceErrorInqText(ByVal RpcStatus As RPC_STATUS,ByVal ErrorText As ushort PTR) As RPC_STATUS
DceErrorInqText(ByVal RpcStatus As RPC_STATUS,ByVal ErrorText As ubyte PTR) As RPC_STATUS
DdeAddData(ByVal hData As HDDEDATA,ByVal pSrc As PBYTE,ByVal cb As DWORD,ByVal cbOff As DWORD) As HDDEDATA
DdeAbandonTransaction(ByVal idInst As DWORD,ByVal hConv As HCONV,ByVal idTransaction As DWORD) As BOOL
DdeAccessData(ByVal hData As HDDEDATA,ByVal pcbDataSize As PDWORD) As PBYTE
DdeCreateStringHandle(ByVal idInst As DWORD,ByVal psz As LPSTR,ByVal iCodePage As Integer) As HSZ
DdeConnect(ByVal idInst As DWORD,ByVal hszService As HSZ,ByVal hszTopic As HSZ,ByVal pCC As PCONVCONTEXT) As HCONV
DdeCmpStringHandles(ByVal hsz1 As HSZ,ByVal hsz2 As HSZ) As Integer
DdeCreateStringHandle(ByVal idInst As DWORD,ByVal psz As LPWSTR,ByVal iCodePage As Integer) As HSZ
DdeConnectList(ByVal idInst As DWORD,ByVal hszService As HSZ,ByVal hszTopic As HSZ,ByVal hConvList As HCONVLIST,ByVal pCC As PCONVCONTEXT) As HCONVLIST
DdeCreateDataHandle(ByVal idInst As DWORD,ByVal pSrc As PBYTE,ByVal cb As DWORD,ByVal cbOff As DWORD,ByVal hszItem As HSZ,ByVal wFmt As UINT,ByVal afCmd As UINT) As HDDEDATA
DdeClientTransaction(ByVal pData As PBYTE,ByVal cbData As DWORD,ByVal hConv As HCONV,ByVal hszItem As HSZ,ByVal wFmt As UINT,ByVal wType As UINT,ByVal dwTimeout As DWORD,ByVal pdwResult As PDWORD) As HDDEDATA
DdeDisconnect(ByVal hConv As HCONV) As BOOL
DdeDisconnectList(ByVal hConvList As HCONVLIST) As BOOL
DdeEnableCallback(ByVal idInst As DWORD,ByVal hConv As HCONV,ByVal wCmd As UINT) As BOOL
DdeFreeDataHandle(ByVal hData As HDDEDATA) As BOOL
DdeFreeStringHandle(ByVal idInst As DWORD,ByVal hsz As HSZ) As BOOL
DdeGetData(ByVal hData As HDDEDATA,ByVal pDst As PBYTE,ByVal cbMax As DWORD,ByVal cbOff As DWORD) As DWORD
DdeGetLastError(ByVal idInst As DWORD) As UINT
DdeInitialize(ByVal pidInst As PDWORD,ByVal pfnCallback As PFNCALLBACK,ByVal afCmd As DWORD,ByVal ulRes As DWORD) As UINT
DdeImpersonateClient(ByVal hConv As HCONV) As BOOL
DdeKeepStringHandle(ByVal idInst As DWORD,ByVal hsz As HSZ) As BOOL
DdeNameService(ByVal idInst As DWORD,ByVal hsz1 As HSZ,ByVal hsz2 As HSZ,ByVal afCmd As UINT) As HDDEDATA
DdePostAdvise(ByVal idInst As DWORD,ByVal hszTopic As HSZ,ByVal hszItem As HSZ) As BOOL
DdeQueryNextServer(ByVal hConvList As HCONVLIST,ByVal hConvPrev As HCONV) As HCONV
DdeQueryConvInfo(ByVal hConv As HCONV,ByVal idTransaction As DWORD,ByVal pConvInfo As PCONVINFO) As UINT
DdeQueryString(ByVal idInst As DWORD,ByVal hsz As HSZ,ByVal psz As LPWSTR,ByVal cchMax As DWORD,ByVal iCodePage As Integer) As DWORD
DdeQueryString(ByVal idInst As DWORD,ByVal hsz As HSZ,ByVal psz As LPSTR,ByVal cchMax As DWORD,ByVal iCodePage As Integer) As DWORD
DdeReconnect(ByVal hConv As HCONV) As HCONV
DdeSetQualityOfService(ByVal hWndClient As HWND,ByVal pqosNew As SECURITY_QUALITY_OF_SERVICE PTR,ByVal pqosPrev As PSECURITY_QUALITY_OF_SERVICE) As BOOL
DdeSetUserHandle(ByVal hConv As HCONV,ByVal id As DWORD,ByVal hUser As DWORD) As BOOL
DdeUninitialize(ByVal idInst As DWORD) As BOOL
DdeUnaccessData(ByVal hData As HDDEDATA) As BOOL
DeactivateActCtx(ByVal As DWORD,ByVal As ULONG_PTR) As BOOL
DebugSetProcessKillOnExit(ByVal As BOOL) As BOOL
DebugActiveProcessStop(ByVal As DWORD) As BOOL
DebugBreakProcess(ByVal As HANDLE) As BOOL
DebugBreak() 
DebugActiveProcess(ByVal dwProcessId As DWORD) As BOOL
DecryptMessage(ByVal phContext As PCtxtHandle,ByVal pMessage As PSecBufferDesc,ByVal MessageSeqNo As ULONG,ByVal pfQOP As PULONG) As SECURITY_STATUS
DefDlgProc(ByVal hDlg As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
DefDriverProc(ByVal dwDriverIdentifier As DWORD,ByVal hdrvr As HDRVR,ByVal uMsg As UINT,ByVal lParam1 As LPARAM,ByVal lParam2 As LPARAM) As LRESULT
DeferWindowPos(ByVal hWinPosInfo As HDWP,ByVal hwnd As HWND,ByVal hWndInsertAfter As HWND,ByVal x As Integer,ByVal y As Integer,ByVal cx As Integer,ByVal cy As Integer,ByVal wFlags As UINT) As HDWP
DefFrameProc(ByVal hwnd As HWND,ByVal hWndMDIClient As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
DefineDosDevice(ByVal dwFlags As DWORD,ByVal lpDeviceName As LPCSTR,ByVal lpTargetPath As LPCSTR) As BOOL
DefineDosDevice(ByVal dwFlags As DWORD,ByVal lpDeviceName As LPCWSTR,ByVal lpTargetPath As LPCWSTR) As BOOL
DefMDIChildProc(ByVal hwnd As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
DefRawInputProc(ByVal As PRAWINPUT PTR,ByVal As INT_,ByVal As UINT) As LRESULT
DefScreenSaverProc(ByVal As HWND,ByVal As UINT,ByVal As WPARAM,ByVal As LPARAM) As LONG
DefWindowProc(ByVal hwnd As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
DeletePrintProcessor(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal pPrintProcessorName As LPWSTR) As BOOL
DeleteFiber(ByVal lpFiber As PVOID) 
DeleteCriticalSection(ByVal lpCriticalSection As PCRITICAL_SECTION) 
DeleteTimerQueueEx(ByVal TimerQueue As HANDLE,ByVal CompletionEvent As HANDLE) As BOOL
DeleteVolumeMountPoint(ByVal lpszVolumeMountPoint As LPCWSTR) As BOOL
DeleteVolumeMountPoint(ByVal lpszVolumeMountPoint As LPCSTR) As BOOL
DeleteFile(ByVal lpFileName As LPCSTR) As BOOL
DeleteDC(ByVal hdc As HDC) As BOOL
DeleteMetaFile(ByVal hMF As HMETAFILE) As BOOL
DeleteAce(ByVal pAcl As PACL,ByVal dwAceIndex As DWORD) As BOOL
DeleteAtom(ByVal nAtom As ATOM) As ATOM
DeletePrintProvidor(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal pPrintProvidorName As LPWSTR) As BOOL
DeleteObject(ByVal hObject As HGDIOBJ) As BOOL
DeleteEnhMetaFile(ByVal hemf As HENHMETAFILE) As BOOL
DeleteForm(ByVal hPrinter As HANDLE,ByVal pFormName As LPWSTR) As BOOL
DeleteSecurityContext(ByVal phContext As PCtxtHandle) As SECURITY_STATUS
DeleteMonitor(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal pMonitorName As LPWSTR) As BOOL
DeletePrinter(ByVal hPrinter As HANDLE) As BOOL
DeletePwrScheme(ByVal As UINT) As BOOLEAN
DeletePort(ByVal pName As LPWSTR,ByVal hwnd As HWND,ByVal pPortName As LPWSTR) As BOOL
DeleteForm(ByVal hPrinter As HANDLE,ByVal pFormName As LPSTR) As BOOL
DeleteMonitor(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal pMonitorName As LPSTR) As BOOL
DeletePort(ByVal pName As LPSTR,ByVal hwnd As HWND,ByVal pPortName As LPSTR) As BOOL
DeleteUrlCacheEntry(ByVal lpszUrlName As LPCSTR) As BOOL
DeletePrinterConnection(ByVal pName As LPSTR) As BOOL
DeletePrinterData(ByVal As HANDLE,ByVal As LPSTR) As DWORD
DeleteColorSpace(ByVal hcolorspace As HCOLORSPACE) As BOOL
DeletePrinterDriver(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal pDriverName As LPSTR) As BOOL
DeletePrintProcessor(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal pPrintProcessorName As LPSTR) As BOOL
DeletePrintProvidor(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal pPrintProvidorName As LPSTR) As BOOL
DeleteProxyArpEntry(ByVal dwAddress As DWORD,ByVal dwMask As DWORD,ByVal dwIfIndex As DWORD) As DWORD
DeleteIpNetEntry(ByVal pArpEntry As PMIB_IPNETROW) As DWORD
DeleteService(ByVal hService As SC_HANDLE) As BOOL
DeleteIpForwardEntry(ByVal pRoute As PMIB_IPFORWARDROW) As DWORD
DeleteIPAddress(ByVal NTEContext As ULONG) As DWORD
DeleteFile(ByVal lpFileName As LPCWSTR) As BOOL
DeletePrinterConnection(ByVal pName As LPWSTR) As BOOL
DeletePrinterData(ByVal As HANDLE,ByVal As LPWSTR) As DWORD
DeleteMenu(ByVal hMenu As HMENU,ByVal nPosition As UINT,ByVal wFlags As UINT) As BOOL
DeleteTimerQueue(ByVal TimerQueue As HANDLE) As BOOL
DeleteUrlCacheGroup(ByVal GroupId As GROUPID,ByVal dwFlags As DWORD,ByVal lpReserved As LPVOID) As BOOL
DeleteTimerQueueTimer(ByVal TimerQueue As HANDLE,ByVal Timer As HANDLE,ByVal CompletionEvent As HANDLE) As BOOL
DeletePrinterDriver(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal pDriverName As LPWSTR) As BOOL
DeregisterEventSource(ByVal hEventLog As HANDLE) As BOOL
DeregisterShellHookWindow(ByVal As HWND) As BOOL
DescribePixelFormat(ByVal hDC As HDC,ByVal n As Integer,ByVal un As UINT,ByVal lpPixelFormatDescriptor As LPPIXELFORMATDESCRIPTOR) As Integer
DestroyIcon(ByVal hIcon As HICON) As BOOL
DestroyEnvironmentBlock(ByVal lpEnvironment As LPVOID) As BOOL
DestroyCursor(ByVal hCursor As HCURSOR) As BOOL
DestroyAcceleratorTable(ByVal haccel As HACCEL) As BOOL
DestroyMenu(ByVal hMenu As HMENU) As BOOL
DestroyWindow(ByVal hwnd As HWND) As BOOL
DestroyPropertySheetPage(ByVal hpropsheetpage As HPROPSHEETPAGE) As BOOL
DestroyPrivateObjectSecurity(ByVal ObjectDescriptor As PSECURITY_DESCRIPTOR PTR) As BOOL
DestroyCaret() As BOOL
DeviceCapabilities(ByVal lpDeviceName As LPCSTR,ByVal lpPort As LPCSTR,ByVal iIndex As WORD,ByVal lpOutput As LPSTR,ByVal lpDevMode As DEVMODEA PTR) As DWORD
DeviceCapabilities(ByVal lpDeviceName As LPCWSTR,ByVal lpPort As LPCWSTR,ByVal iIndex As WORD,ByVal lpOutput As LPWSTR,ByVal lpDevMode As DEVMODEW PTR) As DWORD
DeviceIoControl(ByVal hDevice As HANDLE,ByVal dwIoControlCode As DWORD,ByVal lpInBuffer As PVOID,ByVal nInBufferSize As DWORD,ByVal lpOutBuffer As PVOID,ByVal nOutBufferSize As DWORD,ByVal lpBytesReturned As PDWORD,ByVal lpOverlapped As POVERLAPPED) As BOOL
DialogBoxParam(ByVal hInstance As HINSTANCE,ByVal lpTemplateName As LPCWSTR,ByVal hWndParent As HWND,ByVal lpDialogFunc As DLGPROC,ByVal dwInitParam As LPARAM) As Integer
DialogBoxIndirectParam(ByVal hInstance As HINSTANCE,ByVal hDialogTemplate As LPCDLGTEMPLATE,ByVal hWndParent As HWND,ByVal lpDialogFunc As DLGPROC,ByVal dwInitParam As LPARAM) As Integer
DialogBoxParam(ByVal hInstance As HINSTANCE,ByVal lpTemplateName As LPCSTR,ByVal hWndParent As HWND,ByVal lpDialogFunc As DLGPROC,ByVal dwInitParam As LPARAM) As Integer
DirectDrawEnumerateEx(ByVal lpCallback As LPDDENUMCALLBACKEX,ByVal lpContext As LPVOID,ByVal dwFlags As DWORD) As HRESULT
DirectDrawEnumerate(ByVal lpCallback As LPDDENUMCALLBACK,ByVal lpContext As LPVOID) As HRESULT
DirectSoundCaptureEnumerate(ByVal pDSEnumCallback As LPDSENUMCALLBACKW,ByVal pContext As LPVOID) As HRESULT
DirectSoundCaptureEnumerate(ByVal pDSEnumCallback As LPDSENUMCALLBACKA,ByVal pContext As LPVOID) As HRESULT
DirectDrawCreateClipper(ByVal dwFlags As DWORD,ByVal lplpDDClipper As LPDIRECTDRAWCLIPPER PTR,ByVal pUnkOuter As IUnknown PTR) As HRESULT
DirectDrawEnumerateEx(ByVal lpCallback As LPDDENUMCALLBACKEX,ByVal lpContext As LPVOID,ByVal dwFlags As DWORD) As HRESULT
DirectDrawEnumerate(ByVal lpCallback As LPDDENUMCALLBACK,ByVal lpContext As LPVOID) As HRESULT
DirectSoundEnumerate(ByVal pDSEnumCallback As LPDSENUMCALLBACKW,ByVal pContext As LPVOID) As HRESULT
DirectSoundCreate(ByVal pcGuidDevice As LPCGUID,ByVal ppDS As LPDIRECTSOUND PTR,ByVal pUnkOuter As LPUNKNOWN) As HRESULT
DirectSoundCaptureCreate(ByVal pcGuidDevice As LPCGUID,ByVal ppDSC As LPDIRECTSOUNDCAPTURE PTR,ByVal pUnkOuter As LPUNKNOWN) As HRESULT
DirectSoundCreate8(ByVal pcGuidDevice As LPCGUID,ByVal ppDS8 As LPDIRECTSOUND8 PTR,ByVal pUnkOuter As LPUNKNOWN) As HRESULT
DirectSoundCaptureCreate8(ByVal pcGuidDevice As LPCGUID,ByVal ppDSC8 As LPDIRECTSOUNDCAPTURE8 PTR,ByVal pUnkOuter As LPUNKNOWN) As HRESULT
DirectSoundFullDuplexCreate(ByVal pcGuidCaptureDevice As LPCGUID,ByVal pcGuidRenderDevice As LPCGUID,ByVal pcDSCBufferDesc As LPCDSCBUFFERDESC,ByVal pcDSBufferDesc As LPCDSBUFFERDESC,ByVal hWnd As HWND,ByVal dwLevel As DWORD,ByVal ppDSFD As LPDIRECTSOUNDFULLDUPLEX PTR,ByVal ppDSCBuffer8 As LPDIRECTSOUNDCAPTUREBUFFER8 PTR,ByVal ppDSBuffer8 As LPDIRECTSOUNDBUFFER8 PTR,ByVal pUnkOuter As LPUNKNOWN) As HRESULT
DirectDrawCreateEx(ByVal lpGuid As GUID PTR,ByVal lplpDD As LPVOID PTR,ByVal iid As IID PTR,ByVal pUnkOuter As IUnknown PTR) As HRESULT
DirectInput8Create(ByVal hinst As HINSTANCE,ByVal dwVersion As DWORD,ByVal riidltf As IID PTR,ByVal ppvOut As LPVOID PTR,ByVal punkOuter As LPUNKNOWN) As HRESULT
DirectDrawCreate(ByVal lpGUID As GUID PTR,ByVal lplpDD As LPDIRECTDRAW PTR,ByVal pUnkOuter As IUnknown PTR) As HRESULT
DirectSoundEnumerate(ByVal pDSEnumCallback As LPDSENUMCALLBACKA,ByVal pContext As LPVOID) As HRESULT
Direct3DCreate9(ByVal SDKVersion As UINT) As IDirect3D9 PTR
Direct3DRMCreate(ByVal lplpDirect3DRM As LPDIRECT3DRM PTR) As HRESULT
DisableThreadLibraryCalls(ByVal hLibModule As HMODULE) As BOOL
DisconnectEx(ByVal As SOCKET,ByVal As LPOVERLAPPED,ByVal As DWORD,ByVal As DWORD) As BOOL
DisconnectNamedPipe(ByVal hNamedPipe As HANDLE) As BOOL
DispGetIDsOfNames(ByVal ptinfo As LPTYPEINFO,ByVal rgszNames As OLECHAR PTR PTR,ByVal cNames As UINT,ByVal rgdispid As DISPID PTR) As HRESULT
DispInvoke(ByVal this As any PTR,ByVal ptinfo As LPTYPEINFO,ByVal dispidMember As DISPID,ByVal wFlags As WORD,ByVal pparams As DISPPARAMS PTR,ByVal pvarResult As VARIANT PTR,ByVal pexcepinfo As EXCEPINFO PTR,ByVal puArgErr As UINT PTR) As HRESULT
DispGetParam(ByVal pdispparams As DISPPARAMS PTR,ByVal position As UINT,ByVal vtTarg As VARTYPE,ByVal pvarResult As VARIANT PTR,ByVal puArgErr As UINT PTR) As HRESULT
DispatchMessage(ByVal lpMsg As MSG PTR) As LONG
DlgDirSelectComboBoxEx(ByVal hWndDlg As HWND,ByVal lpszPath As LPSTR,ByVal cbPath As Integer,ByVal idComboBox As Integer) As BOOL
DlgDirList(ByVal hDlg As HWND,ByVal lpPathSpec As LPSTR,ByVal nIDListBox As Integer,ByVal nIDStaticPath As Integer,ByVal wFileType As UINT) As Integer
DlgDirSelectComboBoxEx(ByVal hWndDlg As HWND,ByVal lpszPath As LPWSTR,ByVal cbPath As Integer,ByVal idComboBox As Integer) As BOOL
DlgDirListComboBox(ByVal hDlg As HWND,ByVal lpPathSpec As LPWSTR,ByVal nIDComboBox As Integer,ByVal nIDStaticPath As Integer,ByVal wFileType As UINT) As Integer
DlgDirSelectEx(ByVal hWndDlg As HWND,ByVal lpszPath As LPWSTR,ByVal cbPath As Integer,ByVal idListBox As Integer) As BOOL
DlgDirSelectEx(ByVal hWndDlg As HWND,ByVal lpszPath As LPSTR,ByVal cbPath As Integer,ByVal idListBox As Integer) As BOOL
DlgDirList(ByVal hDlg As HWND,ByVal lpPathSpec As LPWSTR,ByVal nIDListBox As Integer,ByVal nIDStaticPath As Integer,ByVal wFileType As UINT) As Integer
DlgDirListComboBox(ByVal hDlg As HWND,ByVal lpPathSpec As LPSTR,ByVal nIDComboBox As Integer,ByVal nIDStaticPath As Integer,ByVal wFileType As UINT) As Integer
DllCanUnloadNow() As HRESULT
DllGetClassObject(ByVal rclsid As CLSID PTR,ByVal riid As IID PTR,ByVal ppv As PVOID PTR) As HRESULT
DllInstall(ByVal bInstall As BOOL,ByVal pszCmdLine As LPCWSTR) As HRESULT
DllRegisterServer() As HRESULT
DllUnregisterServer() As HRESULT
DnsHostnameToComputerName(ByVal Hostname As LPCWSTR,ByVal ComputerName As LPWSTR,ByVal nSize As LPDWORD) As BOOL
DnsHostnameToComputerName(ByVal Hostname As LPCSTR,ByVal ComputerName As LPSTR,ByVal nSize As LPDWORD) As BOOL
DocumentProperties(ByVal hwnd As HWND,ByVal hPrinter As HANDLE,ByVal pDeviceName As LPSTR,ByVal pDevModeOutput As PDEVMODEA,ByVal pDevModeInput As PDEVMODEA,ByVal fMode As DWORD) As LONG
DocumentProperties(ByVal hwnd As HWND,ByVal hPrinter As HANDLE,ByVal pDeviceName As LPWSTR,ByVal pDevModeOutput As PDEVMODEW,ByVal pDevModeInput As PDEVMODEW,ByVal fMode As DWORD) As LONG
DoDragDrop(ByVal pDataObj As LPDATAOBJECT,ByVal pDropSource As LPDROPSOURCE,ByVal dwOKEffects As DWORD,ByVal pdwEffect As PDWORD) As HRESULT
DosDateTimeToFileTime(ByVal wFatDate As WORD,ByVal wFatTime As WORD,ByVal lpFileTime As LPFILETIME) As BOOL
DosDateTimeToVariantTime(ByVal wDosDate As ushort,ByVal wDosTime As ushort,ByVal pvtime As Double PTR) As Integer
Double_from_ndr(ByVal As PRPC_MESSAGE,ByVal As any PTR) 
Double_array_from_ndr(ByVal As PRPC_MESSAGE,ByVal As uinteger,ByVal As uinteger,ByVal As any PTR) 
DPtoLP(ByVal hdc As HDC,ByVal lpPoint As LPPOINT,ByVal nCount As Integer) As BOOL
DragQueryFile(ByVal HDROP As HDROP,ByVal UINT As UINT,ByVal lpStr As LPSTR,ByVal ch As UINT) As UINT
DragDetect(ByVal hWnd As HWND,ByVal pt As POINT) As BOOL
DragFinish(ByVal hDrop As HDROP) 
DragAcceptFiles(ByVal hwnd As HWND,ByVal fAccept As BOOL) 
DragObject(ByVal hWnd1 As HWND,ByVal hWnd2 As HWND,ByVal un As UINT,ByVal dw As DWORD,ByVal hCursor As HCURSOR) As DWORD
DragQueryPoint(ByVal HDROP As HDROP,ByVal lpPoint As LPPOINT) As BOOL
DragQueryFile(ByVal HDROP As HDROP,ByVal UINT As UINT,ByVal lpStr As LPWSTR,ByVal ch As UINT) As UINT
DrawFocusRect(ByVal hdc As HDC,ByVal lpRect As LPCRECT) As BOOL
DrawText(ByVal hdc As HDC,ByVal lpStr As LPCWSTR,ByVal nCount As Integer,ByVal lpRect As LPRECT,ByVal wFormat As UINT) As Integer
DrawState(ByVal hDC As HDC,ByVal hBrush As HBRUSH,ByVal lpDrawStateProc As DRAWSTATEPROC,ByVal lParam As LPARAM,ByVal wParam As WPARAM,ByVal n1 As Integer,ByVal n2 As Integer,ByVal n3 As Integer,ByVal n4 As Integer,ByVal un As UINT) As BOOL
DrawStatusText(ByVal hDC As HDC,ByVal lprc As LPRECT,ByVal pszText As LPCSTR,ByVal uFlags As UINT) 
DrawDibClose(ByVal hdd As HDRAWDIB) As BOOL
DrawEdge(ByVal hdc As HDC,ByVal qrc As LPRECT,ByVal edge As UINT,ByVal grfFlags As UINT) As BOOL
DrawCaption(ByVal hWnd As HWND,ByVal hDC As HDC,ByVal pcRect As LPCRECT,ByVal uDCFlags As UINT) As BOOL
DrawDibEnd(ByVal hdd As HDRAWDIB) As BOOL
DrawDibStop(ByVal hdd As HDRAWDIB) As BOOL
DrawDibStart(ByVal hdd As HDRAWDIB,ByVal rate As DWORD) As BOOL
DrawMenuBar(ByVal hwnd As HWND) As BOOL
DrawDibProfileDisplay(ByVal lpbi As LPBITMAPINFOHEADER) As DWORD
DrawIconEx(ByVal hdc As HDC,ByVal xLeft As Integer,ByVal yTop As Integer,ByVal hIcon As HICON,ByVal cxWidth As Integer,ByVal cyWidth As Integer,ByVal istepIfAniCur As UINT,ByVal hbrFlickerFreeDraw As HBRUSH,ByVal diFlags As UINT) As BOOL
DrawStatusText(ByVal hDC As HDC,ByVal lprc As LPRECT,ByVal pszText As LPCWSTR,ByVal uFlags As UINT) 
DrawInsert(ByVal handParent As HWND,ByVal hLB As HWND,ByVal nItem As Integer) 
DrawTextEx(ByVal hDC As HDC,ByVal lpsz As LPWSTR,ByVal n As Integer,ByVal lpRect As LPRECT,ByVal un As UINT,ByVal lpDrawTextParams As LPDRAWTEXTPARAMS) As Integer
DrawDibGetBuffer(ByVal hdd As HDRAWDIB,ByVal lpbi As LPBITMAPINFOHEADER,ByVal dwSize As DWORD,ByVal dwFlags As DWORD) As LPVOID
DrawDibChangePalette(ByVal hdd As HDRAWDIB,ByVal iStart As Integer,ByVal iLen As Integer,ByVal lppe As LPPALETTEENTRY) As BOOL
DrawTextEx(ByVal hDC As HDC,ByVal lpsz As LPSTR,ByVal n As Integer,ByVal lpRect As LPRECT,ByVal un As UINT,ByVal lpDrawTextParams As LPDRAWTEXTPARAMS) As Integer
DrawDibGetPalette(ByVal hdd As HDRAWDIB) As HPALETTE
DrawDibSetPalette(ByVal hdd As HDRAWDIB,ByVal hpal As HPALETTE) As BOOL
DrawDibDraw(ByVal hdd As HDRAWDIB,ByVal hdc As HDC,ByVal xDst As INT_,ByVal yDst As INT_,ByVal dxDst As INT_,ByVal dyDst As INT_,ByVal lpbi As LPBITMAPINFOHEADER,ByVal lpBits As LPVOID,ByVal xSrc As INT_,ByVal ySrc As INT_,ByVal dxSrc As INT_,ByVal dySrc As INT_,ByVal wFlags As UINT) As BOOL
DrawIcon(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal hIcon As HICON) As BOOL
DrawEscape(ByVal hdc As HDC,ByVal nEscape As Integer,ByVal cbInput As Integer,ByVal lpszInData As LPCSTR) As Integer
DrawThemeBackground(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As RECT PTR) As HRESULT
DrawFrameControl(ByVal hDC As HDC,ByVal lpRect As LPRECT,ByVal uFrameType As UINT,ByVal uFrameState As UINT) As BOOL
DrawDibBegin(ByVal hdd As HDRAWDIB,ByVal hdc As HDC,ByVal dxDst As INT_,ByVal dyDst As INT_,ByVal lpbi As LPBITMAPINFOHEADER,ByVal dxSrc As INT_,ByVal dySrc As INT_,ByVal wFlags As UINT) As BOOL
DrawDibRealize(ByVal hdd As HDRAWDIB,ByVal hdc As HDC,ByVal fBackground As BOOL) As UINT
DrawDibOpen() As HDRAWDIB
DrawThemeBackgroundEx(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As DTBGOPTS PTR) As HRESULT
DrawAnimatedRects(ByVal hwnd As HWND,ByVal idAni As Integer,ByVal lprcFrom As LPCRECT,ByVal lprcTo As LPCRECT) As BOOL
DrawThemeEdge(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As UINT,ByVal As UINT,ByVal As RECT PTR) As HRESULT
DrawThemeIcon(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As HIMAGELIST,ByVal As Integer) As HRESULT
DrawThemeParentBackground(ByVal As HWND,ByVal As HDC,ByVal As RECT PTR) As HRESULT
DrawThemeText(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As LPCWSTR,ByVal As Integer,ByVal As DWORD,ByVal As DWORD,ByVal As RECT PTR) As HRESULT
DrawText(ByVal hdc As HDC,ByVal lpStr As LPCSTR,ByVal nCount As Integer,ByVal lpRect As LPRECT,ByVal wFormat As UINT) As Integer
DrawState(ByVal hDC As HDC,ByVal hBrush As HBRUSH,ByVal lpDrawStateProc As DRAWSTATEPROC,ByVal lParam As LPARAM,ByVal wParam As WPARAM,ByVal n1 As Integer,ByVal n2 As Integer,ByVal n3 As Integer,ByVal n4 As Integer,ByVal un As UINT) As BOOL
DrvGetModuleHandle(ByVal hDriver As HDRVR) As HMODULE
DuplicateHandle(ByVal hSourceProcessHandle As HANDLE,ByVal hSourceHandle As HANDLE,ByVal hTargetProcessHandle As HANDLE,ByVal lpTargetHandle As PHANDLE,ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal dwOptions As DWORD) As BOOL
DuplicateToken(ByVal ExistingTokenHandle As HANDLE,ByVal ImpersonationLevel As SECURITY_IMPERSONATION_LEVEL,ByVal DuplicateTokenHandle As PHANDLE) As BOOL
DuplicateTokenEx(ByVal hExistingToken As HANDLE,ByVal dwDesiredAccess As DWORD,ByVal lpTokenAttributes As LPSECURITY_ATTRIBUTES,ByVal ImpersonationLevel As SECURITY_IMPERSONATION_LEVEL,ByVal TokenType As TOKEN_TYPE,ByVal phNewToken As PHANDLE) As BOOL
DXGetErrorDescription9(ByVal As HRESULT) As zstring PTR
DXGetErrorString9(ByVal As HRESULT) As zstring PTR
DXGetErrorString8(ByVal As HRESULT) As zstring PTR
DXGetErrorDescription8(ByVal As HRESULT) As zstring PTR
DXGetErrorString9(ByVal As HRESULT) As WCHAR PTR
DXGetErrorString8(ByVal As HRESULT) As WCHAR PTR
DXGetErrorDescription8(ByVal As HRESULT) As WCHAR PTR
DXGetErrorDescription9(ByVal As HRESULT) As WCHAR PTR
DXTrace(ByVal As zstring PTR,ByVal As DWORD,ByVal As HRESULT,ByVal As WCHAR PTR,ByVal As BOOL) As HRESULT
DXTrace(ByVal As zstring PTR,ByVal As DWORD,ByVal As HRESULT,ByVal As zstring PTR,ByVal As BOOL) As HRESULT
EditStreamClone(ByVal pavi As PAVISTREAM,ByVal ppResult As PAVISTREAM PTR) As HRESULT
EditStreamCopy(ByVal pavi As PAVISTREAM,ByVal plStart As LONG PTR,ByVal plLength As LONG PTR,ByVal ppResult As PAVISTREAM PTR) As HRESULT
EditStreamPaste(ByVal pavi As PAVISTREAM,ByVal plPos As LONG PTR,ByVal plLength As LONG PTR,ByVal pstream As PAVISTREAM,ByVal lStart As LONG,ByVal lEnd As LONG) As HRESULT
EditStreamCut(ByVal pavi As PAVISTREAM,ByVal plStart As LONG PTR,ByVal plLength As LONG PTR,ByVal ppResult As PAVISTREAM PTR) As HRESULT
EditSecurity(ByVal hwndOwner As HWND,ByVal psi As LPSECURITYINFO) As BOOL
EditStreamSetInfo(ByVal pavi As PAVISTREAM,ByVal lpInfo As LPAVISTREAMINFOA,ByVal cbInfo As LONG) As HRESULT
EditStreamSetInfo(ByVal pavi As PAVISTREAM,ByVal lpInfo As LPAVISTREAMINFOW,ByVal cbInfo As LONG) As HRESULT
EditStreamSetName(ByVal pavi As PAVISTREAM,ByVal lpszName As LPCSTR) As HRESULT
EditStreamSetName(ByVal pavi As PAVISTREAM,ByVal lpszName As LPCWSTR) As HRESULT
Ellipse(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer) As BOOL
EmptyClipboard() As BOOL
EmptyWorkingSet(ByVal hProcess As HANDLE) As BOOL
EnableScrollBar(ByVal hwnd As HWND,ByVal wSBflags As UINT,ByVal wArrows As UINT) As BOOL
EnableThemeDialogTexture(ByVal As HWND,ByVal As DWORD) As HRESULT
EnableWindow(ByVal hwnd As HWND,ByVal fBoolean As BOOL) As BOOL
EnableRouter(ByVal pHandle As HANDLE PTR,ByVal pOverlapped As OVERLAPPED PTR) As DWORD
EnableTheming(ByVal As BOOL) As HRESULT
EnableEUDC(ByVal As BOOL) As BOOL
EnableMenuItem(ByVal hMenu As HMENU,ByVal wIDEnableItem As UINT,ByVal wEnable As UINT) As BOOL
EncryptMessage(ByVal phContext As PCtxtHandle,ByVal fQOP As ULONG,ByVal pMessage As PSecBufferDesc,ByVal MessageSeqNo As ULONG) As SECURITY_STATUS
EncryptFile(ByVal lpFileName As LPCWSTR) As BOOL
EncryptFile(ByVal lpFileName As LPCSTR) As BOOL
EndDocPrinter(ByVal hPrinter As HANDLE) As BOOL
EndDoc(ByVal hDC As HDC) As Integer
EndDeferWindowPos(ByVal hWinPosInfo As HDWP) As BOOL
EndDialog(ByVal hDlg As HWND,ByVal nResult As Integer) As BOOL
EndMenu() As BOOL
EndPath(ByVal hdc As HDC) As BOOL
EndPagePrinter(ByVal hPrinter As HANDLE) As BOOL
EndPage(ByVal hdc As HDC) As Integer
EndPaint(ByVal hwnd As HWND,ByVal lpPaint As PAINTSTRUCT PTR) As BOOL
EndTask(ByVal As HWND,ByVal As BOOL,ByVal As BOOL) As BOOL
EndUpdateResource(ByVal hUpdate As HANDLE,ByVal fDiscard As BOOL) As BOOL
EnlargedUnsignedDivide(ByVal As ULARGE_INTEGER,ByVal As ULONG,ByVal As PULONG) As ULONG
EnterCriticalSection(ByVal lpCriticalSection As LPCRITICAL_SECTION) 
EnumMonitors(ByVal pName As LPWSTR,ByVal Level As DWORD,ByVal pMonitors As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumPorts(ByVal pName As LPWSTR,ByVal Level As DWORD,ByVal lpbPorts As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumResourceLanguages(ByVal hModule As HMODULE,ByVal lpType As LPCWSTR,ByVal lpName As LPCWSTR,ByVal lpEnumFunc As ENUMRESLANGPROC,ByVal lParam As LONG_PTR) As BOOL
EnumResourceNames(ByVal hModule As HMODULE,ByVal lpType As LPCWSTR,ByVal lpEnumFunc As ENUMRESNAMEPROC,ByVal lParam As LONG_PTR) As BOOL
EnumResourceTypes(ByVal hModule As HMODULE,ByVal lpEnumFunc As ENUMRESTYPEPROC,ByVal lParam As LONG_PTR) As BOOL
EnumDependentServices(ByVal hService As SC_HANDLE,ByVal dwServiceState As DWORD,ByVal lpServices As LPENUM_SERVICE_STATUSA,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As PDWORD,ByVal lpServicesReturned As PDWORD) As BOOL
EnumThreadWindows(ByVal dwThreadId As DWORD,ByVal lpfn As WNDENUMPROC,ByVal lParam As LPARAM) As BOOL
EnumMetaFile(ByVal hDC As HDC,ByVal hMetafile As HMETAFILE,ByVal lpMFEnumProc As MFENUMPROC,ByVal lParam As LPARAM) As BOOL
EnumPwrSchemes(ByVal As PWRSCHEMESENUMPROC,ByVal As LPARAM) As BOOLEAN
EnumObjects(ByVal hDC As HDC,ByVal n As Integer,ByVal lpGOBJEnumProc As GOBJENUMPROC,ByVal lpVoid As LPARAM) As Integer
EnumPrinterData(ByVal As HANDLE,ByVal As DWORD,ByVal As LPSTR,ByVal As DWORD,ByVal As PDWORD,ByVal As PDWORD,ByVal As PBYTE,ByVal As DWORD,ByVal As PDWORD) As DWORD
EnumPrinterDrivers(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal Level As DWORD,ByVal pDriverInfo As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcRetruned As PDWORD) As BOOL
EnumPrinters(ByVal flags As DWORD,ByVal name As LPSTR,ByVal Level As DWORD,ByVal pPrinterEnum As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumForms(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pForm As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumWindowStations(ByVal lpEnumFunc As WINSTAENUMPROCA,ByVal lParam As LPARAM) As BOOL
EnumProcessModules(ByVal hProcess As HANDLE,ByVal lphModule As HMODULE PTR,ByVal cb As DWORD,ByVal lpcbNeeded As LPDWORD) As BOOL
EnumPropsEx(ByVal hWnd As HWND,ByVal lpEnumFunc As PROPENUMPROCEXA,ByVal lParam As LPARAM) As Integer
EnumPrintProcessorDatatypes(ByVal pName As LPSTR,ByVal pPrintProcessorName As LPSTR,ByVal Level As DWORD,ByVal pDatatypes As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcRetruned As PDWORD) As BOOL
EnumProps(ByVal hWnd As HWND,ByVal lpEnumFunc As PROPENUMPROCA) As Integer
EnumPorts(ByVal pName As LPSTR,ByVal Level As DWORD,ByVal lpbPorts As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumDisplayDevices(ByVal lpDevice As LPCSTR,ByVal iDevNum As DWORD,ByVal lpDisplayDevice As PDISPLAY_DEVICEA,ByVal dwFlags As DWORD) As BOOL
EnumPrintProcessors(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal Level As DWORD,ByVal pPrintProcessorInfo As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumDependentServices(ByVal hService As SC_HANDLE,ByVal dwServiceState As DWORD,ByVal lpServices As LPENUM_SERVICE_STATUSW,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As PDWORD,ByVal lpServicesReturned As PDWORD) As BOOL
EnumDisplaySettingsEx(ByVal lpszDeviceName As LPCSTR,ByVal iModeNum As DWORD,ByVal lpDevMode As LPDEVMODEA,ByVal dwFlags As DWORD) As BOOL
EnumerateSecurityPackages(ByVal pcPackages As PULONG,ByVal ppPackageInfo As PSecPkgInfoW PTR) As SECURITY_STATUS
EnumDisplaySettings(ByVal lpszDeviceName As LPCSTR,ByVal iModeNum As DWORD,ByVal lpDevMode As PDEVMODEA) As BOOL
EnumServicesStatus(ByVal hSCManager As SC_HANDLE,ByVal dwServiceType As DWORD,ByVal dwServiceState As DWORD,ByVal lpServices As LPENUM_SERVICE_STATUSW,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As PDWORD,ByVal lpServicesReturned As PDWORD,ByVal lpResumeHandle As PDWORD) As BOOL
EnumICMProfiles(ByVal hdc As HDC,ByVal icmEnumProc As ICMENUMPROCA,ByVal lParam As LPARAM) As Integer
EnumFonts(ByVal hDC As HDC,ByVal lpsz As LPCSTR,ByVal lpFontEnumProc As FONTENUMPROCA,ByVal lParam As LPARAM) As Integer
EnumEnhMetaFile(ByVal hdc As HDC,ByVal hemf As HENHMETAFILE,ByVal lpEnhMetaFunc As ENHMFENUMPROC,ByVal lpData As PVOID,ByVal lpRect As LPCRECT) As BOOL
EnumFontFamilies(ByVal hdc As HDC,ByVal lpszFamily As LPCSTR,ByVal lpEnumFontFamProc As FONTENUMPROCA,ByVal lParam As LPARAM) As Integer
EnumDesktops(ByVal hwinsta As HWINSTA,ByVal lpEnumFunc As DESKTOPENUMPROCA,ByVal lParam As LPARAM) As BOOL
EnumerateSecurityPackages(ByVal pcPackages As PULONG,ByVal ppPackageInfo As PSecPkgInfoA PTR) As SECURITY_STATUS
EnumServicesStatusEx(ByVal hSCManager As SC_HANDLE,ByVal InfoLevel As SC_ENUM_TYPE,ByVal dwServiceType As DWORD,ByVal dwServiceState As DWORD,ByVal lpServices As LPBYTE,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As LPDWORD,ByVal lpServicesReturned As LPDWORD,ByVal lpResumeHandle As LPDWORD,ByVal pszGroupName As LPCWSTR) As BOOL
EnumWindowStations(ByVal lpEnumFunc As WINSTAENUMPROCW,ByVal lParam As LPARAM) As BOOL
EnumCalendarInfo(ByVal lpCalInfoEnumProc As CALINFO_ENUMPROCA,ByVal Locale As LCID,ByVal Calendar As CALID,ByVal CalType As CALTYPE) As BOOL
EnumPropsEx(ByVal hWnd As HWND,ByVal lpEnumFunc As PROPENUMPROCEXW,ByVal lParam As LPARAM) As Integer
EnumProps(ByVal hWnd As HWND,ByVal lpEnumFunc As PROPENUMPROCW) As Integer
EnumDisplayDevices(ByVal lpDevice As LPCWSTR,ByVal iDevNum As DWORD,ByVal lpDisplayDevice As PDISPLAY_DEVICEW,ByVal dwFlags As DWORD) As BOOL
EnumDisplaySettingsEx(ByVal lpszDeviceName As LPCWSTR,ByVal iModeNum As DWORD,ByVal lpDevMode As LPDEVMODEW,ByVal dwFlags As DWORD) As BOOL
EnumDisplaySettings(ByVal lpszDeviceName As LPCWSTR,ByVal iModeNum As DWORD,ByVal lpDevMode As PDEVMODEW) As BOOL
EnumServicesStatus(ByVal hSCManager As SC_HANDLE,ByVal dwServiceType As DWORD,ByVal dwServiceState As DWORD,ByVal lpServices As LPENUM_SERVICE_STATUSA,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As PDWORD,ByVal lpServicesReturned As PDWORD,ByVal lpResumeHandle As PDWORD) As BOOL
EnumServicesStatusEx(ByVal hSCManager As SC_HANDLE,ByVal InfoLevel As SC_ENUM_TYPE,ByVal dwServiceType As DWORD,ByVal dwServiceState As DWORD,ByVal lpServices As LPBYTE,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As LPDWORD,ByVal lpServicesReturned As LPDWORD,ByVal lpResumeHandle As LPDWORD,ByVal pszGroupName As LPCSTR) As BOOL
EnumDesktops(ByVal hwinsta As HWINSTA,ByVal lpEnumFunc As DESKTOPENUMPROCW,ByVal lParam As LPARAM) As BOOL
EnumerateLoadedModules(ByVal hProcess As HANDLE,ByVal EnumLoadedModulesCallback As PENUMLOADED_MODULES_CALLBACK,ByVal UserContext As PVOID) As BOOL
EnumPrintProcessors(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal Level As DWORD,ByVal pPrintProcessorInfo As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumResourceTypes(ByVal hModule As HMODULE,ByVal lpEnumFunc As ENUMRESTYPEPROC,ByVal lParam As LONG_PTR) As BOOL
EnumResourceNames(ByVal hModule As HMODULE,ByVal lpType As LPCSTR,ByVal lpEnumFunc As ENUMRESNAMEPROC,ByVal lParam As LONG_PTR) As BOOL
EnumResourceLanguages(ByVal hModule As HMODULE,ByVal lpType As LPCSTR,ByVal lpName As LPCSTR,ByVal lpEnumFunc As ENUMRESLANGPROC,ByVal lParam As LONG_PTR) As BOOL
EnumTimeFormats(ByVal lpTimeFmtEnumProc As TIMEFMT_ENUMPROCA,ByVal Locale As LCID,ByVal dwFlags As DWORD) As BOOL
EnumDeviceDrivers(ByVal lpImageBase As LPVOID PTR,ByVal cb As DWORD,ByVal lpcbNeeded As LPDWORD) As BOOL
EnumPrintProcessorDatatypes(ByVal pName As LPWSTR,ByVal pPrintProcessorName As LPWSTR,ByVal Level As DWORD,ByVal pDatatypes As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcRetruned As PDWORD) As BOOL
EnumFontFamiliesEx(ByVal hdc As HDC,ByVal lpLogFont As PLOGFONTA,ByVal lpEnumFontProc As FONTENUMPROCA,ByVal lParam As LPARAM,ByVal dw As DWORD) As Integer
EnumSystemLocales(ByVal lpLocaleEnumProc As LOCALE_ENUMPROCA,ByVal dwFlags As DWORD) As BOOL
EnumSystemGeoID(ByVal As GEOCLASS,ByVal As GEOID,ByVal As GEO_ENUMPROC) As BOOL
EnumMonitors(ByVal pName As LPSTR,ByVal Level As DWORD,ByVal pMonitors As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumSystemCodePages(ByVal lpCodePageEnumProc As CODEPAGE_ENUMPROCA,ByVal dwFlags As DWORD) As BOOL
EnumDateFormats(ByVal lpDateFmtEnumProc As DATEFMT_ENUMPROCA,ByVal Locale As LCID,ByVal dwFlags As DWORD) As BOOL
EnumChildWindows(ByVal hWndParent As HWND,ByVal lpEnumFunc As ENUMWINDOWSPROC,ByVal lParam As LPARAM) As BOOL
EnumClipboardFormats(ByVal wFormat As UINT) As UINT
EnumDesktopWindows(ByVal hDesktop As HDESK,ByVal lpfn As ENUMWINDOWSPROC,ByVal lParam As LPARAM) As BOOL
EnumForms(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pForm As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumJobs(ByVal hPrinter As HANDLE,ByVal FirstJob As DWORD,ByVal NoJobs As DWORD,ByVal Level As DWORD,ByVal pJob As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumTimeFormats(ByVal lpTimeFmtEnumProc As TIMEFMT_ENUMPROCW,ByVal Locale As LCID,ByVal dwFlags As DWORD) As BOOL
EnumDisplayMonitors(ByVal hdc As HDC,ByVal lprcClip As LPCRECT,ByVal lpfnEnum As MONITORENUMPROC,ByVal dwData As LPARAM) As BOOL
EnumWindows(ByVal lpEnumFunc As WNDENUMPROC,ByVal lParam As LPARAM) As BOOL
EnumICMProfiles(ByVal hdc As HDC,ByVal icmEnumProc As ICMENUMPROCW,ByVal lParam As LPARAM) As Integer
EnumFonts(ByVal hDC As HDC,ByVal lpsz As LPCWSTR,ByVal lpFontEnumProc As FONTENUMPROCW,ByVal lParam As LPARAM) As Integer
EnumFontFamiliesEx(ByVal hdc As HDC,ByVal lpLogFont As PLOGFONTW,ByVal lpEnumFontProc As FONTENUMPROCW,ByVal lParam As LPARAM,ByVal dw As DWORD) As Integer
EnumPrinters(ByVal flags As DWORD,ByVal name As LPWSTR,ByVal Level As DWORD,ByVal pPrinterEnum As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumFontFamilies(ByVal hdc As HDC,ByVal lpszFamily As LPCWSTR,ByVal lpEnumFontFamProc As FONTENUMPROCW,ByVal lParam As LPARAM) As Integer
EnumPrinterDrivers(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal Level As DWORD,ByVal pDriverInfo As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcRetruned As PDWORD) As BOOL
EnumSystemLocales(ByVal lpLocaleEnumProc As LOCALE_ENUMPROCW,ByVal dwFlags As DWORD) As BOOL
EnumProcesses(ByVal lpidProcess As DWORD PTR,ByVal cb As DWORD,ByVal cbNeeded As DWORD PTR) As BOOL
EnumPrinterData(ByVal As HANDLE,ByVal As DWORD,ByVal As LPWSTR,ByVal As DWORD,ByVal As PDWORD,ByVal As PDWORD,ByVal As PBYTE,ByVal As DWORD,ByVal As PDWORD) As DWORD
EnumJobs(ByVal hPrinter As HANDLE,ByVal FirstJob As DWORD,ByVal NoJobs As DWORD,ByVal Level As DWORD,ByVal pJob As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD,ByVal pcReturned As PDWORD) As BOOL
EnumSystemCodePages(ByVal lpCodePageEnumProc As CODEPAGE_ENUMPROCW,ByVal dwFlags As DWORD) As BOOL
EnumDateFormats(ByVal lpDateFmtEnumProc As DATEFMT_ENUMPROCW,ByVal Locale As LCID,ByVal dwFlags As DWORD) As BOOL
EnumCalendarInfo(ByVal lpCalInfoEnumProc As CALINFO_ENUMPROCW,ByVal Locale As LCID,ByVal Calendar As CALID,ByVal CalType As CALTYPE) As BOOL
enum_from_ndr(ByVal SourceMessage As PRPC_MESSAGE,ByVal Target As uinteger PTR) 
EqualSid(ByVal pSid1 As PSID,ByVal pSid2 As PSID) As BOOL
EqualRgn(ByVal hSrcRgn1 As HRGN,ByVal hSrcRgn2 As HRGN) As BOOL
EqualRect(ByVal lpRect1 As LPCRECT,ByVal lpRect2 As LPCRECT) As BOOL
EqualPrefixSid(ByVal pSid1 As PSID,ByVal pSid2 As PSID) As BOOL
EraseTape(ByVal hDevice As HANDLE,ByVal dwEraseType As DWORD,ByVal bimmediate As BOOL) As DWORD
EscapeCommFunction(ByVal nCid As HANDLE,ByVal nFunc As DWORD) As BOOL
Escape(ByVal hdc As HDC,ByVal nEscape As Integer,ByVal nCount As Integer,ByVal lpInData As LPCSTR,ByVal lpOutData As PVOID) As Integer
ExcludeClipRect(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer) As Integer
ExcludeUpdateRgn(ByVal hdc As HDC,ByVal hwnd As HWND) As Integer
ExitThread(ByVal dwExitCode As DWORD) 
ExitWindowsEx(ByVal uFlags As UINT,ByVal dwReserved As DWORD) As BOOL
ExitProcess(ByVal uExitCode As UINT) 
ExpandEnvironmentStrings(ByVal lpSrc As LPCSTR,ByVal lpDst As LPSTR,ByVal nSize As DWORD) As DWORD
ExpandEnvironmentStrings(ByVal lpSrc As LPCWSTR,ByVal lpDst As LPWSTR,ByVal nSize As DWORD) As DWORD
ExtCreateRegion(ByVal lpXform As XFORM PTR,ByVal nCount As DWORD,ByVal lpRgnData As RGNDATA PTR) As HRGN
ExtCreatePen(ByVal dwPenStyle As DWORD,ByVal dwWidth As DWORD,ByVal lplb As LOGBRUSH PTR,ByVal dwStyleCount As DWORD,ByVal lpStyle As DWORD PTR) As HPEN
ExtEscape(ByVal hdc As HDC,ByVal nEscape As Integer,ByVal cbInput As Integer,ByVal lpszInData As LPCSTR,ByVal cbOutput As Integer,ByVal lpszOutData As LPSTR) As Integer
ExtendedLargeIntegerDivide(ByVal As LARGE_INTEGER,ByVal As ULONG,ByVal As PULONG) As LARGE_INTEGER
ExtendedMagicDivide(ByVal As LARGE_INTEGER,ByVal As LARGE_INTEGER,ByVal As Integer) As LARGE_INTEGER
ExtFloodFill(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal crColor As COLORREF,ByVal wFillType As UINT) As BOOL
ExtractAssociatedIcon(ByVal hInst As HINSTANCE,ByVal lpIconPath As LPCWSTR,ByVal lpiIcon As PWORD) As HICON
ExtractIcon(ByVal hInst As HINSTANCE,ByVal lpszExeFileName As LPCSTR,ByVal nIconIndex As UINT) As HICON
ExtractIconEx(ByVal lpszFile As LPCWSTR,ByVal nIconIndex As Integer,ByVal phiconLarge As HICON PTR,ByVal phiconSmall As HICON PTR,ByVal nIcons As UINT) As UINT
ExtractIcon(ByVal hInst As HINSTANCE,ByVal lpszExeFileName As LPCWSTR,ByVal nIconIndex As UINT) As HICON
ExtractIconEx(ByVal lpszFile As LPCSTR,ByVal nIconIndex As Integer,ByVal phiconLarge As HICON PTR,ByVal phiconSmall As HICON PTR,ByVal nIcons As UINT) As UINT
ExtractAssociatedIcon(ByVal hInst As HINSTANCE,ByVal lpIconPath As LPCSTR,ByVal lpiIcon As PWORD) As HICON
ExtSelectClipRgn(ByVal hdc As HDC,ByVal hRgn As HRGN,ByVal fnMode As Integer) As Integer
ExtTextOut(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal wOptions As UINT,ByVal lpRect As LPCRECT,ByVal lpString As LPCSTR,ByVal nCount As UINT,ByVal lpDx As INT_ PTR) As BOOL
ExtTextOut(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal wOptions As UINT,ByVal lpRect As LPCRECT,ByVal lpString As LPCWSTR,ByVal nCount As UINT,ByVal lpDx As INT_ PTR) As BOOL
FatalExit(ByVal code As Integer) 
FatalAppExit(ByVal uAction As UINT,ByVal lpMessageText As LPCSTR) 
FatalAppExit(ByVal uAction As UINT,ByVal lpMessageText As LPCWSTR) 
FileTimeToLocalFileTime(ByVal lpFileTime As FILETIME PTR,ByVal lpLocalFileTime As LPFILETIME) As BOOL
FileTimeToSystemTime(ByVal lpFileTime As FILETIME PTR,ByVal lpSystemTime As LPSYSTEMTIME) As BOOL
FileEncryptionStatus(ByVal lpFileName As LPCWSTR,ByVal lpStatus As LPDWORD) As BOOL
FileTimeToDosDateTime(ByVal lpFileTime As FILETIME PTR,ByVal lpFatDate As LPWORD,ByVal lpFatTime As LPWORD) As BOOL
FileEncryptionStatus(ByVal lpFileName As LPCSTR,ByVal lpStatus As LPDWORD) As BOOL
FillPath(ByVal hdc As HDC) As BOOL
FillRect(ByVal hdc As HDC,ByVal lpRect As LPCRECT,ByVal hBrush As HBRUSH) As Integer
FillConsoleOutputAttribute(ByVal hConsoleOutput As HANDLE,ByVal wAttribute As WORD,ByVal nLength As DWORD,ByVal dwWriteCoord As COORD,ByVal lpNumberOfAttrsWritten As PDWORD) As BOOL
FillConsoleOutputCharacter(ByVal hConsoleOutput As HANDLE,ByVal cCharacter As WCHAR,ByVal nLength As DWORD,ByVal dwWriteCoord As COORD,ByVal lpNumberOfCharsWritten As PDWORD) As BOOL
FillRgn(ByVal hdc As HDC,ByVal hRgn As HRGN,ByVal hBrush As HBRUSH) As Integer
FillConsoleOutputCharacter(ByVal hConsoleOutput As HANDLE,ByVal cCharacter As CHAR,ByVal nLength As DWORD,ByVal dwWriteCoord As COORD,ByVal lpNumberOfCharsWritten As PDWORD) As BOOL
FindNextVolumeMountPoint(ByVal hFindVolumeMountPoint As HANDLE,ByVal lpszVolumeMountPoint As LPWSTR,ByVal cchBufferLength As DWORD) As BOOL
FindFirstUrlCacheGroup(ByVal dwFlags As DWORD,ByVal dwFilter As DWORD,ByVal lpSearchCondition As LPVOID,ByVal dwSearchCondition As DWORD,ByVal lpGroupId As GROUPID PTR,ByVal lpReserved As LPVOID) As HANDLE
FindAtom(ByVal lpString As LPCWSTR) As ATOM
FindVolumeClose(ByVal hFindVolume As HANDLE) As BOOL
FindFirstChangeNotification(ByVal lpPathName As LPCSTR,ByVal bWatchSubtree As BOOL,ByVal dwNotifyFilter As DWORD) As HANDLE
FindClosePrinterChangeNotification(ByVal hChange As HANDLE) As BOOL
FindNextVolume(ByVal hFindVolume As HANDLE,ByVal lpszVolumeName As LPWSTR,ByVal cchBufferLength As DWORD) As BOOL
FindAtom(ByVal lpString As LPCSTR) As ATOM
FindFirstFileEx(ByVal lpFileName As LPCWSTR,ByVal fInfoLevelId As FINDEX_INFO_LEVELS,ByVal lpFindFileData As PVOID,ByVal fSearchOp As FINDEX_SEARCH_OPS,ByVal lpSearchFilter As PVOID,ByVal dwAdditionalFlags As DWORD) As HANDLE
FindFirstFile(ByVal lpFileName As LPCSTR,ByVal lpFindFileData As LPWIN32_FIND_DATAA) As HANDLE
FindFirstFileEx(ByVal lpFileName As LPCSTR,ByVal fInfoLevelId As FINDEX_INFO_LEVELS,ByVal lpFindFileData As PVOID,ByVal fSearchOp As FINDEX_SEARCH_OPS,ByVal lpSearchFilter As PVOID,ByVal dwAdditionalFlags As DWORD) As HANDLE
FindNextFile(ByVal hFindFile As HANDLE,ByVal lpFindFileData As LPWIN32_FIND_DATAA) As BOOL
FindResource(ByVal hInstance As HMODULE,ByVal lpName As LPCSTR,ByVal lpType As LPCSTR) As HRSRC
FindResourceEx(ByVal hModule As HINSTANCE,ByVal lpType As LPCSTR,ByVal lpName As LPCSTR,ByVal wLanguage As WORD) As HRSRC
FindFirstChangeNotification(ByVal lpPathName As LPCWSTR,ByVal bWatchSubtree As BOOL,ByVal dwNotifyFilter As DWORD) As HANDLE
FindNextFile(ByVal hFindFile As HANDLE,ByVal lpFindFileData As LPWIN32_FIND_DATAW) As BOOL
FindNextUrlCacheGroup(ByVal hFind As HANDLE,ByVal lpGroupId As GROUPID PTR,ByVal lpReserved As LPVOID) As BOOL
FindActCtxSectionString(ByVal As DWORD,ByVal As GUID PTR,ByVal As ULONG,ByVal As LPCSTR,ByVal As PACTCTX_SECTION_KEYED_DATA) As BOOL
FindNextVolume(ByVal hFindVolume As HANDLE,ByVal lpszVolumeName As LPCSTR,ByVal cchBufferLength As DWORD) As BOOL
FindNextVolumeMountPoint(ByVal hFindVolumeMountPoint As HANDLE,ByVal lpszVolumeMountPoint As LPSTR,ByVal cchBufferLength As DWORD) As BOOL
FindResource(ByVal hInstance As HINSTANCE,ByVal lpName As LPCWSTR,ByVal lpType As LPCWSTR) As HRSRC
FindClose(ByVal hFindFile As HANDLE) As BOOL
FindFirstFile(ByVal lpFileName As LPCWSTR,ByVal lpFindFileData As LPWIN32_FIND_DATAW) As HANDLE
FindResourceEx(ByVal hModule As HINSTANCE,ByVal lpType As LPCWSTR,ByVal lpName As LPCWSTR,ByVal wLanguage As WORD) As HRSRC
FindActCtxSectionString(ByVal As DWORD,ByVal As GUID PTR,ByVal As ULONG,ByVal As LPCWSTR,ByVal As PACTCTX_SECTION_KEYED_DATA) As BOOL
FindNextUrlCacheEntry(ByVal hEnumHandle As HANDLE,ByVal lpNextCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOW,ByVal lpdwNextCacheEntryInfoBufferSize As PDWORD) As BOOL
FindFirstUrlCacheEntry(ByVal lpszUrlSearchPattern As LPCSTR,ByVal lpFirstCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOW,ByVal lpdwFirstCacheEntryInfoBufferSize As PDWORD) As HANDLE
FindWindowEx(ByVal hWnd1 As HWND,ByVal hWnd2 As HWND,ByVal lpsz1 As LPCWSTR,ByVal lpsz2 As LPCWSTR) As HWND
FindWindow(ByVal lpClassName As LPCWSTR,ByVal lpWindowName As LPCWSTR) As HWND
FindCloseChangeNotification(ByVal hChangeHandle As HANDLE) As BOOL
FindNextPrinterChangeNotification(ByVal hChange As HANDLE,ByVal pdwChange As PDWORD,ByVal pvReserved As PVOID,ByVal ppPrinterNotifyInfo As PVOID PTR) As HANDLE
FindText(ByVal pFindreplace As LPFINDREPLACEW) As HWND
FindText(ByVal pFindreplace As LPFINDREPLACEA) As HWND
FindFirstPrinterChangeNotification(ByVal hPrinter As HANDLE,ByVal fdwFlags As DWORD,ByVal fdwOptions As DWORD,ByVal pPrinterNotifyOptions As PVOID) As HANDLE
FindCloseUrlCache(ByVal hEnumHandle As HANDLE) As BOOL
FindWindow(ByVal lpClassName As LPCSTR,ByVal lpWindowName As LPCSTR) As HWND
FindWindowEx(ByVal hWnd1 As HWND,ByVal hWnd2 As HWND,ByVal lpsz1 As LPCSTR,ByVal lpsz2 As LPCSTR) As HWND
FindExecutable(ByVal lpFile As LPCSTR,ByVal lpDirectory As LPCSTR,ByVal lpResult As LPSTR) As HINSTANCE
FindFirstFreeAce(ByVal pAcl As PACL,ByVal pAce As PVOID PTR) As BOOL
FindExecutable(ByVal lpFile As LPCWSTR,ByVal lpDirectory As LPCWSTR,ByVal lpResult As LPWSTR) As HINSTANCE
FindNextChangeNotification(ByVal hChangeHandle As HANDLE) As BOOL
FindDebugInfoFile(ByVal FileName As LPSTR,ByVal SymbolPath As LPSTR,ByVal DebugFilePath As LPSTR) As HANDLE
FindVolumeMountPointClose(ByVal hFindVolumeMountPoint As HANDLE) As BOOL
FindNextUrlCacheEntry(ByVal hEnumHandle As HANDLE,ByVal lpNextCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOA,ByVal lpdwNextCacheEntryInfoBufferSize As PDWORD) As BOOL
FindFirstUrlCacheEntry(ByVal lpszUrlSearchPattern As LPCSTR,ByVal lpFirstCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOA,ByVal lpdwFirstCacheEntryInfoBufferSize As PDWORD) As HANDLE
FindExecutableImage(ByVal FileName As LPSTR,ByVal SymbolPath As LPSTR,ByVal ImageFilePath As LPSTR) As HANDLE
FindActCtxSectionGuid(ByVal As DWORD,ByVal As GUID PTR,ByVal As ULONG,ByVal As GUID PTR,ByVal As PACTCTX_SECTION_KEYED_DATA) As BOOL
FixBrushOrgEx(ByVal hDC As HDC,ByVal n1 As Integer,ByVal n2 As Integer,ByVal lpPoint As LPPOINT) As BOOL
FlashWindowEx(ByVal pfwi As PFLASHWINFO) As BOOL
FlashWindow(ByVal hwnd As HWND,ByVal bInvert As BOOL) As BOOL
FlattenPath(ByVal hdc As HDC) As BOOL
float_from_ndr(ByVal SourceMessage As PRPC_MESSAGE,ByVal Target As any PTR) 
float_array_from_ndr(ByVal SourceMessage As PRPC_MESSAGE,ByVal LowerIndex As uinteger,ByVal UpperIndex As uinteger,ByVal Target As any PTR) 
FloodFill(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal crColor As COLORREF) As BOOL
FlushViewOfFile(ByVal lpBaseAddress As PCVOID,ByVal dwNumberOfBytesToFlush As DWORD) As BOOL
FlushFileBuffers(ByVal hFile As HANDLE) As BOOL
FlushConsoleInputBuffer(ByVal hConsoleInput As HANDLE) As BOOL
FlushIpNetTable(ByVal dwIfIndex As DWORD) As DWORD
FlushInstructionCache(ByVal hProcess As HANDLE,ByVal lpBaseAddress As PCVOID,ByVal dwSize As DWORD) As BOOL
FoldString(ByVal dwMapFlags As DWORD,ByVal lpSrcStr As LPCSTR,ByVal cchSrc As Integer,ByVal lpDestStr As LPSTR,ByVal cchDest As Integer) As Integer
FoldString(ByVal dwMapFlags As DWORD,ByVal lpSrcStr As LPCWSTR,ByVal cchSrc As Integer,ByVal lpDestStr As LPWSTR,ByVal cchDest As Integer) As Integer
FormatMessage(ByVal dwFlags As DWORD,ByVal lpSource As PCVOID,ByVal dwMessageId As DWORD,ByVal dwLanguageId As DWORD,ByVal lpBuffer As LPSTR,ByVal nSize As DWORD,ByVal Arguments As va_list PTR) As DWORD
FormatMessage(ByVal dwFlags As DWORD,ByVal lpSource As PCVOID,ByVal dwMessageId As DWORD,ByVal dwLanguageId As DWORD,ByVal lpBuffer As LPWSTR,ByVal nSize As DWORD,ByVal Arguments As va_list PTR) As DWORD
FrameRect(ByVal hdc As HDC,ByVal lpRect As LPCRECT,ByVal hBrush As HBRUSH) As Integer
FrameRgn(ByVal hdc As HDC,ByVal hRgn As HRGN,ByVal hBrush As HBRUSH,ByVal nWidth As Integer,ByVal nHeight As Integer) As BOOL
FreeContextBuffer(ByVal pvContextBuffer As PVOID) As SECURITY_STATUS
FreeResource(ByVal hResData As HGLOBAL) As BOOL
FreeUserPhysicalPages(ByVal hProcess As HANDLE,ByVal NumberOfPages As PULONG_PTR,ByVal PageArray As PULONG_PTR) As BOOL
FreeDDElParam(ByVal msg As UINT,ByVal lParam As LPARAM) As BOOL
FreeSid(ByVal pSid As PSID) As PVOID
FreeLibraryAndExitThread(ByVal hLibModule As HMODULE,ByVal dwExitCode As DWORD) 
FreeEnvironmentStrings(ByVal lpsz As LPSTR) As BOOL
FreeEnvironmentStrings(ByVal lpsz As LPWSTR) As BOOL
FreeConsole() As BOOL
FreeLibrary(ByVal hLibModule As HMODULE) As BOOL
FreePrinterNotifyInfo(ByVal As PPRINTER_NOTIFY_INFO) As BOOL
FreeCredentialsHandle(ByVal phCredential As PCredHandle) As SECURITY_STATUS
FtpCreateDirectory(ByVal hConnect As HINTERNET,ByVal lpszDirectory As LPCSTR) As BOOL
FtpCreateDirectory(ByVal hConnect As HINTERNET,ByVal lpszDirectory As LPCWSTR) As BOOL
FtpCommand(ByVal hConnect As HINTERNET,ByVal fExpectResponse As BOOL,ByVal dwFlags As DWORD,ByVal lpszCommand As LPCWSTR,ByVal dwContext As DWORD_PTR,ByVal phFtpCommand As HINTERNET PTR) As BOOL
FtpCommand(ByVal hConnect As HINTERNET,ByVal fExpectResponse As BOOL,ByVal dwFlags As DWORD,ByVal lpszCommand As LPCSTR,ByVal dwContext As DWORD_PTR,ByVal phFtpCommand As HINTERNET PTR) As BOOL
FtpDeleteFile(ByVal hConnect As HINTERNET,ByVal lpszFileName As LPCSTR) As BOOL
FtpDeleteFile(ByVal hConnect As HINTERNET,ByVal lpszFileName As LPCWSTR) As BOOL
FtpFindFirstFile(ByVal hConnect As HINTERNET,ByVal lpszSearchFile As LPCSTR,ByVal lpFindFileData As LPWIN32_FIND_DATA,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
FtpFindFirstFile(ByVal hConnect As HINTERNET,ByVal lpszSearchFile As LPCWSTR,ByVal lpFindFileData As LPWIN32_FIND_DATA,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
FtpGetCurrentDirectory(ByVal hConnect As HINTERNET,ByVal lpszCurrentDirectory As LPWSTR,ByVal lpdwCurrentDirectory As PDWORD) As BOOL
FtpGetFile(ByVal hConnect As HINTERNET,ByVal lpszRemoteFile As LPCWSTR,ByVal lpszNewFile As LPCWSTR,ByVal fFailIfExists As BOOL,ByVal dwFlagsAndAttributes As DWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
FtpGetFile(ByVal hConnect As HINTERNET,ByVal lpszRemoteFile As LPCSTR,ByVal lpszNewFile As LPCSTR,ByVal fFailIfExists As BOOL,ByVal dwFlagsAndAttributes As DWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
FtpGetFileSize(ByVal hFile As HINTERNET,ByVal lpdwFileSizeHigh As LPDWORD) As DWORD
FtpGetCurrentDirectory(ByVal hConnect As HINTERNET,ByVal lpszCurrentDirectory As LPSTR,ByVal lpdwCurrentDirectory As PDWORD) As BOOL
FtpOpenFile(ByVal hConnect As HINTERNET,ByVal lpszFileName As LPCWSTR,ByVal dwAccess As DWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
FtpOpenFile(ByVal hConnect As HINTERNET,ByVal lpszFileName As LPCSTR,ByVal dwAccess As DWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
FtpPutFile(ByVal hConnect As HINTERNET,ByVal lpszLocalFile As LPCWSTR,ByVal lpszNewRemoteFile As LPCWSTR,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
FtpPutFile(ByVal hConnect As HINTERNET,ByVal lpszLocalFile As LPCSTR,ByVal lpszNewRemoteFile As LPCSTR,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
FtpRenameFile(ByVal hConnect As HINTERNET,ByVal lpszExisting As LPCWSTR,ByVal lpszNew As LPCWSTR) As BOOL
FtpRenameFile(ByVal hConnect As HINTERNET,ByVal lpszExisting As LPCSTR,ByVal lpszNew As LPCSTR) As BOOL
FtpRemoveDirectory(ByVal hConnect As HINTERNET,ByVal lpszDirectory As LPCWSTR) As BOOL
FtpRemoveDirectory(ByVal hConnect As HINTERNET,ByVal lpszDirectory As LPCSTR) As BOOL
FtpSetCurrentDirectory(ByVal hConnect As HINTERNET,ByVal lpszDirectory As LPCSTR) As BOOL
FtpSetCurrentDirectory(ByVal hConnect As HINTERNET,ByVal lpszDirectory As LPCWSTR) As BOOL
GdiComment(ByVal hdc As HDC,ByVal cbSize As UINT,ByVal lpData As BYTE PTR) As BOOL
GdiFlush() As BOOL
GdiGetBatchLimit() As DWORD
GdiSetBatchLimit(ByVal dwLimit As DWORD) As DWORD
GenerateConsoleCtrlEvent(ByVal dwCtrlEvent As DWORD,ByVal dwProcessGroupId As DWORD) As BOOL
GetAddressByName(ByVal dwNameSpace As DWORD,ByVal lpServiceType As LPGUID,ByVal lpServiceName As LPSTR,ByVal lpiProtocols As LPINT,ByVal dwResolution As DWORD,ByVal lpServiceAs As LPSERVICE_ASYNC_INFO,ByVal lpCsaddrBuffer As LPVOID,ByVal lpdwBufferLength As LPDWORD,ByVal lpAliasBuffer As LPTSTR,ByVal lpdwAliasBufferLength As LPDWORD) As INT_
GetAuditedPermissionsFromAcl(ByVal pAcl As PACL,ByVal pTrustee As PTRUSTEE_W,ByVal pSuccessfulAuditedRights As PACCESS_MASK,ByVal pFailedAuditRights As PACCESS_MASK) As DWORD
GetAdaptersInfo(ByVal pAdapterInfo As PIP_ADAPTER_INFO,ByVal pOutBufLen As PULONG) As DWORD
GetAncestor(ByVal hwnd As HWND,ByVal gaFlags As UINT) As HWND
GetActivePwrScheme(ByVal As PUINT) As BOOLEAN
GetAltTabInfo(ByVal hwnd As HWND,ByVal iItem As Integer,ByVal pati As PALTTABINFO,ByVal pszItemText As LPSTR,ByVal cchItemText As UINT) As BOOL
GetAtomName(ByVal nAtom As ATOM,ByVal lpBuffer As LPWSTR,ByVal nSize As Integer) As UINT
GetArcDirection(ByVal hdc As HDC) As Integer
GetAddressByName(ByVal dwNameSpace As DWORD,ByVal lpServiceType As LPGUID,ByVal lpServiceName As LPWSTR,ByVal lpiProtocols As LPINT,ByVal dwResolution As DWORD,ByVal lpServiceAs As LPSERVICE_ASYNC_INFO,ByVal lpCsaddrBuffer As LPVOID,ByVal lpdwBufferLength As LPDWORD,ByVal lpAliasBuffer As LPTSTR,ByVal lpdwAliasBufferLength As LPDWORD) As INT_
GetAce(ByVal pAcl As PACL,ByVal dwAceIndex As DWORD,ByVal pAce As LPVOID PTR) As BOOL
GetAdapterIndex(ByVal AdapterName As LPWSTR,ByVal IfIndex As PULONG) As DWORD
GetAtomName(ByVal nAtom As ATOM,ByVal lpBuffer As LPSTR,ByVal nSize As Integer) As UINT
GetAltTabInfo(ByVal hwnd As HWND,ByVal iItem As Integer,ByVal pati As PALTTABINFO,ByVal pszItemText As LPWSTR,ByVal cchItemText As UINT) As BOOL
GetAspectRatioFilterEx(ByVal hdc As HDC,ByVal lpAspectRatio As LPSIZE) As BOOL
GetAsyncKeyState(ByVal vKey As Integer) As SHORT
GetAclInformation(ByVal pAcl As PACL,ByVal pAclInformation As PVOID,ByVal nAclInformationLength As DWORD,ByVal dwAclInformationClass As ACL_INFORMATION_CLASS) As BOOL
GetACP() As UINT
GetActiveWindow() As HWND
GetAcceptExSockaddrs(ByVal lpOutputBuffer As PVOID,ByVal dwReceiveDataLength As DWORD,ByVal dwLocalAddressLength As DWORD,ByVal dwRemoteAddressLength As DWORD,ByVal LocalSockaddr As sockaddr PTR PTR,ByVal LocalSockaddrLength As LPINT,ByVal RemoteSockaddr As sockaddr PTR PTR,ByVal RemoteSockaddrLength As LPINT) 
GetActiveObject(ByVal rclsid As CLSID PTR,ByVal pvReserved As any PTR,ByVal ppunk As IUnknown PTR PTR) As HRESULT
GetAuditedPermissionsFromAcl(ByVal pAcl As PACL,ByVal pTrustee As PTRUSTEE_A,ByVal pSuccessfulAuditedRights As PACCESS_MASK,ByVal pFailedAuditRights As PACCESS_MASK) As DWORD
GetBkColor(ByVal hdc As HDC) As COLORREF
GetBkMode(ByVal hdc As HDC) As Integer
GetBinaryType(ByVal lpApplicationName As LPCWSTR,ByVal lpBinaryType As PDWORD) As BOOL
GetBestRoute(ByVal dwDestAddr As DWORD,ByVal dwSourceAddr As DWORD,ByVal pBestRoute As PMIB_IPFORWARDROW) As DWORD
GetBoundsRect(ByVal hdc As HDC,ByVal lprcBounds As LPRECT,ByVal flags As UINT) As UINT
GetBrushOrgEx(ByVal hDC As HDC,ByVal lpPoint As LPPOINT) As BOOL
GetBitmapBits(ByVal hBitmap As HBITMAP,ByVal dwCount As LONG,ByVal lpBits As PVOID) As LONG
GetBestInterface(ByVal dwDestAddr As IPAddr,ByVal pdwBestIfIndex As PDWORD) As DWORD
GetBinaryType(ByVal lpApplicationName As LPCSTR,ByVal lpBinaryType As PDWORD) As BOOL
GetBitmapDimensionEx(ByVal hBitmap As HBITMAP,ByVal lpDimension As LPSIZE) As BOOL
GetClassName(ByVal hwnd As HWND,ByVal lpClassName As LPWSTR,ByVal nMaxCount As Integer) As Integer
GetCurrentHwProfile(ByVal lpHwProfileInfo As LPHW_PROFILE_INFOA) As BOOL
GetClassInfo(ByVal hInstance As HINSTANCE,ByVal lpClassName As LPCSTR,ByVal lpWndClass As LPWNDCLASSA) As BOOL
GetCurrentThemeName(ByVal As LPWSTR,ByVal As Integer,ByVal As LPWSTR,ByVal As Integer,ByVal As LPWSTR,ByVal As Integer) As HRESULT
GetClipboardSequenceNumber() As DWORD
GetCommState(ByVal nCid As HANDLE,ByVal lpDCB As LPDCB) As BOOL
GetClipCursor(ByVal lprc As LPRECT) As BOOL
GetCursorPos(ByVal lpPoint As LPPOINT) As BOOL
GetCommProperties(ByVal hFile As HANDLE,ByVal lpCommProp As LPCOMMPROP) As BOOL
GetCommModemStatus(ByVal hFile As HANDLE,ByVal lpModemStat As PDWORD) As BOOL
GetCommMask(ByVal hFile As HANDLE,ByVal lpEvtMask As PDWORD) As BOOL
GetCommConfig(ByVal hCommDev As HANDLE,ByVal lpCC As LPCOMMCONFIG,ByVal lpdwSize As PDWORD) As BOOL
GetCommTimeouts(ByVal hFile As HANDLE,ByVal lpCommTimeouts As LPCOMMTIMEOUTS) As BOOL
GetCurrentActCtx(ByVal As HANDLE PTR) As BOOL
GetCharABCWidthsFloat(ByVal hdc As HDC,ByVal iFirstChar As UINT,ByVal iLastChar As UINT,ByVal lpABCF As LPABCFLOAT) As BOOL
GetCharacterPlacement(ByVal hdc As HDC,ByVal lpsz As LPCWSTR,ByVal n1 As Integer,ByVal n2 As Integer,ByVal lpGcpResults As LPGCP_RESULTSW,ByVal dw As DWORD) As DWORD
GetCharWidth32(ByVal hdc As HDC,ByVal iFirstChar As UINT,ByVal iLastChar As UINT,ByVal lpBuffer As LPINT) As BOOL
GetCharWidth(ByVal hdc As HDC,ByVal wFirstChar As UINT,ByVal wLastChar As UINT,ByVal lpBuffer As LPINT) As BOOL
GetCurrentProcess() As HANDLE
GetCapture() As HWND
GetCommandLine() As LPSTR
GetCompressedFileSize(ByVal lpFileName As LPCSTR,ByVal lpFileSizeHigh As PDWORD) As DWORD
GetComputerName(ByVal lpBuffer As LPSTR,ByVal nSize As PDWORD) As BOOL
GetCurrentProcessId() As DWORD
GetComputerNameEx(ByVal NameType As COMPUTER_NAME_FORMAT,ByVal lpBuffer As LPSTR,ByVal nSize As LPDWORD) As BOOL
GetCurrentDirectory(ByVal nBufferLength As DWORD,ByVal lpBuffer As LPSTR) As DWORD
GetCurrentThread() As HANDLE
GetCharWidthFloat(ByVal hdc As HDC,ByVal iFirstChar As UINT,ByVal iLastChar As UINT,ByVal pxBuffer As PFLOAT) As BOOL
GetCurrencyFormat(ByVal Locale As LCID,ByVal dwFlags As DWORD,ByVal lpValue As LPCWSTR,ByVal lpFormat As CURRENCYFMTW PTR,ByVal lpCurrencyStr As LPWSTR,ByVal cchCurrency As Integer) As Integer
GetCPInfoEx(ByVal CodePage As UINT,ByVal dwFlags As DWORD,ByVal lpCPInfoEx As LPCPINFOEXW) As BOOL
GetCurrentFiber() As PVOID
GetConvertStg(ByVal pStg As LPSTORAGE) As HRESULT
GetCharABCWidths(ByVal hdc As HDC,ByVal uFirstChar As UINT,ByVal uLastChar As UINT,ByVal lpabc As LPABC) As BOOL
GetCharABCWidthsFloat(ByVal hdc As HDC,ByVal iFirstChar As UINT,ByVal iLastChar As UINT,ByVal lpABCF As LPABCFLOAT) As BOOL
GetCursor() As HCURSOR
GetCharacterPlacement(ByVal hdc As HDC,ByVal lpsz As LPCSTR,ByVal n1 As Integer,ByVal n2 As Integer,ByVal lpGcpResults As LPGCP_RESULTSA,ByVal dw As DWORD) As DWORD
GetClassFile(ByVal szFilename As LPCOLESTR,ByVal pclsid As CLSID PTR) As HRESULT
GetCurrentThreadId() As DWORD
GetCharWidth32(ByVal hdc As HDC,ByVal iFirstChar As UINT,ByVal iLastChar As UINT,ByVal lpBuffer As LPINT) As BOOL
GetCurrentPositionEx(ByVal hdc As HDC,ByVal lpPoint As LPPOINT) As BOOL
GetCharABCWidths(ByVal hdc As HDC,ByVal uFirstChar As UINT,ByVal uLastChar As UINT,ByVal lpabc As LPABC) As BOOL
GetCaretBlinkTime() As UINT
GetCharWidth(ByVal hdc As HDC,ByVal wFirstChar As UINT,ByVal wLastChar As UINT,ByVal lpBuffer As LPINT) As BOOL
GetCharWidthFloat(ByVal hdc As HDC,ByVal iFirstChar As UINT,ByVal iLastChar As UINT,ByVal pxBuffer As PFLOAT) As BOOL
GetClipboardViewer() As HWND
GetClassInfoEx(ByVal hinstance As HINSTANCE,ByVal lpcstr As LPCSTR,ByVal lpwndclassexa As LPWNDCLASSEXA) As BOOL
GetCurrentHwProfile(ByVal lpHwProfileInfo As LPHW_PROFILE_INFOW) As BOOL
GetClassLong(ByVal hwnd As HWND,ByVal nIndex As Integer) As DWORD
GetClassName(ByVal hwnd As HWND,ByVal lpClassName As LPSTR,ByVal nMaxCount As Integer) As Integer
GetClipboardFormatName(ByVal wFormat As UINT,ByVal lpString As LPSTR,ByVal nMaxCount As Integer) As Integer
GetCurrentDirectory(ByVal nBufferLength As DWORD,ByVal lpBuffer As LPWSTR) As DWORD
GetCurrentPowerPolicies(ByVal As PGLOBAL_POWER_POLICY,ByVal As PPOWER_POLICY) As BOOLEAN
GetComputerNameEx(ByVal NameType As COMPUTER_NAME_FORMAT,ByVal lpBuffer As LPWSTR,ByVal nSize As LPDWORD) As BOOL
GetComputerName(ByVal lpBuffer As LPWSTR,ByVal nSize As PDWORD) As BOOL
GetCurrentObject(ByVal hdc As HDC,ByVal uObjectType As UINT) As HGDIOBJ
GetColorSpace(ByVal hdc As HDC) As HANDLE
GetCurrencyFormat(ByVal Locale As LCID,ByVal dwFlags As DWORD,ByVal lpValue As LPCSTR,ByVal lpFormat As CURRENCYFMTA PTR,ByVal lpCurrencyStr As LPSTR,ByVal cchCurrency As Integer) As Integer
GetColorAdjustment(ByVal hdc As HDC,ByVal lpca As LPCOLORADJUSTMENT) As BOOL
GetCPInfoEx(ByVal CodePage As UINT,ByVal dwFlags As DWORD,ByVal lpCPInfoEx As LPCPINFOEXA) As BOOL
GetConsoleCP() As UINT
GetConsoleCursorInfo(ByVal hConsoleOutput As HANDLE,ByVal lpConsoleCursorInfo As PCONSOLE_CURSOR_INFO) As BOOL
GetConsoleMode(ByVal hConsoleHandle As HANDLE,ByVal lpMode As PDWORD) As BOOL
GetConsoleOutputCP() As UINT
GetConsoleScreenBufferInfo(ByVal hConsoleOutput As HANDLE,ByVal lpConsoleScreenBufferInfo As PCONSOLE_SCREEN_BUFFER_INFO) As BOOL
GetConsoleDisplayMode(ByVal As LPDWORD) As BOOL
GetConsoleWindow() As HWND
GetClipRgn(ByVal hdc As HDC,ByVal hRgn As HRGN) As Integer
GetConsoleTitle(ByVal lpConsoleTitle As LPWSTR,ByVal nSize As DWORD) As DWORD
GetClipBox(ByVal hdc As HDC,ByVal lpRect As LPRECT) As Integer
GetCPInfo(ByVal CodePage As UINT,ByVal lpCPInfo As LPCPINFO) As BOOL
GetClipboardFormatName(ByVal wFormat As UINT,ByVal lpString As LPWSTR,ByVal nMaxCount As Integer) As Integer
GetConsoleTitle(ByVal lpConsoleTitle As LPSTR,ByVal nSize As DWORD) As DWORD
GetClipboardOwner() As HWND
GetComputerObjectName(ByVal NameFormat As EXTENDED_NAME_FORMAT,ByVal lpNameBuffer As LPWSTR,ByVal nSize As PULONG) As BOOLEAN
GetClassLong(ByVal hwnd As HWND,ByVal nIndex As Integer) As DWORD
GetCompressedFileSize(ByVal lpFileName As LPCWSTR,ByVal lpFileSizeHigh As PDWORD) As DWORD
GetClassInfoEx(ByVal hinstance As HINSTANCE,ByVal lpcstr As LPCWSTR,ByVal lpwndclassexa As LPWNDCLASSEXW) As BOOL
GetClassInfo(ByVal hInstance As HINSTANCE,ByVal lpClassName As LPCWSTR,ByVal lpWndClass As LPWNDCLASSW) As BOOL
GetCommandLine() As LPWSTR
GetCaretPos(ByVal lpPoint As LPPOINT) As BOOL
GetClassWord(ByVal hwnd As HWND,ByVal nIndex As Integer) As WORD
GetClientRect(ByVal hwnd As HWND,ByVal lpRect As LPRECT) As BOOL
GetComboBoxInfo(ByVal hwndCombo As HWND,ByVal pcbi As PCOMBOBOXINFO) As BOOL
GetCursorInfo(ByVal pci As PCURSORINFO) As BOOL
GetClipboardData(ByVal wFormat As UINT) As HANDLE
GetComputerObjectName(ByVal NameFormat As EXTENDED_NAME_FORMAT,ByVal lpNameBuffer As LPSTR,ByVal nSize As PULONG) As BOOLEAN
GetDC(ByVal hwnd As HWND) As HDC
GetDllDirectory(ByVal As DWORD,ByVal As LPWSTR) As DWORD
GetDlgItemText(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer,ByVal lpString As LPWSTR,ByVal nMaxCount As Integer) As UINT
GetDCEx(ByVal hwnd As HWND,ByVal hrgnclip As HRGN,ByVal fdwOptions As DWORD) As HDC
GetDllDirectory(ByVal As DWORD,ByVal As LPSTR) As DWORD
GetDeviceDriverFileName(ByVal ImageBase As LPVOID,ByVal lpFilename As LPSTR,ByVal nSize As DWORD) As DWORD
GetDeviceCaps(ByVal hdc As HDC,ByVal nIndex As Integer) As Integer
GetDialogBaseUnits() As Integer
GetDCOrgEx(ByVal hdc As HDC,ByVal lpPoint As LPPOINT) As BOOL
GetDesktopWindow() As HWND
GetDeviceDriverFileName(ByVal ImageBase As LPVOID,ByVal lpFilename As LPWSTR,ByVal nSize As DWORD) As DWORD
GetDlgCtrlID(ByVal hwnd As HWND) As Integer
GetDlgItem(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer) As HWND
GetDlgItemInt(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer,ByVal lpTranslated As PBOOL,ByVal bSigned As BOOL) As UINT
GetDateFormat(ByVal Locale As LCID,ByVal dwFlags As DWORD,ByVal lpDate As SYSTEMTIME PTR,ByVal lpFormat As LPCWSTR,ByVal lpDateStr As LPWSTR,ByVal cchDate As Integer) As Integer
GetDeviceDriverBaseName(ByVal ImageBase As LPVOID,ByVal lpBaseName As LPWSTR,ByVal nSize As DWORD) As DWORD
GetDriveType(ByVal nDrive As LPCSTR) As UINT
GetDiskFreeSpaceEx(ByVal lpDirectoryName As LPCSTR,ByVal lpFreeBytesAvailableToCaller As PULARGE_INTEGER,ByVal lpTotalNumberOfBytes As PULARGE_INTEGER,ByVal lpTotalNumberOfFreeBytes As PULARGE_INTEGER) As BOOL
GetDiskFreeSpace(ByVal lpRootPathName As LPCSTR,ByVal lpSectorsPerCluster As PDWORD,ByVal lpBytesPerSector As PDWORD,ByVal lpNumberOfFreeClusters As PDWORD,ByVal lpTotalNumberOfClusters As PDWORD) As BOOL
GetDefaultCommConfig(ByVal lpszName As LPCSTR,ByVal lpCC As LPCOMMCONFIG,ByVal lpdwSize As PDWORD) As BOOL
GetDlgItemText(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer,ByVal lpString As LPSTR,ByVal nMaxCount As Integer) As UINT
GetDateFormat(ByVal Locale As LCID,ByVal dwFlags As DWORD,ByVal lpDate As SYSTEMTIME PTR,ByVal lpFormat As LPCSTR,ByVal lpDateStr As LPSTR,ByVal cchDate As Integer) As Integer
GetDeviceDriverBaseName(ByVal ImageBase As LPVOID,ByVal lpBaseName As LPSTR,ByVal nSize As DWORD) As DWORD
GetDefaultCommConfig(ByVal lpszName As LPCWSTR,ByVal lpCC As LPCOMMCONFIG,ByVal lpdwSize As PDWORD) As BOOL
GetDIBColorTable(ByVal hDC As HDC,ByVal un1 As UINT,ByVal un2 As UINT,ByVal pRGBQuad As RGBQUAD PTR) As UINT
GetDeviceID(ByVal pGuidSrc As LPCGUID,ByVal pGuidDest As LPGUID) As HRESULT
GetDIBits(ByVal aHDC As HDC,ByVal hBitmap As HBITMAP,ByVal nStartScan As UINT,ByVal nNumScans As UINT,ByVal lpBits As PVOID,ByVal lpBI As LPBITMAPINFO,ByVal wUsage As UINT) As Integer
GetDiskFreeSpace(ByVal lpRootPathName As LPCWSTR,ByVal lpSectorsPerCluster As PDWORD,ByVal lpBytesPerSector As PDWORD,ByVal lpNumberOfFreeClusters As PDWORD,ByVal lpTotalNumberOfClusters As PDWORD) As BOOL
GetDiskFreeSpaceEx(ByVal lpDirectoryName As LPCWSTR,ByVal lpFreeBytesAvailableToCaller As PULARGE_INTEGER,ByVal lpTotalNumberOfBytes As PULARGE_INTEGER,ByVal lpTotalNumberOfFreeBytes As PULARGE_INTEGER) As BOOL
GetDriveType(ByVal nDrive As LPCWSTR) As UINT
GetDoubleClickTime() As UINT
GetDeviceGammaRamp(ByVal hdc As HDC,ByVal lpv As PVOID) As BOOL
GetDriverModuleHandle(ByVal hDriver As HDRVR) As HMODULE
GetEffectiveRightsFromAcl(ByVal pAcl As PACL,ByVal pTrustee As PTRUSTEE_W,ByVal pAccessRights As PACCESS_MASK) As DWORD
GetEnvironmentStrings() As LPWSTR
GetEnhMetaFileDescription(ByVal hemf As HENHMETAFILE,ByVal cchBuffer As UINT,ByVal lpszDescription As LPSTR) As UINT
GetEnhMetaFilePixelFormat(ByVal henhmetafile As HENHMETAFILE,ByVal uint As DWORD,ByVal PIXELFORMATDESCRIPTOR As PIXELFORMATDESCRIPTOR PTR) As UINT
GetEnhMetaFilePaletteEntries(ByVal hemf As HENHMETAFILE,ByVal cEntries As UINT,ByVal lppe As LPPALETTEENTRY) As UINT
GetEnhMetaFile(ByVal lpszMetaFile As LPCSTR) As HENHMETAFILE
GetEnvironmentStrings() As LPSTR
GetEnvironmentVariable(ByVal lpName As LPCSTR,ByVal lpBuffer As LPSTR,ByVal nSize As DWORD) As DWORD
GetExplicitEntriesFromAcl(ByVal pAcl As PACL,ByVal pcCountOfExplicitEntries As PULONG,ByVal pListOfExplicitEntries As PEXPLICIT_ACCESS_W PTR) As DWORD
GetEffectiveClientRect(ByVal hWnd As HWND,ByVal lprc As LPRECT,ByVal lpInfo As LPINT) 
GetExitCodeThread(ByVal hThread As HANDLE,ByVal lpExitCode As PDWORD) As BOOL
GetExitCodeProcess(ByVal hProcess As HANDLE,ByVal lpExitCode As PDWORD) As BOOL
GetExpandedName(ByVal lpszSource As LPWSTR,ByVal lpszBuffer As LPWSTR) As INT_
GetEnvironmentVariable(ByVal lpName As LPCWSTR,ByVal lpBuffer As LPWSTR,ByVal nSize As DWORD) As DWORD
GetExpandedName(ByVal lpszSource As LPSTR,ByVal lpszBuffer As LPSTR) As INT_
GetErrorInfo(ByVal dwReserved As uinteger,ByVal pperrinfo As LPERRORINFO PTR) As HRESULT
GetEnhMetaFileDescription(ByVal hemf As HENHMETAFILE,ByVal cchBuffer As UINT,ByVal lpszDescription As LPWSTR) As UINT
GetEnhMetaFileBits(ByVal hemf As HENHMETAFILE,ByVal cbBuffer As UINT,ByVal lpbBuffer As LPBYTE) As UINT
GetEnhMetaFile(ByVal lpszMetaFile As LPCWSTR) As HENHMETAFILE
GetExplicitEntriesFromAcl(ByVal pAcl As PACL,ByVal pcCountOfExplicitEntries As PULONG,ByVal pListOfExplicitEntries As PEXPLICIT_ACCESS_A PTR) As DWORD
GetEffectiveRightsFromAcl(ByVal pAcl As PACL,ByVal pTrustee As PTRUSTEE_A,ByVal pAccessRights As PACCESS_MASK) As DWORD
GetEnhMetaFileHeader(ByVal hemf As HENHMETAFILE,ByVal cbBuffer As UINT,ByVal lpemh As LPENHMETAHEADER) As UINT
GetFileTime(ByVal hFile As HANDLE,ByVal lpCreationTime As LPFILETIME,ByVal lpLastAccessTime As LPFILETIME,ByVal lpLastWriteTime As LPFILETIME) As BOOL
GetFileSecurity(ByVal lpFileName As LPCSTR,ByVal RequestedInformation As SECURITY_INFORMATION,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal nLength As DWORD,ByVal lpnLengthNeeded As PDWORD) As BOOL
GetFullPathName(ByVal lpFileName As LPCWSTR,ByVal nBufferLength As DWORD,ByVal lpBuffer As LPWSTR,ByVal lpFilePart As LPWSTR PTR) As DWORD
GetFileSize(ByVal hFile As HANDLE,ByVal lpFileSizeHigh As PDWORD) As DWORD
GetFileSizeEx(ByVal hFile As HANDLE,ByVal lpFileSize As PLARGE_INTEGER) As BOOL
GetFileAttributes(ByVal lpFileName As LPCWSTR) As DWORD
GetFileAttributesEx(ByVal lpFileName As LPCWSTR,ByVal fInfoLevelId As GET_FILEEX_INFO_LEVELS,ByVal lpFileInformation As PVOID) As BOOL
GetFileSecurity(ByVal lpFileName As LPCWSTR,ByVal RequestedInformation As SECURITY_INFORMATION,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal nLength As DWORD,ByVal lpnLengthNeeded As PDWORD) As BOOL
GetFileVersionInfo(ByVal lptstrFilename As LPSTR,ByVal dwHandle As DWORD,ByVal dwLen As DWORD,ByVal lpData As PVOID) As BOOL
GetFileVersionInfoSize(ByVal lptstrFilename As LPWSTR,ByVal lpdwHandle As PDWORD) As DWORD
GetFontUnicodeRanges(ByVal hdc As HDC,ByVal LPGLYPHSET As LPGLYPHSET) As DWORD
GetFileTitle(ByVal lpszFile As LPCWSTR,ByVal lpszTitle As LPWSTR,ByVal cbBuf As WORD) As short
GetFocus() As HWND
GetFileTitle(ByVal lpszFile As LPCSTR,ByVal lpszTitle As LPSTR,ByVal cbBuf As WORD) As short
GetFontLanguageInfo(ByVal hdc As HDC) As DWORD
GetFontData(ByVal hdc As HDC,ByVal dwTable As DWORD,ByVal dwOffset As DWORD,ByVal lpvBuffer As PVOID,ByVal cbData As DWORD) As DWORD
GetFirmwareEnvironmentVariable(ByVal As LPCSTR,ByVal As LPCSTR,ByVal As PVOID,ByVal As DWORD) As DWORD
GetFirmwareEnvironmentVariable(ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As PVOID,ByVal As DWORD) As DWORD
GetFullPathName(ByVal lpFileName As LPCSTR,ByVal nBufferLength As DWORD,ByVal lpBuffer As LPSTR,ByVal lpFilePart As LPSTR PTR) As DWORD
GetForm(ByVal hPrinter As HANDLE,ByVal pFormName As LPWSTR,ByVal Level As DWORD,ByVal pForm As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD) As BOOL
GetForegroundWindow() As HWND
GetForm(ByVal hPrinter As HANDLE,ByVal pFormName As LPSTR,ByVal Level As DWORD,ByVal pForm As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD) As BOOL
GetFiberData() As PVOID
GetFileAttributesEx(ByVal lpFileName As LPCSTR,ByVal fInfoLevelId As GET_FILEEX_INFO_LEVELS,ByVal lpFileInformation As PVOID) As BOOL
GetFileInformationByHandle(ByVal hFile As HANDLE,ByVal lpFileInformation As LPBY_HANDLE_FILE_INFORMATION) As BOOL
GetFileVersionInfo(ByVal lptstrFilename As LPWSTR,ByVal dwHandle As DWORD,ByVal dwLen As DWORD,ByVal lpData As PVOID) As BOOL
GetFileVersionInfoSize(ByVal lptstrFilename As LPSTR,ByVal lpdwHandle As PDWORD) As DWORD
GetFileAttributes(ByVal lpFileName As LPCSTR) As DWORD
GetFriendlyIfIndex(ByVal IfIndex As DWORD) As DWORD
GetFileType(ByVal hFile As HANDLE) As DWORD
GetGlyphIndices(ByVal hdc As HDC,ByVal lpcstr As LPCSTR,ByVal ByValt As Integer,ByVal lpword As LPWORD,ByVal dword As DWORD) As DWORD
GetGuiResources(ByVal hProcess As HANDLE,ByVal uiFlags As DWORD) As DWORD
GetGlyphIndices(ByVal hdc As HDC,ByVal lpcstr As LPCWSTR,ByVal ByValt As Integer,ByVal lpword As LPWORD,ByVal dword As DWORD) As DWORD
GetGraphicsMode(ByVal hdc As HDC) As Integer
GetGlyphOutline(ByVal hdc As HDC,ByVal uChar As UINT,ByVal fuFormat As UINT,ByVal lpgm As LPGLYPHMETRICS,ByVal cbBuffer As DWORD,ByVal lpBuffer As PVOID,ByVal lpmat2 As MAT2 PTR) As DWORD
GetHGlobalFromILockBytes(ByVal plkbyt As LPLOCKBYTES,ByVal phglobal As HGLOBAL PTR) As HRESULT
GetHGlobalFromStream(ByVal pstm As LPSTREAM,ByVal phglobal As HGLOBAL PTR) As HRESULT
GetHandleInformation(ByVal hObject As HANDLE,ByVal lpdwFlags As PDWORD) As BOOL
gethostbyaddr(ByVal addr As zstring PTR,ByVal len As Integer,ByVal type As Integer) As hostent PTR
gethostbyname(ByVal name As zstring PTR) As hostent PTR
gethostname(ByVal name As zstring PTR,ByVal namelen As Integer) As Integer
gethostbyaddr(ByVal addr As zstring PTR,ByVal len As Integer,ByVal type As Integer) As hostent PTR
gethostbyname(ByVal name As zstring PTR) As hostent PTR
GetImageUnusedHeaderBytes(ByVal LoadedImage As PLOADED_IMAGE,ByVal SizeUnusedHeaderBytes As LPDWORD) As DWORD
GetICMProfile(ByVal hdc As HDC,ByVal dw As DWORD,ByVal lpStr As LPWSTR) As BOOL
GetIfEntry(ByVal pIfRow As PMIB_IFROW) As DWORD
GetIpForwardTable(ByVal pIpForwardTable As PMIB_IPFORWARDTABLE,ByVal pdwSize As PULONG,ByVal border As BOOL) As DWORD
GetIpAddrTable(ByVal pIpAddrTable As PMIB_IPADDRTABLE,ByVal pdwSize As PULONG,ByVal border As BOOL) As DWORD
GetImageConfigInformation(ByVal LoadedImage As PLOADED_IMAGE,ByVal ImageConfigInformation As PIMAGE_LOAD_CONFIG_DIRECTORY) As BOOL
GetInputState() As BOOL
GetInterfaceInfo(ByVal pIfTable As PIP_INTERFACE_INFO,ByVal dwOutBufLen As PULONG) As DWORD
GetIfTable(ByVal pIfTable As PMIB_IFTABLE,ByVal pdwSize As PULONG,ByVal border As BOOL) As DWORD
GetIcmpStatistics(ByVal pStats As PMIB_ICMP) As DWORD
GetICMProfile(ByVal hdc As HDC,ByVal dw As DWORD,ByVal lpStr As LPSTR) As BOOL
GetIconInfo(ByVal hIcon As HICON,ByVal piconinfo As PICONINFO) As BOOL
GetIpStatistics(ByVal pStats As PMIB_IPSTATS) As DWORD
GetIpNetTable(ByVal pIpNetTable As PMIB_IPNETTABLE,ByVal pdwSize As PULONG,ByVal border As BOOL) As DWORD
GetJob(ByVal hPrinter As HANDLE,ByVal JobId As DWORD,ByVal Level As DWORD,ByVal pJob As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD) As BOOL
GetKeyboardLayoutName(ByVal pwszKLID As LPWSTR) As BOOL
GetKeyboardLayout(ByVal dwLayout As DWORD) As HKL
GetKBCodePage() As UINT
GetKeyNameText(ByVal lParam As LONG,ByVal lpBuffer As LPWSTR,ByVal nSize As Integer) As Integer
GetKeyboardType(ByVal nTypeFlag As Integer) As Integer
GetKerningPairs(ByVal hdc As HDC,ByVal cPairs As DWORD,ByVal lpkrnpair As LPKERNINGPAIR) As DWORD
GetKeyState(ByVal nVirtKey As Integer) As SHORT
GetKeyboardLayoutList(ByVal nBuff As Integer,ByVal lpList As HKL PTR) As UINT
GetKeyNameText(ByVal lParam As LONG,ByVal lpBuffer As LPSTR,ByVal nSize As Integer) As Integer
GetKeyboardLayoutName(ByVal pwszKLID As LPSTR) As BOOL
GetKeyboardState(ByVal pbKeyState As PBYTE) As BOOL
GetKerningPairs(ByVal hdc As HDC,ByVal cPairs As DWORD,ByVal lpkrnpair As LPKERNINGPAIR) As DWORD
GetKernelObjectSecurity(ByVal Handle As HANDLE,ByVal RequestedInformation As SECURITY_INFORMATION,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal nLength As DWORD,ByVal lpnLengthNeeded As PDWORD) As BOOL
GetLongPathName(ByVal lpszShortPath As LPCSTR,ByVal lpszLongPath As LPSTR,ByVal cchBuffer As DWORD) As DWORD
GetLargestConsoleWindowSize(ByVal hConsoleOutput As HANDLE) As COORD
GetLogicalDriveStrings(ByVal nBufferLength As DWORD,ByVal lpBuffer As LPSTR) As DWORD
GetLongPathName(ByVal lpszShortPath As LPCWSTR,ByVal lpszLongPath As LPWSTR,ByVal cchBuffer As DWORD) As DWORD
GetLastInputInfo(ByVal plii As PLASTINPUTINFO) As BOOL
GetLocaleInfo(ByVal Locale As LCID,ByVal LCType As LCTYPE,ByVal lpLCData As LPSTR,ByVal cchData As Integer) As Integer
GetLocalTime(ByVal lpSystemTime As LPSYSTEMTIME) 
GetLayeredWindowAttributes(ByVal As HWND,ByVal As COLORREF PTR,ByVal As BYTE PTR,ByVal As DWORD PTR) As BOOL
GetLogColorSpace(ByVal hcolorspace As HCOLORSPACE,ByVal lplogcolorspace As LPLOGCOLORSPACEA,ByVal dw As DWORD) As BOOL
GetListBoxInfo(ByVal hwnd As HWND) As DWORD
GetLogicalDrives() As DWORD
GetLengthSid(ByVal pSid As PSID) As DWORD
GetLogicalDriveStrings(ByVal nBufferLength As DWORD,ByVal lpBuffer As LPWSTR) As DWORD
GetLogColorSpace(ByVal hcolorspace As HCOLORSPACE,ByVal lplogcolorspace As LPLOGCOLORSPACEW,ByVal dw As DWORD) As BOOL
GetLastActivePopup(ByVal hwndOwnder As HWND) As HWND
GetLocaleInfo(ByVal Locale As LCID,ByVal LCType As LCTYPE,ByVal lpLCData As LPWSTR,ByVal cchData As Integer) As Integer
GetMenuString(ByVal hMenu As HMENU,ByVal wIDItem As UINT,ByVal lpString As LPWSTR,ByVal nMaxCount As Integer,ByVal wFlags As UINT) As Integer
GetMenuItemID(ByVal hMenu As HMENU,ByVal nPos As Integer) As UINT
GetMenuDefaultItem(ByVal hMenu As HMENU,ByVal fByPos As UINT,ByVal gmdiFlags As UINT) As UINT
GetModuleInformation(ByVal hProcess As HANDLE,ByVal hModule As HMODULE,ByVal lpmodinfo As LPMODULEINFO,ByVal cb As DWORD) As BOOL
GetMenuInfo(ByVal hmenu As HMENU,ByVal LPMENUINFO As LPMENUINFO) As BOOL
GetModuleHandle(ByVal lpModuleName As LPCWSTR) As HMODULE
GetModuleHandleEx(ByVal As DWORD,ByVal As LPCSTR,ByVal As HMODULE PTR) As BOOL
GetMessageTime() As LONG
GetMappedFileName(ByVal hProcess As HANDLE,ByVal lpv As LPVOID,ByVal lpFilename As LPWSTR,ByVal nSize As DWORD) As DWORD
GetModuleFileNameEx(ByVal hProcess As HANDLE,ByVal hModule As HMODULE,ByVal lpFilename As LPWSTR,ByVal nSize As DWORD) As DWORD
GetModuleBaseName(ByVal hProcess As HANDLE,ByVal hModule As HMODULE,ByVal lpBaseName As LPWSTR,ByVal nSize As DWORD) As DWORD
GetModuleBaseName(ByVal hProcess As HANDLE,ByVal hModule As HMODULE,ByVal lpBaseName As LPSTR,ByVal nSize As DWORD) As DWORD
GetModuleFileName(ByVal hModule As HINSTANCE,ByVal lpFileName As LPSTR,ByVal nSize As DWORD) As DWORD
GetMouseMovePointsEx(ByVal cbSize As UINT,ByVal lppt As LPMOUSEMOVEPOINT,ByVal lpptBuf As LPMOUSEMOVEPOINT,ByVal nBufPoints As Integer,ByVal resolution As DWORD) As Integer
GetMonitorInfo(ByVal hMonitor As HMONITOR,ByVal lpmi As LPMONITORINFO) As BOOL
GetModuleHandle(ByVal lpModuleName As LPCSTR) As HMODULE
GetModuleFileName(ByVal hModule As HINSTANCE,ByVal lpFileName As LPWSTR,ByVal nSize As DWORD) As DWORD
GetMonitorInfo(ByVal hMonitor As HMONITOR,ByVal lpmi As LPMONITORINFO) As BOOL
GetMetaFile(ByVal lpFileName As LPCWSTR) As HMETAFILE
GetMappedFileName(ByVal hProcess As HANDLE,ByVal lpv As LPVOID,ByVal lpFilename As LPSTR,ByVal nSize As DWORD) As DWORD
GetMenuState(ByVal hMenu As HMENU,ByVal wID As UINT,ByVal wFlags As UINT) As UINT
GetMessageExtraInfo() As LONG
GetMenuItemInfo(ByVal hMenu As HMENU,ByVal un As UINT,ByVal fBoolean As BOOL,ByVal lpMenuItemInfo As LPMENUITEMINFOA) As BOOL
GetMailslotInfo(ByVal hMailslot As HANDLE,ByVal lpMaxMessageSize As PDWORD,ByVal lpNextSize As PDWORD,ByVal lpMessageCount As PDWORD,ByVal lpReadTimeout As PDWORD) As BOOL
GetMenuString(ByVal hMenu As HMENU,ByVal wIDItem As UINT,ByVal lpString As LPSTR,ByVal nMaxCount As Integer,ByVal wFlags As UINT) As Integer
GetMenuCheckMarkDimensions() As LONG
GetMessage(ByVal lpMsg As LPMSG,ByVal hwnd As HWND,ByVal wMsgFilterMin As UINT,ByVal wMsgFilterMax As UINT) As BOOL
GetMultipleTrustee(ByVal pTrustee As PTRUSTEE_A) As PTRUSTEE_A
GetMultipleTrusteeOperation(ByVal pTrustee As PTRUSTEE_A) As MULTIPLE_TRUSTEE_OPERATION
GetMetaFile(ByVal lpFileName As LPCSTR) As HMETAFILE
GetMenuContextHelpId(ByVal hMenu As HMENU) As DWORD
GetMessagePos() As DWORD
GetMenuBarInfo(ByVal hwnd As HWND,ByVal idObject As LONG,ByVal idItem As LONG,ByVal pmbi As PMENUBARINFO) As BOOL
GetMapMode(ByVal hdc As HDC) As Integer
GetMetaFileBitsEx(ByVal hMF As HMETAFILE,ByVal nSize As UINT,ByVal lpvData As PVOID) As UINT
GetMetaRgn(ByVal hdc As HDC,ByVal hRgn As HRGN) As Integer
GetMiterLimit(ByVal hdc As HDC,ByVal peLimit As PFLOAT) As BOOL
GetMultipleTrusteeOperation(ByVal pTrustee As PTRUSTEE_W) As MULTIPLE_TRUSTEE_OPERATION
GetMultipleTrustee(ByVal pTrustee As PTRUSTEE_W) As PTRUSTEE_W
GetModuleFileNameEx(ByVal hProcess As HANDLE,ByVal hModule As HMODULE,ByVal lpFilename As LPSTR,ByVal nSize As DWORD) As DWORD
GetMenu(ByVal hwnd As HWND) As HMENU
GetModuleHandleEx(ByVal As DWORD,ByVal As LPCWSTR,ByVal As HMODULE PTR) As BOOL
GetMenuItemCount(ByVal hMenu As HMENU) As Integer
GetMenuItemInfo(ByVal hMenu As HMENU,ByVal un As UINT,ByVal fBoolean As BOOL,ByVal lpMenuItemInfo As LPMENUITEMINFOW) As BOOL
GetMenuItemRect(ByVal hWnd As HWND,ByVal hMenu As HMENU,ByVal uItem As UINT,ByVal lprcItem As LPRECT) As BOOL
GetMessage(ByVal lpMsg As LPMSG,ByVal hwnd As HWND,ByVal wMsgFilterMin As UINT,ByVal wMsgFilterMax As UINT) As BOOL
GetNearestPaletteIndex(ByVal hPalette As HPALETTE,ByVal crColor As COLORREF) As UINT
GetNumberOfConsoleInputEvents(ByVal hConsoleInput As HANDLE,ByVal lpNumberOfEvents As PDWORD) As BOOL
GetNamedSecurityInfo(ByVal pObjectName As LPSTR,ByVal ObjectType As SE_OBJECT_TYPE,ByVal SecurityInfo As SECURITY_INFORMATION,ByVal ppsidOwner As PSID PTR,ByVal ppsidGroup As PSID PTR,ByVal ppDacl As PACL PTR,ByVal ppSacl As PACL PTR,ByVal ppSecurityDescriptor As PSECURITY_DESCRIPTOR PTR) As DWORD
GetNextDlgGroupItem(ByVal hDlg As HWND,ByVal hCtl As HWND,ByVal bPrevious As BOOL) As HWND
GetNumberOfInterfaces(ByVal pdwNumIf As PDWORD) As DWORD
GetNetworkParams(ByVal pFixedInfo As PFIXED_INFO,ByVal pOutBufLen As PULONG) As DWORD
GetNumberFormat(ByVal Locale As LCID,ByVal dwFlags As DWORD,ByVal lpValue As LPCWSTR,ByVal lpFormat As NUMBERFMTW PTR,ByVal lpNumberStr As LPWSTR,ByVal cchNumber As Integer) As Integer
GetNumberOfEventLogRecords(ByVal hEventLog As HANDLE,ByVal NumberOfRecords As PDWORD) As BOOL
GetNamedPipeInfo(ByVal hNamedPipe As HANDLE,ByVal lpFlags As PDWORD,ByVal lpOutBufferSize As PDWORD,ByVal lpInBufferSize As PDWORD,ByVal lpMaxInstances As PDWORD) As BOOL
GetNextDlgTabItem(ByVal hDlg As HWND,ByVal hCtl As HWND,ByVal bPrevious As BOOL) As HWND
GetNamedPipeHandleState(ByVal hNamedPipe As HANDLE,ByVal lpState As PDWORD,ByVal lpCurInstances As PDWORD,ByVal lpMaxCollectionCount As PDWORD,ByVal lpCollectDataTimeout As PDWORD,ByVal lpUserName As LPWSTR,ByVal nMaxUserNameSize As DWORD) As BOOL
GetNamedSecurityInfo(ByVal pObjectName As LPWSTR,ByVal ObjectType As SE_OBJECT_TYPE,ByVal SecurityInfo As SECURITY_INFORMATION,ByVal ppsidOwner As PSID PTR,ByVal ppsidGroup As PSID PTR,ByVal ppDacl As PACL PTR,ByVal ppSacl As PACL PTR,ByVal ppSecurityDescriptor As PSECURITY_DESCRIPTOR PTR) As DWORD
GetNamedPipeHandleState(ByVal hNamedPipe As HANDLE,ByVal lpState As PDWORD,ByVal lpCurInstances As PDWORD,ByVal lpMaxCollectionCount As PDWORD,ByVal lpCollectDataTimeout As PDWORD,ByVal lpUserName As LPSTR,ByVal nMaxUserNameSize As DWORD) As BOOL
GetNumberOfConsoleMouseButtons(ByVal lpNumberOfMouseButtons As PDWORD) As BOOL
GetNumberFormat(ByVal Locale As LCID,ByVal dwFlags As DWORD,ByVal lpValue As LPCSTR,ByVal lpFormat As NUMBERFMTA PTR,ByVal lpNumberStr As LPSTR,ByVal cchNumber As Integer) As Integer
GetNativeSystemInfo(ByVal As LPSYSTEM_INFO) 
GetNearestColor(ByVal hdc As HDC,ByVal crColor As COLORREF) As COLORREF
GetOleaccVersionInfo(ByVal pVer As DWORD PTR,ByVal pBuild As DWORD PTR) 
GetOldestEventLogRecord(ByVal hEventLog As HANDLE,ByVal OldestRecord As PDWORD) As BOOL
GetOpenClipboardWindow() As HWND
GetOverlappedResult(ByVal hFile As HANDLE,ByVal lpOverlapped As LPOVERLAPPED,ByVal lpNumberOfBytesTransferred As PDWORD,ByVal bWait As BOOL) As BOOL
GetOutlineTextMetrics(ByVal hdc As HDC,ByVal cbData As UINT,ByVal lpotm As LPOUTLINETEXTMETRICW) As UINT
GetOEMCP() As UINT
GetObjectType(ByVal hgdiobj As HGDIOBJ) As DWORD
GetOpenFileNamePreview(ByVal lpofn As LPOPENFILENAMEW) As BOOL
GetOpenFileNamePreview(ByVal lpofn As LPOPENFILENAMEA) As BOOL
GetOpenFileName(ByVal pOpenfilename As LPOPENFILENAMEW) As BOOL
GetObject(ByVal hObject As HGDIOBJ,ByVal nCount As Integer,ByVal lpObject As PVOID) As Integer
GetOutlineTextMetrics(ByVal hdc As HDC,ByVal cbData As UINT,ByVal lpotm As LPOUTLINETEXTMETRICA) As UINT
GetOpenFileName(ByVal pOpenfilename As LPOPENFILENAMEA) As BOOL
GetObject(ByVal hObject As HGDIOBJ,ByVal nCount As Integer,ByVal lpObject As PVOID) As Integer
GetPriorityClass(ByVal hProcess As HANDLE) As DWORD
GetProcessVersion(ByVal ProcessId As DWORD) As DWORD
GetPriorityClipboardFormat(ByVal lpPriorityList As UINT PTR,ByVal nCount As Integer) As Integer
GetProcessPriorityBoost(ByVal hProcess As HANDLE,ByVal pDisablePriorityBoost As PBOOL) As BOOL
GetProcessHeap() As HANDLE
GetPrinterData(ByVal hPrinter As HANDLE,ByVal pValueName As LPWSTR,ByVal pType As PDWORD,ByVal pData As PBYTE,ByVal nSize As DWORD,ByVal pcbNeeded As PDWORD) As DWORD
GetPrinterDriver(ByVal hPrinter As HANDLE,ByVal pEnvironment As LPWSTR,ByVal Level As DWORD,ByVal pDriverInfo As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD) As DWORD
GetProcessIoCounters(ByVal hProcess As HANDLE,ByVal lpIoCounters As PIO_COUNTERS) As BOOL
GetPrinterDriverDirectory(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal Level As DWORD,ByVal pDriverDirectory As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD) As DWORD
GetPrintProcessorDirectory(ByVal pName As LPWSTR,ByVal pEnvironment As LPWSTR,ByVal Level As DWORD,ByVal pPrintProcessorInfo As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD) As DWORD
GetProcessId(ByVal As HANDLE) As DWORD
GetProcessMemoryInfo(ByVal Process As HANDLE,ByVal ppsmemCounters As PPROCESS_MEMORY_COUNTERS,ByVal cb As DWORD) As BOOL
GetParent(ByVal hwnd As HWND) As HWND
GetPrinter(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pPrinter As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD) As BOOL
GetPrintProcessorDirectory(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal Level As DWORD,ByVal pPrintProcessorInfo As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD) As DWORD
GetProcessShutdownParameters(ByVal lpdwLevel As PDWORD,ByVal lpdwFlags As PDWORD) As BOOL
GetProfileSection(ByVal lpAppName As LPCWSTR,ByVal lpReturnedString As LPWSTR,ByVal nSize As DWORD) As DWORD
GetProfileInt(ByVal lpAppName As LPCWSTR,ByVal lpKeyName As LPCWSTR,ByVal nDefault As INT_) As UINT
GetPrivateProfileStruct(ByVal lpszSection As LPCWSTR,ByVal lpszKey As LPCWSTR,ByVal lpStruct As LPVOID,ByVal uSizeStruct As UINT,ByVal szFile As LPCWSTR) As BOOL
GetPrivateProfileString(ByVal lpApplicationName As LPCWSTR,ByVal lpKeyName As LPCWSTR,ByVal lpDefault As LPCWSTR,ByVal lpReturnedString As LPWSTR,ByVal nSize As DWORD,ByVal lpFileName As LPCWSTR) As DWORD
GetPrivateProfileSectionNames(ByVal lpszReturnBuffer As LPWSTR,ByVal nSize As DWORD,ByVal lpFileName As LPCWSTR) As DWORD
GetPrivateProfileSection(ByVal lpAppName As LPCWSTR,ByVal lpReturnedString As LPWSTR,ByVal nSize As DWORD,ByVal lpFileName As LPCWSTR) As DWORD
GetPrivateProfileInt(ByVal lpApplicationName As LPCWSTR,ByVal lpKeyName As LPCWSTR,ByVal nDefault As INT_,ByVal lpFileName As LPCWSTR) As UINT
GetProcessTimes(ByVal hProcess As HANDLE,ByVal lpCreationTime As LPFILETIME,ByVal lpExitTime As LPFILETIME,ByVal lpKernelTime As LPFILETIME,ByVal lpUserTime As LPFILETIME) As BOOL
GetProfileString(ByVal lpAppName As LPCWSTR,ByVal lpKeyName As LPCWSTR,ByVal lpDefault As LPCWSTR,ByVal lpReturnedString As LPWSTR,ByVal nSize As DWORD) As DWORD
GetPrinterDriverDirectory(ByVal pName As LPSTR,ByVal pEnvironment As LPSTR,ByVal Level As DWORD,ByVal pDriverDirectory As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD) As DWORD
GetPrivateProfileInt(ByVal lpApplicationName As LPCSTR,ByVal lpKeyName As LPCSTR,ByVal nDefault As INT_,ByVal lpFileName As LPCSTR) As UINT
GetProp(ByVal hwnd As HWND,ByVal lpString As LPCSTR) As HANDLE
GetPaletteEntries(ByVal hPalette As HPALETTE,ByVal wStartIndex As UINT,ByVal wNumEntries As UINT,ByVal lpPaletteEntries As LPPALETTEENTRY) As UINT
GetProcessDefaultLayout(ByVal pdwDefaultLayout As DWORD PTR) As BOOL
GetPath(ByVal hdc As HDC,ByVal lpPoint As LPPOINT,ByVal lpTypes As PBYTE,ByVal nSize As Integer) As Integer
GetPrivateProfileSection(ByVal lpAppName As LPCSTR,ByVal lpReturnedString As LPSTR,ByVal nSize As DWORD,ByVal lpFileName As LPCSTR) As DWORD
GetPrivateProfileSectionNames(ByVal lpszReturnBuffer As LPSTR,ByVal nSize As DWORD,ByVal lpFileName As LPCSTR) As DWORD
GetPrivateProfileString(ByVal lpApplicationName As LPCSTR,ByVal lpKeyName As LPCSTR,ByVal lpDefault As LPCSTR,ByVal lpReturnedString As LPSTR,ByVal nSize As DWORD,ByVal lpFileName As LPCSTR) As DWORD
GetPrivateProfileStruct(ByVal lpszSection As LPCSTR,ByVal lpszKey As LPCSTR,ByVal lpStruct As LPVOID,ByVal uSizeStruct As UINT,ByVal szFile As LPCSTR) As BOOL
GetProcessWindowStation() As HWINSTA
GetProfileInt(ByVal lpAppName As LPCSTR,ByVal lpKeyName As LPCSTR,ByVal nDefault As INT_) As UINT
GetProfileSection(ByVal lpAppName As LPCSTR,ByVal lpReturnedString As LPSTR,ByVal nSize As DWORD) As DWORD
GetProcessWorkingSetSize(ByVal hProcess As HANDLE,ByVal lpMinimumWorkingSetSize As PSIZE_T,ByVal lpMaximumWorkingSetSize As PSIZE_T) As BOOL
GetPerAdapterInfo(ByVal IfIndex As ULONG,ByVal pPerAdapterInfo As PIP_PER_ADAPTER_INFO,ByVal pOutBufLen As PULONG) As DWORD
GetProfileString(ByVal lpAppName As LPCSTR,ByVal lpKeyName As LPCSTR,ByVal lpDefault As LPCSTR,ByVal lpReturnedString As LPSTR,ByVal nSize As DWORD) As DWORD
GetPrinter(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pPrinter As PBYTE,ByVal cbBuf As DWORD,ByVal pcbNeeded As PDWORD) As BOOL
GetProp(ByVal hwnd As HWND,ByVal lpString As LPCWSTR) As HANDLE
GetPrinterData(ByVal hPrinter As HANDLE,ByVal pValueName As LPSTR,ByVal pType As PDWORD,ByVal pData As PBYTE,ByVal nSize As DWORD,ByVal pcbNeeded As PDWORD) As DWORD
GetProcessAffinityMask(ByVal hProcess As HANDLE,ByVal lpProcessAffinityMask As PDWORD,ByVal SystemAffinityMask As PDWORD) As BOOL
GetProfilesDirectory(ByVal lpProfilesDir As LPWSTR,ByVal lpcchSize As LPDWORD) As BOOL
GetProcessHeaps(ByVal NumberOfHeaps As DWORD,ByVal ProcessHeaps As PHANDLE) As DWORD
GetPolyFillMode(ByVal hdc As HDC) As Integer
GetPrinterDriver(ByVal hPrinter As HANDLE,ByVal pEnvironment As LPSTR,ByVal Level As DWORD,ByVal pDriverInfo As PBYTE,ByVal cdBuf As DWORD,ByVal pcbNeeded As PDWORD) As DWORD
GetProcessHandleCount(ByVal As HANDLE,ByVal As PDWORD) As BOOL
GetPixelFormat(ByVal hDC As HDC) As Integer
GetPixel(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer) As COLORREF
GetPwrDiskSpindownRange(ByVal As PUINT,ByVal As PUINT) As BOOLEAN
GetPwrCapabilities(ByVal As PSYSTEM_POWER_CAPABILITIES) As BOOLEAN
GetProfilesDirectory(ByVal lpProfilesDir As LPSTR,ByVal lpcchSize As LPDWORD) As BOOL
GetProcAddress(ByVal hModule As HINSTANCE,ByVal lpProcName As LPCSTR) As FARPROC
GetPrivateObjectSecurity(ByVal ObjectDescriptor As PSECURITY_DESCRIPTOR,ByVal SecurityInformation As SECURITY_INFORMATION,ByVal ResultantDescriptor As PSECURITY_DESCRIPTOR,ByVal DescriptorLength As DWORD,ByVal ReturnLength As PDWORD) As BOOL
getprotobyname(ByVal name As zstring PTR) As protoent PTR
getprotobynumber(ByVal number As Integer) As protoent PTR
getprotobyname(ByVal name As zstring PTR) As protoent PTR
getpeername(ByVal s As SOCKET,ByVal name As sockaddr PTR,ByVal namelen As Integer PTR) As Integer
GetQueuedCompletionStatus(ByVal CompletionPort As HANDLE,ByVal lpNumberOfBytesTransferred As PDWORD,ByVal lpCompletionKey As PDWORD,ByVal lpOverlapped As LPOVERLAPPED PTR,ByVal dwMilliseconds As DWORD) As BOOL
GetQueueStatus(ByVal fuFlags As UINT) As DWORD
GetRTTAndHopCount(ByVal DestIpAddress As IPAddr,ByVal HopCount As PULONG,ByVal MaxHops As ULONG,ByVal RTT As PULONG) As BOOL
GetRunningObjectTable(ByVal reserved As DWORD,ByVal pprot As LPRUNNINGOBJECTTABLE PTR) As HRESULT
GetRawInputDeviceInfo(ByVal As HANDLE,ByVal As UINT,ByVal As LPVOID,ByVal As PUINT) As UINT
GetRoleTextA(ByVal As DWORD,ByVal As LPSTR,ByVal As UINT) As UINT
GetRoleTextW(ByVal As DWORD,ByVal As LPWSTR,ByVal As UINT) As UINT
GetROP2(ByVal hdc As HDC) As Integer
GetRgnBox(ByVal hRgn As HRGN,ByVal lpRect As LPRECT) As Integer
GetRegionData(ByVal hRgn As HRGN,ByVal dwCount As DWORD,ByVal lpRgnData As LPRGNDATA) As DWORD
GetRandomRgn(ByVal hdc As HDC,ByVal hrgn As HRGN,ByVal ByValt As INT_) As Integer
GetRasterizerCaps(ByVal lpraststat As LPRASTERIZER_STATUS,ByVal cb As UINT) As BOOL
GetRegisteredRawInputDevices(ByVal As PRAWINPUTDEVICE,ByVal As PUINT,ByVal As UINT) As UINT
GetRawInputBuffer(ByVal As PRAWINPUT,ByVal As PUINT,ByVal As UINT) As UINT
GetRawInputData(ByVal As HRAWINPUT,ByVal As UINT,ByVal As LPVOID,ByVal As PUINT,ByVal As UINT) As UINT
GetRawInputDeviceList(ByVal As PRAWINPUTDEVICELIST,ByVal As PUINT,ByVal As UINT) As UINT
GetRawInputDeviceInfo(ByVal As HANDLE,ByVal As UINT,ByVal As LPVOID,ByVal As PUINT) As UINT
GetSystemPowerStatus(ByVal lpSystemPowerStatus As LPSYSTEM_POWER_STATUS) As BOOL
GetSystemRegistryQuota(ByVal As PDWORD,ByVal As PDWORD) As BOOL
GetSystemTimes(ByVal As LPFILETIME,ByVal As LPFILETIME,ByVal As LPFILETIME) As BOOL
GetShellWindow() As HWND
GetStdHandle(ByVal nStdHandle As DWORD) As HANDLE
GetShortPathName(ByVal lpszLongPath As LPCWSTR,ByVal lpszShortPath As LPWSTR,ByVal cchBuffer As DWORD) As DWORD
GetSystemDirectory(ByVal lpBuffer As LPWSTR,ByVal nSize As UINT) As UINT
GetSystemPaletteUse(ByVal hdc As HDC) As UINT
GetSystemPaletteEntries(ByVal hdc As HDC,ByVal wStartIndex As UINT,ByVal wNumEntries As UINT,ByVal lpPaletteEntries As LPPALETTEENTRY) As UINT
GetStretchBltMode(ByVal hdc As HDC) As Integer
GetStockObject(ByVal fnObject As Integer) As HGDIOBJ
GetSystemWow64Directory(ByVal As LPWSTR,ByVal As UINT) As UINT
GetSystemInfo(ByVal lpSystemInfo As LPSYSTEM_INFO) 
GetSystemTime(ByVal lpSystemTime As LPSYSTEMTIME) 
GetSystemTimeAsFileTime(ByVal lpSystemTimeAsFileTime As LPFILETIME) 
GetShortPathName(ByVal lpszLongPath As LPCSTR,ByVal lpszShortPath As LPSTR,ByVal cchBuffer As DWORD) As DWORD
GetSystemDirectory(ByVal lpBuffer As LPSTR,ByVal nSize As UINT) As UINT
GetStartupInfo(ByVal lpStartupInfo As LPSTARTUPINFOW) 
GetSystemWow64Directory(ByVal As LPSTR,ByVal As UINT) As UINT
GetSecurityInfo(ByVal Handle As HANDLE,ByVal ObjectType As SE_OBJECT_TYPE,ByVal SecurityInfo As SECURITY_INFORMATION,ByVal ppsidOwner As PSID PTR,ByVal ppsidGroup As PSID PTR,ByVal ppDacl As PACL PTR,ByVal ppSacl As PACL PTR,ByVal ppSecurityDescriptor As PSECURITY_DESCRIPTOR PTR) As DWORD
GetScrollInfo(ByVal hWnd As HWND,ByVal n As Integer,ByVal lpScrollInfo As LPSCROLLINFO) As BOOL
GetScrollPos(ByVal hwnd As HWND,ByVal nBar As Integer) As Integer
GetScrollRange(ByVal hwnd As HWND,ByVal nBar As Integer,ByVal lpMinPos As LPINT,ByVal lpMaxPos As LPINT) As BOOL
GetSystemTimeAdjustment(ByVal lpTimeAdjustment As PDWORD,ByVal lpTimeIncrement As PDWORD,ByVal lpTimeAdjustmentDisabled As PBOOL) As BOOL
GetSubMenu(ByVal hMenu As HMENU,ByVal nPos As Integer) As HMENU
GetSysColor(ByVal nSysColor As Integer) As DWORD
GetSysColorBrush(ByVal nSysColor As Integer) As HBRUSH
GetSystemMenu(ByVal hwnd As HWND,ByVal fBoolean As BOOL) As HMENU
GetSystemMetrics(ByVal nIndex As Integer) As Integer
GetStateTextW(ByVal As DWORD,ByVal As LPWSTR,ByVal As UINT) As UINT
GetServiceKeyName(ByVal hSCManager As SC_HANDLE,ByVal lpDisplayName As LPCSTR,ByVal lpServiceName As LPSTR,ByVal lpcchBuffer As PDWORD) As BOOL
GetServiceDisplayName(ByVal hSCManager As SC_HANDLE,ByVal lpServiceName As LPCSTR,ByVal lpDisplayName As LPSTR,ByVal lpcchBuffer As PDWORD) As BOOL
GetStateTextA(ByVal As DWORD,ByVal As LPSTR,ByVal As UINT) As UINT
GetServiceKeyName(ByVal hSCManager As SC_HANDLE,ByVal lpDisplayName As LPCWSTR,ByVal lpServiceName As LPWSTR,ByVal lpcchBuffer As PDWORD) As BOOL
GetServiceDisplayName(ByVal hSCManager As SC_HANDLE,ByVal lpServiceName As LPCWSTR,ByVal lpDisplayName As LPWSTR,ByVal lpcchBuffer As PDWORD) As BOOL
GetSaveFileName(ByVal pOpenfilename As LPOPENFILENAMEW) As BOOL
GetSaveFileName(ByVal pOpenfilename As LPOPENFILENAMEA) As BOOL
GetScrollBarInfo(ByVal hwnd As HWND,ByVal idObject As LONG,ByVal psbi As PSCROLLBARINFO) As BOOL
GetSystemDefaultLangID() As LANGID
GetSaveFileNamePreview(ByVal lpofn As LPOPENFILENAMEA) As BOOL
GetSystemDefaultLCID() As LCID
GetStringType(ByVal Locale As DWORD,ByVal dwInfoType As LPCWSTR,ByVal lpSrcStr As Integer,ByVal cchSrc As LPWORD) As BOOL
GetStringTypeEx(ByVal Locale As LCID,ByVal dwInfoType As DWORD,ByVal lpSrcStr As LPCWSTR,ByVal cchSrc As Integer,ByVal lpCharType As LPWORD) As BOOL
GetSaveFileNamePreview(ByVal lpofn As LPOPENFILENAMEW) As BOOL
GetStringTypeEx(ByVal Locale As LCID,ByVal dwInfoType As DWORD,ByVal lpSrcStr As LPCSTR,ByVal cchSrc As Integer,ByVal lpCharType As LPWORD) As BOOL
GetStringType(ByVal Locale As LCID,ByVal dwInfoType As DWORD,ByVal lpSrcStr As LPCSTR,ByVal cchSrc As Integer,ByVal lpCharType As LPWORD) As BOOL
GetStartupInfo(ByVal lpStartupInfo As LPSTARTUPINFOA) 
GetSecurityDescriptorControl(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal pControl As PSECURITY_DESCRIPTOR_CONTROL,ByVal lpdwRevision As PDWORD) As BOOL
GetSecurityDescriptorDacl(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal lpbDaclPresent As LPBOOL,ByVal pDacl As PACL PTR,ByVal lpbDaclDefaulted As LPBOOL) As BOOL
GetSecurityDescriptorGroup(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal pGroup As PSID PTR,ByVal lpbGroupDefaulted As LPBOOL) As BOOL
GetSecurityDescriptorLength(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR) As DWORD
GetSecurityDescriptorOwner(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal pOwner As PSID PTR,ByVal lpbOwnerDefaulted As LPBOOL) As BOOL
GetSecurityDescriptorSacl(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal lpbSaclPresent As LPBOOL,ByVal pSacl As PACL PTR,ByVal lpbSaclDefaulted As LPBOOL) As BOOL
GetSidIdentifierAuthority(ByVal pSid As PSID) As PSID_IDENTIFIER_AUTHORITY
GetSidLengthRequired(ByVal nSubAuthorityCount As UCHAR) As DWORD
GetSidSubAuthority(ByVal pSid As PSID,ByVal nSubAuthority As DWORD) As PDWORD
GetSidSubAuthorityCount(ByVal pSid As PSID) As PUCHAR
getsockname(ByVal s As SOCKET,ByVal name As sockaddr PTR,ByVal namelen As Integer PTR) As Integer
getsockopt(ByVal s As SOCKET,ByVal level As Integer,ByVal optname As Integer,ByVal optval As zstring PTR,ByVal optlen As Integer PTR) As Integer
getservbyport(ByVal port As Integer,ByVal proto As zstring PTR) As servent PTR
getservbyname(ByVal name As zstring PTR,ByVal proto As zstring PTR) As servent PTR
getservbyport(ByVal port As Integer,ByVal proto As zstring PTR) As servent PTR
getservbyname(ByVal name As zstring PTR,ByVal proto As zstring PTR) As servent PTR
getsockopt(ByVal s As SOCKET,ByVal level As Integer,ByVal optname As Integer,ByVal optval As zstring PTR,ByVal optlen As Integer PTR) As Integer
getsockname(ByVal s As SOCKET,ByVal name As sockaddr PTR,ByVal namelen As Integer PTR) As Integer
GetTimestampForLoadedLibrary(ByVal Module As HMODULE) As DWORD
GetTempFileName(ByVal lpszPath As LPCSTR,ByVal lpPrefixString As LPCSTR,ByVal wUnique As UINT,ByVal lpTempFileName As LPSTR) As UINT
GetTrusteeType(ByVal pTrustee As PTRUSTEE_W) As TRUSTEE_TYPE
GetThemeBackgroundRegion(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As HRGN PTR) As HRESULT
GetTitleBarInfo(ByVal hwnd As HWND,ByVal pti As PTITLEBARINFO) As BOOL
GetThreadSelectorEntry(ByVal hThread As HANDLE,ByVal dwSelector As DWORD,ByVal lpSelectorEntry As LPLDT_ENTRY) As BOOL
GetThreadPriorityBoost(ByVal hThread As HANDLE,ByVal pDisablePriorityBoost As PBOOL) As BOOL
GetThreadPriority(ByVal hThread As HANDLE) As Integer
GetThreadIOPendingFlag(ByVal As HANDLE,ByVal As PBOOL) As BOOL
GetThreadContext(ByVal hThread As HANDLE,ByVal lpContext As LPCONTEXT) As BOOL
GetThreadTimes(ByVal hThread As HANDLE,ByVal lpCreationTime As LPFILETIME,ByVal lpExitTime As LPFILETIME,ByVal lpKernelTime As LPFILETIME,ByVal lpUserTime As LPFILETIME) As BOOL
GetTapePosition(ByVal hDevice As HANDLE,ByVal dwPositionType As DWORD,ByVal lpdwPartition As PDWORD,ByVal lpdwOffsetLow As PDWORD,ByVal lpdwOffsetHigh As PDWORD) As DWORD
GetTapeParameters(ByVal hDevice As HANDLE,ByVal dwOperation As DWORD,ByVal lpdwSize As PDWORD,ByVal lpTapeInformation As PVOID) As DWORD
GetThemeBool(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As BOOL PTR) As HRESULT
GetTrusteeName(ByVal pTrustee As PTRUSTEE_W) As LPWSTR
GetTrusteeForm(ByVal pTrustee As PTRUSTEE_W) As TRUSTEE_FORM
GetTimeFormat(ByVal Locale As LCID,ByVal dwFlags As DWORD,ByVal lpTime As SYSTEMTIME PTR,ByVal lpFormat As LPCSTR,ByVal lpTimeStr As LPSTR,ByVal cchTime As Integer) As Integer
GetTickCount() As DWORD
GetTimeZoneInformation(ByVal lpTimeZoneInformation As LPTIME_ZONE_INFORMATION) As DWORD
GetTokenInformation(ByVal TokenHandle As HANDLE,ByVal TokenInformationClass As TOKEN_INFORMATION_CLASS,ByVal TokenInformation As PVOID,ByVal TokenInformationLength As DWORD,ByVal ReturnLength As PDWORD) As BOOL
GetThemeBackgroundExtent(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As RECT PTR) As HRESULT
GetTcpTable(ByVal pTcpTable As PMIB_TCPTABLE,ByVal pdwSize As PDWORD,ByVal border As BOOL) As DWORD
GetTcpStatistics(ByVal pStats As PMIB_TCPSTATS) As DWORD
GetTapeStatus(ByVal hDevice As HANDLE) As DWORD
GetTextExtentPoint32(ByVal hdc As HDC,ByVal lpsz As LPCSTR,ByVal cbString As Integer,ByVal lpSize As LPSIZE) As BOOL
GetTimeFormat(ByVal Locale As LCID,ByVal dwFlags As DWORD,ByVal lpTime As SYSTEMTIME PTR,ByVal lpFormat As LPCWSTR,ByVal lpTimeStr As LPWSTR,ByVal cchTime As Integer) As Integer
GetTabbedTextExtent(ByVal hdc As HDC,ByVal lpString As LPCWSTR,ByVal nCount As Integer,ByVal nTabPositions As Integer,ByVal lpnTabStopPositions As LPINT) As DWORD
GetTabbedTextExtent(ByVal hdc As HDC,ByVal lpString As LPCSTR,ByVal nCount As Integer,ByVal nTabPositions As Integer,ByVal lpnTabStopPositions As LPINT) As DWORD
GetTempPath(ByVal nBufferLength As DWORD,ByVal lpBuffer As LPSTR) As DWORD
GetTextExtentExPoint(ByVal hdc As HDC,ByVal lpszStr As LPCSTR,ByVal cchString As Integer,ByVal nMaxExtent As Integer,ByVal lpnFit As LPINT,ByVal alpDx As LPINT,ByVal lpSize As LPSIZE) As BOOL
GetTextFace(ByVal hdc As HDC,ByVal nCount As Integer,ByVal lpFacename As LPWSTR) As Integer
GetThreadLocale() As LCID
GetTextMetrics(ByVal hdc As HDC,ByVal lpMetrics As LPTEXTMETRICA) As BOOL
GetThemeTextMetrics(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As TEXTMETRIC PTR) As HRESULT
GetThemeTextExtent(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As LPCWSTR,ByVal As Integer,ByVal As DWORD,ByVal As RECT PTR,ByVal As RECT PTR) As HRESULT
GetThemeSysString(ByVal As HTHEME,ByVal As Integer,ByVal As LPWSTR,ByVal As Integer) As HRESULT
GetThemeSysSize(ByVal As HTHEME,ByVal As Integer) As Integer
GetThemeSysInt(ByVal As HTHEME,ByVal As Integer,ByVal As Integer PTR) As HRESULT
GetThemeSysFont(ByVal As HTHEME,ByVal As Integer,ByVal As LOGFONT PTR) As HRESULT
GetThemeBackgroundContentRect(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As RECT PTR) As HRESULT
GetTextMetrics(ByVal hdc As HDC,ByVal lpMetrics As LPTEXTMETRICW) As BOOL
GetThemeAppProperties() As DWORD
GetThemeSysColorBrush(ByVal hTheme As HTHEME,ByVal iColorId As Integer) As HBRUSH
GetThemeSysColor(ByVal hTheme As HTHEME,ByVal iColorId As Integer) As COLORREF
GetThemeSysBool(ByVal As HTHEME,ByVal As Integer) As BOOL
GetThemeString(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As LPWSTR,ByVal As Integer) As HRESULT
GetThemeRect(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR) As HRESULT
GetTextFace(ByVal hdc As HDC,ByVal nCount As Integer,ByVal lpFacename As LPSTR) As Integer
GetTextExtentPoint32(ByVal hdc As HDC,ByVal lpsz As LPCWSTR,ByVal cbString As Integer,ByVal lpSize As LPSIZE) As BOOL
GetTextColor(ByVal hdc As HDC) As COLORREF
GetTextCharsetInfo(ByVal hdc As HDC,ByVal lpSig As LPFONTSIGNATURE,ByVal dwFlags As DWORD) As Integer
GetTextCharset(ByVal hdc As HDC) As Integer
GetThemePropertyOrigin(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As PROPERTYORIGIN PTR) As HRESULT
GetTextCharacterExtra(ByVal hdc As HDC) As Integer
GetTempFileName(ByVal lpszPath As LPCWSTR,ByVal lpPrefixString As LPCWSTR,ByVal wUnique As UINT,ByVal lpTempFileName As LPWSTR) As UINT
GetTempPath(ByVal nBufferLength As DWORD,ByVal lpBuffer As LPWSTR) As DWORD
GetTextExtentPoint(ByVal hdc As HDC,ByVal lpszString As LPCWSTR,ByVal cbString As Integer,ByVal lpSize As LPSIZE) As BOOL
GetTextExtentExPoint(ByVal hdc As HDC,ByVal lpszStr As LPCWSTR,ByVal cchString As Integer,ByVal nMaxExtent As Integer,ByVal lpnFit As LPINT,ByVal alpDx As LPINT,ByVal lpSize As LPSIZE) As BOOL
GetTopWindow(ByVal hwnd As HWND) As HWND
GetThemePosition(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As POINT PTR) As HRESULT
GetThemePartSize(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As THEME_SIZE,ByVal As SIZE PTR) As HRESULT
GetThemeMetric(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As Integer PTR) As HRESULT
GetThemeMargins(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As RECT PTR,ByVal As MARGINS PTR) As HRESULT
GetTextAlign(ByVal hdc As HDC) As UINT
GetThreadDesktop(ByVal dwThread As DWORD) As HDESK
GetTrusteeType(ByVal pTrustee As PTRUSTEE_A) As TRUSTEE_TYPE
GetTrusteeName(ByVal pTrustee As PTRUSTEE_A) As LPSTR
GetThemeIntList(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As INTLIST PTR) As HRESULT
GetThemeInt(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As Integer PTR) As HRESULT
GetThemeFont(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As LOGFONT PTR) As HRESULT
GetTextExtentPoint(ByVal hdc As HDC,ByVal lpszString As LPCSTR,ByVal cbString As Integer,ByVal lpSize As LPSIZE) As BOOL
GetTrusteeForm(ByVal pTrustee As PTRUSTEE_A) As TRUSTEE_FORM
GetThemeFilename(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As LPWSTR,ByVal As Integer) As HRESULT
GetThemeEnumValue(ByVal As HTHEME,ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As Integer PTR) As HRESULT
GetThemeDocumentationProperty(ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As LPWSTR,ByVal As Integer) As HRESULT
GetThemeColor(ByVal hTheme As HTHEME,ByVal iPartId As Integer,ByVal iStateId As Integer,ByVal iPropId As Integer,ByVal pColor As COLORREF PTR) As HRESULT
GetUserGeoID(ByVal As GEOCLASS) As GEOID
GetUrlCacheEntryInfo(ByVal lpszUrlName As LPCSTR,ByVal lpCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOA,ByVal lpdwCacheEntryInfoBufferSize As PDWORD) As BOOL
GetUniDirectionalAdapterInfo(ByVal pIPIfInfo As PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS,ByVal dwOutBufLen As PULONG) As DWORD
GetUdpStatistics(ByVal pStats As PMIB_UDPSTATS) As DWORD
GetUdpTable(ByVal pUdpTable As PMIB_UDPTABLE,ByVal pdwSize As PDWORD,ByVal border As BOOL) As DWORD
GetUserName(ByVal lpBuffer As LPSTR,ByVal nSize As PDWORD) As BOOL
GetUserProfileDirectory(ByVal hToken As HANDLE,ByVal lpProfileDir As LPWSTR,ByVal lpcchSize As LPDWORD) As BOOL
GetUrlCacheGroupAttribute(ByVal gid As GROUPID,ByVal dwFlags As DWORD,ByVal dwAttributes As DWORD,ByVal lpGroupInfo As LPINTERNET_CACHE_GROUP_INFOA,ByVal lpdwGroupInfo As LPDWORD,ByVal lpReserved As LPVOID) As BOOL
GetUserNameEx(ByVal NameFormat As EXTENDED_NAME_FORMAT,ByVal lpNameBuffer As LPWSTR,ByVal nSize As PULONG) As BOOLEAN
GetUserProfileDirectory(ByVal hToken As HANDLE,ByVal lpProfileDir As LPSTR,ByVal lpcchSize As LPDWORD) As BOOL
GetUserNameEx(ByVal NameFormat As EXTENDED_NAME_FORMAT,ByVal lpNameBuffer As LPSTR,ByVal nSize As PULONG) As BOOLEAN
GetUpdateRect(ByVal hwnd As HWND,ByVal lpRect As LPRECT,ByVal bErase As BOOL) As BOOL
GetUserName(ByVal lpBuffer As LPWSTR,ByVal nSize As PDWORD) As BOOL
GetUpdateRgn(ByVal hwnd As HWND,ByVal hRgn As HRGN,ByVal fErase As BOOL) As Integer
GetUserObjectInformation(ByVal hObj As HANDLE,ByVal nIndex As Integer,ByVal pvInfo As PVOID,ByVal nLength As DWORD,ByVal lpnLengthNeeded As PDWORD) As BOOL
GetUserObjectSecurity(ByVal hObj As HANDLE,ByVal pSIRequested As PSECURITY_INFORMATION,ByVal pSd As PSECURITY_DESCRIPTOR,ByVal nLength As DWORD,ByVal lpnLengthNeeded As PDWORD) As BOOL
GetUrlCacheGroupAttribute(ByVal gid As GROUPID,ByVal dwFlags As DWORD,ByVal dwAttributes As DWORD,ByVal lpGroupInfo As LPINTERNET_CACHE_GROUP_INFOW,ByVal lpdwGroupInfo As LPDWORD,ByVal lpReserved As LPVOID) As BOOL
GetUserDefaultLangID() As LANGID
GetUserDefaultLCID() As LCID
GetUserObjectInformation(ByVal hObj As HANDLE,ByVal nIndex As Integer,ByVal pvInfo As PVOID,ByVal nLength As DWORD,ByVal lpnLengthNeeded As PDWORD) As BOOL
GetUrlCacheEntryInfo(ByVal lpszUrlName As LPCSTR,ByVal lpCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOW,ByVal lpdwCacheEntryInfoBufferSize As PDWORD) As BOOL
GetViewportExtEx(ByVal hdc As HDC,ByVal lpSize As LPSIZE) As BOOL
GetViewportOrgEx(ByVal hdc As HDC,ByVal lpPoint As LPPOINT) As BOOL
GetVersion() As DWORD
GetVersionEx(ByVal lpVersionInformation As LPOSVERSIONINFOW) As BOOL
GetVolumeInformation(ByVal lpRootPathName As LPCWSTR,ByVal lpVolumeNameBuffer As LPWSTR,ByVal nVolumeNameSize As DWORD,ByVal lpVolumeSerialNumber As PDWORD,ByVal lpMaximumComponentLength As PDWORD,ByVal lpFileSystemFlags As PDWORD,ByVal lpFileSystemNameBuffer As LPWSTR,ByVal nFileSystemNameSize As DWORD) As BOOL
GetVolumePathName(ByVal lpszFileName As LPCSTR,ByVal lpszVolumePathName As LPSTR,ByVal cchBufferLength As DWORD) As BOOL
GetVolumeNameForVolumeMountPoint(ByVal lpszVolumeMountPoint As LPCSTR,ByVal lpszVolumeName As LPSTR,ByVal cchBufferLength As DWORD) As BOOL
GetVolumeInformation(ByVal lpRootPathName As LPCSTR,ByVal lpVolumeNameBuffer As LPSTR,ByVal nVolumeNameSize As DWORD,ByVal lpVolumeSerialNumber As PDWORD,ByVal lpMaximumComponentLength As PDWORD,ByVal lpFileSystemFlags As PDWORD,ByVal lpFileSystemNameBuffer As LPSTR,ByVal nFileSystemNameSize As DWORD) As BOOL
GetVersionEx(ByVal lpVersionInformation As LPOSVERSIONINFOA) As BOOL
GetVolumePathNamesForVolumeName(ByVal As LPCWSTR,ByVal As LPWSTR,ByVal As DWORD,ByVal As PDWORD) As BOOL
GetVolumePathName(ByVal lpszFileName As LPCWSTR,ByVal lpszVolumePathName As LPWSTR,ByVal cchBufferLength As DWORD) As BOOL
GetVolumeNameForVolumeMountPoint(ByVal lpszVolumeMountPoint As LPCWSTR,ByVal lpszVolumeName As LPWSTR,ByVal cchBufferLength As DWORD) As BOOL
GetVolumePathNamesForVolumeName(ByVal As LPCSTR,ByVal As LPSTR,ByVal As DWORD,ByVal As PDWORD) As BOOL
GetWindowOrgEx(ByVal hdc As HDC,ByVal lpPoint As LPPOINT) As BOOL
GetWindowsDirectory(ByVal lpBuffer As LPWSTR,ByVal nSize As UINT) As UINT
GetWindowModuleFileName(ByVal hwnd As HWND,ByVal pszFileName As LPWSTR,ByVal cchFileNameMax As UINT) As UINT
GetWindowInfo(ByVal hwnd As HWND,ByVal pwi As PWINDOWINFO) As BOOL
GetWindowExtEx(ByVal hdc As HDC,ByVal lpSize As LPSIZE) As BOOL
GetWindowDC(ByVal hwnd As HWND) As HDC
GetWindowExtEx(ByVal hdc As HDC,ByVal lpSize As LPSIZE) As BOOL
GetWindowPlacement(ByVal hwnd As HWND,ByVal lpwndpl As WINDOWPLACEMENT PTR) As BOOL
GetWindowRect(ByVal hwnd As HWND,ByVal lpRect As LPRECT) As BOOL
GetWindowRgn(ByVal hWnd As HWND,ByVal hRgn As HRGN) As Integer
GetWindowWord(ByVal hwnd As HWND,ByVal nIndex As Integer) As WORD
GetWindowContextHelpId(ByVal hWnd As HWND) As DWORD
GetWindow(ByVal hwnd As HWND,ByVal wCmd As UINT) As HWND
GetWindowLong(ByVal hwnd As HWND,ByVal nIndex As Integer) As LONG
GetWriteWatch(ByVal dwFlags As DWORD,ByVal lpBaseAddress As PVOID,ByVal dwRegionSize As SIZE_T,ByVal lpAddresses As PVOID PTR,ByVal lpdwCount As PULONG_PTR,ByVal lpdwGranularity As PULONG) As UINT
GetWsChanges(ByVal hProcess As HANDLE,ByVal lpWatchInfo As PPSAPI_WS_WATCH_INFORMATION,ByVal cb As DWORD) As BOOL
GetWindowTheme(ByVal As HWND) As HTHEME
GetWindowText(ByVal hwnd As HWND,ByVal lpString As LPWSTR,ByVal cch As Integer) As Integer
GetWindowTextLength(ByVal hwnd As HWND) As Integer
GetWindowText(ByVal hwnd As HWND,ByVal lpString As LPSTR,ByVal cch As Integer) As Integer
GetWindowTextLength(ByVal hwnd As HWND) As Integer
GetWindowsDirectory(ByVal lpBuffer As LPSTR,ByVal nSize As UINT) As UINT
GetWindowThreadProcessId(ByVal hwnd As HWND,ByVal lpdwProcessId As PDWORD) As DWORD
GetWindowLong(ByVal hwnd As HWND,ByVal nIndex As Integer) As LONG
GetWorldTransform(ByVal hdc As HDC,ByVal lpXform As LPXFORM) As BOOL
GetWinMetaFileBits(ByVal hemf As HENHMETAFILE,ByVal cbBuffer As UINT,ByVal lpbBuffer As LPBYTE,ByVal fnMapMode As INT_,ByVal hdcRef As HDC) As UINT
GetWindowModuleFileName(ByVal hwnd As HWND,ByVal pszFileName As LPSTR,ByVal cchFileNameMax As UINT) As UINT
GlobalMemoryStatusEx(ByVal lpBuffer As LPMEMORYSTATUSEX) As BOOL
GlobalUnfix(ByVal hMem As HGLOBAL) 
GlobalFree(ByVal hMem As HGLOBAL) As HGLOBAL
GlobalGetAtomName(ByVal nAtom As ATOM,ByVal lpBuffer As LPSTR,ByVal nSize As Integer) As UINT
GlobalFindAtom(ByVal lpString As LPCSTR) As ATOM
GlobalLock(ByVal hMem As HGLOBAL) As LPVOID
GlobalAddAtom(ByVal lpString As LPCSTR) As ATOM
GlobalGetAtomName(ByVal nAtom As ATOM,ByVal lpBuffer As LPWSTR,ByVal nSize As Integer) As UINT
GlobalHandle(ByVal wMem As PCVOID) As HGLOBAL
GlobalReAlloc(ByVal hMem As HGLOBAL,ByVal dwBytes As DWORD,ByVal wFlags As UINT) As HGLOBAL
GlobalFindAtom(ByVal lpString As LPCWSTR) As ATOM
GlobalAddAtom(ByVal lpString As LPCWSTR) As ATOM
GlobalFlags(ByVal hMem As HGLOBAL) As UINT
GlobalSize(ByVal hMem As HGLOBAL) As DWORD
GlobalDiscard(ByVal As HGLOBAL) As HGLOBAL
GlobalDeleteAtom(ByVal nAtom As ATOM) As ATOM
GlobalFix(ByVal hMem As HGLOBAL) 
GlobalMemoryStatus(ByVal lpBuffer As LPMEMORYSTATUS) 
GlobalAlloc(ByVal uFlags As UINT,ByVal dwBytes As DWORD) As HGLOBAL
GlobalUnlock(ByVal hMem As HGLOBAL) As BOOL
GlobalUnWire(ByVal hMem As HGLOBAL) As BOOL
GlobalWire(ByVal hMem As HGLOBAL) As PVOID
GlobalCompact(ByVal dwMinFree As DWORD) As SIZE_T
GopherOpenFile(ByVal hConnect As HINTERNET,ByVal lpszLocator As LPCWSTR,ByVal lpszView As LPCWSTR,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
GopherCreateLocator(ByVal lpszHost As LPCWSTR,ByVal nServerPort As INTERNET_PORT,ByVal lpszDisplayString As LPCWSTR,ByVal lpszSelectorString As LPCWSTR,ByVal dwGopherType As DWORD,ByVal lpszLocator As LPWSTR,ByVal lpdwBufferLength As PDWORD) As BOOL
GopherGetLocatorType(ByVal lpszLocator As LPCSTR,ByVal lpdwGopherType As PDWORD) As BOOL
GopherOpenFile(ByVal hConnect As HINTERNET,ByVal lpszLocator As LPCSTR,ByVal lpszView As LPCSTR,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
GopherGetAttribute(ByVal hConnect As HINTERNET,ByVal lpszLocator As LPCSTR,ByVal lpszAttributeName As LPCSTR,ByVal lpBuffer As LPBYTE,ByVal dwBufferLength As DWORD,ByVal lpdwCharactersReturned As PDWORD,ByVal lpfnEnumerator As GOPHER_ATTRIBUTE_ENUMERATOR,ByVal dwContext As DWORD) As BOOL
GopherCreateLocator(ByVal lpszHost As LPCSTR,ByVal nServerPort As INTERNET_PORT,ByVal lpszDisplayString As LPCSTR,ByVal lpszSelectorString As LPCSTR,ByVal dwGopherType As DWORD,ByVal lpszLocator As LPSTR,ByVal lpdwBufferLength As PDWORD) As BOOL
GopherFindFirstFile(ByVal hConnect As HINTERNET,ByVal lpszLocator As LPCSTR,ByVal lpszSearchString As LPCSTR,ByVal lpFindData As LPGOPHER_FIND_DATAA,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
GopherGetAttribute(ByVal hConnect As HINTERNET,ByVal lpszLocator As LPCWSTR,ByVal lpszAttributeName As LPCWSTR,ByVal lpBuffer As LPBYTE,ByVal dwBufferLength As DWORD,ByVal lpdwCharactersReturned As PDWORD,ByVal lpfnEnumerator As GOPHER_ATTRIBUTE_ENUMERATOR,ByVal dwContext As DWORD) As BOOL
GopherFindFirstFile(ByVal hConnect As HINTERNET,ByVal lpszLocator As LPCWSTR,ByVal lpszSearchString As LPCWSTR,ByVal lpFindData As LPGOPHER_FIND_DATAW,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
GopherGetLocatorType(ByVal lpszLocator As LPCWSTR,ByVal lpdwGopherType As PDWORD) As BOOL
GrayString(ByVal hDC As HDC,ByVal hBrush As HBRUSH,ByVal lpOutputFunc As GRAYSTRINGPROC,ByVal lpData As LPARAM,ByVal nCount As Integer,ByVal X As Integer,ByVal Y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer) As BOOL
HashData(ByVal pbData As LPBYTE,ByVal cbData As DWORD,ByVal pbHash As LPBYTE,ByVal cbHash As DWORD) As HRESULT
HeapFree(ByVal hHeap As HANDLE,ByVal dwFlags As DWORD,ByVal lpMem As PVOID) As BOOL
HeapLock(ByVal hHeap As HANDLE) As BOOL
HeapQueryInformation(ByVal As HANDLE,ByVal As HEAP_INFORMATION_CLASS,ByVal As PVOID,ByVal As SIZE_T,ByVal As PSIZE_T) As BOOL
HeapSize(ByVal hHeap As HANDLE,ByVal dwFlags As DWORD,ByVal lpMem As PCVOID) As DWORD
HeapDestroy(ByVal hHeap As HANDLE) As BOOL
HeapWalk(ByVal hHeap As HANDLE,ByVal lpEntry As LPPROCESS_HEAP_ENTRY) As BOOL
HeapUnlock(ByVal hHeap As HANDLE) As BOOL
HeapAlloc(ByVal hHeap As HANDLE,ByVal dwFlags As DWORD,ByVal dwBytes As DWORD) As PVOID
HeapValidate(ByVal hHeap As HANDLE,ByVal dwFlags As DWORD,ByVal lpMem As PCVOID) As BOOL
HeapCompact(ByVal hHeap As HANDLE,ByVal dwFlags As DWORD) As SIZE_T
HeapSetInformation(ByVal As HANDLE,ByVal As HEAP_INFORMATION_CLASS,ByVal As PVOID,ByVal As SIZE_T) As BOOL
Heap32Next(ByVal lphe As LPHEAPENTRY32) As BOOL
Heap32ListNext(ByVal hSnapshot As HANDLE,ByVal lphl As LPHEAPLIST32) As BOOL
Heap32ListFirst(ByVal hSnapshot As HANDLE,ByVal lphl As LPHEAPLIST32) As BOOL
Heap32First(ByVal lphe As LPHEAPENTRY32,ByVal th32ProcessID As DWORD,ByVal th32HeapID As DWORD) As BOOL
HeapReAlloc(ByVal hHeap As HANDLE,ByVal dwFlags As DWORD,ByVal lpMem As PVOID,ByVal dwBytes As DWORD) As PVOID
HeapCreate(ByVal flOptions As DWORD,ByVal dwInitialSize As DWORD,ByVal dwMaximumSize As DWORD) As HANDLE
HideCaret(ByVal hwnd As HWND) As BOOL
HiliteMenuItem(ByVal hwnd As HWND,ByVal hMenu As HMENU,ByVal wIDHiliteItem As UINT,ByVal wHilite As UINT) As BOOL
HitTestThemeBackground(ByVal As HTHEME,ByVal As HDC,ByVal As Integer,ByVal As Integer,ByVal As DWORD,ByVal As RECT PTR,ByVal As HRGN,ByVal As POINT,ByVal As WORD PTR) As HRESULT
htonl(ByVal hostlong As u_long) As u_long
htons(ByVal hostshort As u_short) As u_short
HttpEndRequest(ByVal hRequest As HINTERNET,ByVal lpBuffersOut As LPINTERNET_BUFFERSW,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
HttpOpenRequest(ByVal hConnect As HINTERNET,ByVal lpszVerb As LPCSTR,ByVal lpszObjectName As LPCSTR,ByVal lpszVersion As LPCSTR,ByVal lpszReferrer As LPCSTR,ByVal lplpszAcceptTypes As LPCSTR PTR,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
HttpAddRequestHeaders(ByVal hRequest As HINTERNET,ByVal lpszHeaders As LPCSTR,ByVal dwHeadersLength As DWORD,ByVal dwModifiers As DWORD) As BOOL
HttpSendRequestEx(ByVal hRequest As HINTERNET,ByVal lpBuffersIn As LPINTERNET_BUFFERSW,ByVal lpBuffersOut As LPINTERNET_BUFFERSW,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
HttpOpenRequest(ByVal hConnect As HINTERNET,ByVal lpszVerb As LPCWSTR,ByVal lpszObjectName As LPCWSTR,ByVal lpszVersion As LPCWSTR,ByVal lpszReferrer As LPCWSTR,ByVal lplpszAcceptTypes As LPCWSTR PTR,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
HttpAddRequestHeaders(ByVal hRequest As HINTERNET,ByVal lpszHeaders As LPCWSTR,ByVal dwHeadersLength As DWORD,ByVal dwModifiers As DWORD) As BOOL
HttpSendRequest(ByVal hRequest As HINTERNET,ByVal lpszHeaders As LPCWSTR,ByVal dwHeadersLength As DWORD,ByVal lpOptional As PVOID,ByVal dwOptionalLength As DWORD) As BOOL
HttpQueryInfo(ByVal hRequest As HINTERNET,ByVal dwInfoLevel As DWORD,ByVal lpBuffer As PVOID,ByVal lpdwBufferLength As PDWORD,ByVal lpdwIndex As PDWORD) As BOOL
HttpEndRequest(ByVal hRequest As HINTERNET,ByVal lpBuffersOut As LPINTERNET_BUFFERSA,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
HttpSendRequestEx(ByVal hRequest As HINTERNET,ByVal lpBuffersIn As LPINTERNET_BUFFERSA,ByVal lpBuffersOut As LPINTERNET_BUFFERSA,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
HttpQueryInfo(ByVal hRequest As HINTERNET,ByVal dwInfoLevel As DWORD,ByVal lpBuffer As PVOID,ByVal lpdwBufferLength As PDWORD,ByVal lpdwIndex As PDWORD) As BOOL
HttpSendRequest(ByVal hRequest As HINTERNET,ByVal lpszHeaders As LPCSTR,ByVal dwHeadersLength As DWORD,ByVal lpOptional As PVOID,ByVal dwOptionalLength As DWORD) As BOOL
hyper_from_ndr_temp(ByVal As ubyte PTR PTR,ByVal As longint PTR,ByVal As uinteger) 
hyper_array_from_ndr(ByVal As PRPC_MESSAGE,ByVal As uinteger,ByVal As uinteger,ByVal As longint PTR) 
hyper_from_ndr(ByVal As PRPC_MESSAGE,ByVal As longint PTR) 
I_NsServerBindSearch() As RPC_STATUS
I_NsClientBindSearch() As RPC_STATUS
I_NsClientBindDone() 
I_RpcIfInqTransferSyntaxes(ByVal RpcIfHandle As HANDLE,ByVal TransferSyntaxes As RPC_TRANSFER_SYNTAX PTR,ByVal TransferSyntaxSize As uinteger,ByVal TransferSyntaxCount As uinteger PTR) As Integer
I_RpcGetAssociationContext(ByVal BindingHandle As any PTR PTR) As Integer
I_RpcMapWin32Status(ByVal Status As RPC_STATUS) As Integer
I_RpcSetAssociationContext(ByVal As any PTR) As Integer
I_RpcNsRaiseException(ByVal Message As PRPC_MESSAGE,ByVal Status As RPC_STATUS) 
I_RpcPauseExecution(ByVal Milliseconds As uinteger) 
I_RpcFree(ByVal Object As any PTR) 
I_RpcDeleteMutex(ByVal Mutex As I_RPC_MUTEX) 
I_RpcStopMonitorAssociation(ByVal Handle As HANDLE) As Integer
I_RpcGetCurrentCallHandle() As HANDLE
I_RpcMonitorAssociation(ByVal Handle As HANDLE,ByVal RundownRoutine As PRPC_RUNDOWN,ByVal Context As any PTR) As Integer
I_RpcReBindBuffer(ByVal Message As PRPC_MESSAGE) As RPC_STATUS
I_RpcClearMutex(ByVal Mutex As I_RPC_MUTEX) 
I_RpcRequestMutex(ByVal Mutex As I_RPC_MUTEX PTR) 
I_RpcAllocate(ByVal Size As uinteger) As any PTR
I_RpcFreeBuffer(ByVal Message As RPC_MESSAGE PTR) As Integer
I_RpcNsBindingSetEntryName(ByVal Binding As HANDLE,ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR) As Integer
I_RpcBindingInqDynamicEndpoint(ByVal Binding As HANDLE,ByVal DynamicEndpoint As ushort PTR PTR) As Integer
I_RpcBindingInqTransportType(ByVal Binding As HANDLE,ByVal lType As uinteger PTR) As Integer
I_RpcSsDontSerializeContext() 
I_RpcSend(ByVal As RPC_MESSAGE PTR) As Integer
I_RpcBindingCopy(ByVal SourceBinding As HANDLE,ByVal DestinationBinding As HANDLE PTR) As Integer
I_RpcBindingIsClientLocal(ByVal BindingHandle As HANDLE,ByVal ClientLocalFlag As uinteger PTR) As Integer
I_RpcServerRegisterForwardFunction(ByVal pForwardFunction As RPC_FORWARD_FUNCTION) As Integer
I_RpcConnectionInqSockBuffSize(ByVal RecvBuffSize As uinteger PTR,ByVal SendBuffSize As uinteger PTR) As Integer
I_RpcConnectionSetSockBuffSize(ByVal RecvBuffSize As uinteger,ByVal SendBuffSize As uinteger) As Integer
I_RpcSendReceive(ByVal Message As RPC_MESSAGE PTR) As Integer
I_RpcBindingSetAsync(ByVal As HANDLE,ByVal As RPC_BLOCKING_FN) As Integer
I_RpcAsyncSendReceive(ByVal As RPC_MESSAGE PTR,ByVal As any PTR) As Integer
I_RpcGetThreadWindowHandle(ByVal As any PTR PTR) As Integer
I_RpcServerThreadPauseListening() As Integer
I_RpcGetBuffer(ByVal Message As RPC_MESSAGE PTR) As Integer
I_RpcServerThreadContinueListening() As Integer
I_RpcServerUnregisterEndpoint(ByVal As ubyte PTR,ByVal As ubyte PTR) As Integer
I_RpcServerUnregisterEndpoint(ByVal As ushort PTR,ByVal As ushort PTR) As Integer
I_RpcNsGetBuffer(ByVal Message As PRPC_MESSAGE) As RPC_STATUS
I_RpcNsSendReceive(ByVal Message As PRPC_MESSAGE,ByVal Handle As RPC_BINDING_HANDLE PTR) As RPC_STATUS
I_UuidCreate(ByVal Uuid As GUID PTR) As Integer
IAdviseSink_OnViewChange_Stub(ByVal As IAdviseSink PTR,ByVal As DWORD,ByVal As LONG) 
IAdviseSink_OnRename_Proxy(ByVal As IAdviseSink PTR,ByVal As IMoniker PTR) 
IAdviseSink_OnRename_Stub(ByVal As IAdviseSink PTR,ByVal As IMoniker PTR) 
IAdviseSink_OnViewChange_Proxy(ByVal As IAdviseSink PTR,ByVal As DWORD,ByVal As LONG) 
IAdviseSink_RemoteOnRename_Proxy(ByVal As IAdviseSink PTR,ByVal As IMoniker PTR) 
IAdviseSink2_RemoteOnLinkSrcChange_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IAdviseSink2_OnLinkSrcChange_Proxy(ByVal As IAdviseSink2 PTR,ByVal As IMoniker PTR) 
IAdviseSink2_OnLinkSrcChange_Stub(ByVal As IAdviseSink2 PTR,ByVal As IMoniker PTR) 
IAdviseSink_RemoteOnClose_Proxy(ByVal As IAdviseSink PTR) As HRESULT
IAdviseSink_OnClose_Stub(ByVal As IAdviseSink PTR) As HRESULT
IAdviseSink_RemoteOnDataChange_Proxy(ByVal As IAdviseSink PTR,ByVal As FORMATETC PTR,ByVal As RemSTGMEDIUM PTR) 
IAdviseSink_RemoteOnDataChange_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IAdviseSink_RemoteOnViewChange_Proxy(ByVal As IAdviseSink PTR,ByVal As DWORD,ByVal As LONG) 
IAdviseSink_RemoteOnViewChange_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IAdviseSink_OnDataChange_Stub(ByVal As IAdviseSink PTR,ByVal As FORMATETC PTR,ByVal As RemSTGMEDIUM PTR) 
IAdviseSink_RemoteOnRename_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IAdviseSink_RemoteOnSave_Proxy(ByVal As IAdviseSink PTR) 
IAdviseSink_RemoteOnSave_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IAdviseSink_RemoteOnClose_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IAdviseSink_OnDataChange_Proxy(ByVal As IAdviseSink PTR,ByVal As FORMATETC PTR,ByVal As STGMEDIUM PTR) 
IAdviseSink2_RemoteOnLinkSrcChange_Proxy(ByVal As IAdviseSink2 PTR,ByVal As IMoniker PTR) 
IAdviseSink_OnClose_Proxy(ByVal As IAdviseSink PTR) 
IAdviseSink_OnSave_Stub(ByVal As IAdviseSink PTR) 
IAdviseSink_OnSave_Proxy(ByVal As IAdviseSink PTR) 
IBindCtx_RevokeObjectBound_Proxy(ByVal As IBindCtx PTR,ByVal punk As IUnknown PTR) As HRESULT
IBindCtx_RegisterObjectBound_Proxy(ByVal As IBindCtx PTR,ByVal punk As IUnknown PTR) As HRESULT
IBindCtx_RegisterObjectBound_Stub(ByVal As IRpcStubBuffer PTR,ByVal _pRpcChannelBuffer As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_GetObjectParam_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_ReleaseBoundObjects_Proxy(ByVal As IBindCtx PTR) As HRESULT
IBindCtx_RevokeObjectParam_Proxy(ByVal As IBindCtx PTR,ByVal As LPCSTR) As HRESULT
IBindCtx_EnumObjectParam_Proxy(ByVal As IBindCtx PTR,ByVal As IEnumString PTR PTR) As HRESULT
IBindCtx_GetObjectParam_Proxy(ByVal As IBindCtx PTR,ByVal As LPCSTR,ByVal As IUnknown PTR PTR) As HRESULT
IBindCtx_RegisterObjectParam_Proxy(ByVal As IBindCtx PTR,ByVal As LPCSTR,ByVal As IUnknown PTR) As HRESULT
IBindCtx_GetRunningObjectTable_Proxy(ByVal As IBindCtx PTR,ByVal As IRunningObjectTable PTR PTR) As HRESULT
IBindCtx_GetBindOptions_Proxy(ByVal As IBindCtx PTR,ByVal pbindopts As BIND_OPTS PTR) As HRESULT
IBindCtx_SetBindOptions_Proxy(ByVal As IBindCtx PTR,ByVal As BIND_OPTS PTR) As HRESULT
IBindCtx_RevokeObjectParam_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_EnumObjectParam_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_RevokeObjectBound_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_RegisterObjectParam_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_GetRunningObjectTable_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_GetBindOptions_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_SetBindOptions_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IBindCtx_ReleaseBoundObjects_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ICClose(ByVal hic As HIC) As LRESULT
ICCompressorFree(ByVal pc As PCOMPVARS) 
ICCompressorChoose(ByVal hwnd As HWND,ByVal uiFlags As UINT,ByVal pvIn As LPVOID,ByVal lpData As LPVOID,ByVal pc As PCOMPVARS,ByVal lpszTitle As LPSTR) As BOOL
ICCompress(ByVal hic As HIC,ByVal dwFlags As DWORD,ByVal lpbiOutput As LPBITMAPINFOHEADER,ByVal lpData As LPVOID,ByVal lpbiInput As LPBITMAPINFOHEADER,ByVal lpBits As LPVOID,ByVal lpckid As LPDWORD,ByVal lpdwFlags As LPDWORD,ByVal lFrameNum As LONG,ByVal dwFrameSize As DWORD,ByVal dwQuality As DWORD,ByVal lpbiPrev As LPBITMAPINFOHEADER,ByVal lpPrev As LPVOID) As DWORD
ICDecompress(ByVal hic As HIC,ByVal dwFlags As DWORD,ByVal lpbiFormat As LPBITMAPINFOHEADER,ByVal lpData As LPVOID,ByVal lpbi As LPBITMAPINFOHEADER,ByVal lpBits As LPVOID) As DWORD
ICDrawBegin(ByVal hic As HIC,ByVal dwFlags As DWORD,ByVal hpal As HPALETTE,ByVal hwnd As HWND,ByVal hdc As HDC,ByVal xDst As INT_,ByVal yDst As INT_,ByVal dxDst As INT_,ByVal dyDst As INT_,ByVal lpbi As LPBITMAPINFOHEADER,ByVal xSrc As INT_,ByVal ySrc As INT_,ByVal dxSrc As INT_,ByVal dySrc As INT_,ByVal dwRate As DWORD,ByVal dwScale As DWORD) As DWORD
ICDraw(ByVal hic As HIC,ByVal dwFlags As DWORD,ByVal lpFormat As LPVOID,ByVal lpData As LPVOID,ByVal cbData As DWORD,ByVal lTime As LONG) As DWORD
ICGetInfo(ByVal hic As HIC,ByVal picinfo As ICINFO PTR,ByVal cb As DWORD) As LRESULT
ICGetDisplayFormat(ByVal hic As HIC,ByVal lpbiIn As LPBITMAPINFOHEADER,ByVal lpbiOut As LPBITMAPINFOHEADER,ByVal BitDepth As INT_,ByVal dx As INT_,ByVal dy As INT_) As HIC
ICImageDecompress(ByVal hic As HIC,ByVal uiFlags As UINT,ByVal lpbiIn As LPBITMAPINFO,ByVal lpBits As LPVOID,ByVal lpbiOut As LPBITMAPINFO) As HANDLE
ICImageCompress(ByVal hic As HIC,ByVal uiFlags As UINT,ByVal lpbiIn As LPBITMAPINFO,ByVal lpBits As LPVOID,ByVal lpbiOut As LPBITMAPINFO,ByVal lQuality As LONG,ByVal plSize As LONG PTR) As HANDLE
ICInfo(ByVal fccType As DWORD,ByVal fccHandler As DWORD,ByVal lpicinfo As ICINFO PTR) As BOOL
ICInstall(ByVal fccType As DWORD,ByVal fccHandler As DWORD,ByVal lParam As LPARAM,ByVal szDesc As LPSTR,ByVal wFlags As UINT) As BOOL
IClassFactory_RemoteCreateInstance_Proxy(ByVal As IClassFactory PTR,ByVal As IID PTR,ByVal As IUnknown PTR PTR) As HRESULT
IClassFactory_RemoteCreateInstance_Stub(ByVal As LPRPCSTUBBUFFER,ByVal As LPRPCCHANNELBUFFER,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IClassFactory_RemoteLockServer_Proxy(ByVal As IClassFactory PTR,ByVal As BOOL) As HRESULT
IClassFactory_LockServer_Proxy(ByVal As IClassFactory PTR,ByVal As BOOL) As HRESULT
IClassFactory_CreateInstance_Stub(ByVal As IClassFactory PTR,ByVal As IID PTR,ByVal As IUnknown PTR PTR) As HRESULT
IClassFactory_LockServer_Stub(ByVal As IClassFactory PTR,ByVal As BOOL) As HRESULT
IClassFactory_RemoteLockServer_Stub(ByVal As LPRPCSTUBBUFFER,ByVal As LPRPCCHANNELBUFFER,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IClassFactory_CreateInstance_Proxy(ByVal As IClassFactory PTR,ByVal As IUnknown PTR,ByVal As IID PTR,ByVal As any PTR PTR) As HRESULT
ICLocate(ByVal fccType As DWORD,ByVal fccHandler As DWORD,ByVal lpbiIn As LPBITMAPINFOHEADER,ByVal lpbiOut As LPBITMAPINFOHEADER,ByVal wFlags As WORD) As HIC
ICOpen(ByVal fccType As DWORD,ByVal fccHandler As DWORD,ByVal wMode As UINT) As HIC
ICOpenFunction(ByVal fccType As DWORD,ByVal fccHandler As DWORD,ByVal wMode As UINT,ByVal lpfnHandler As FARPROC) As HIC
ICRemove(ByVal fccType As DWORD,ByVal fccHandler As DWORD,ByVal wFlags As UINT) As BOOL
ICSeqCompressFrameStart(ByVal pc As PCOMPVARS,ByVal lpbiIn As LPBITMAPINFO) As BOOL
ICSeqCompressFrame(ByVal pc As PCOMPVARS,ByVal uiFlags As UINT,ByVal lpBits As LPVOID,ByVal pfKey As BOOL PTR,ByVal plSize As LONG PTR) As LPVOID
ICSeqCompressFrameEnd(ByVal pc As PCOMPVARS) 
ICSendMessage(ByVal hic As HIC,ByVal msg As UINT,ByVal dw1 As DWORD,ByVal dw2 As DWORD) As LRESULT
IDataAdviseHolder_EnumAdvise_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataAdviseHolder_SendOnDataChange_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataAdviseHolder_SendOnDataChange_Proxy(ByVal As IDataAdviseHolder PTR,ByVal As IDataObject PTR,ByVal As DWORD,ByVal As DWORD) As HRESULT
IDataObject_EnumFormatEtc_Proxy(ByVal As IDataObject PTR,ByVal As DWORD,ByVal As IEnumFORMATETC PTR PTR) As HRESULT
IDataAdviseHolder_Unadvise_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataObject_SetData_Stub(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As RemSTGMEDIUM PTR,ByVal As BOOL) As HRESULT
IDataObject_SetData_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As STGMEDIUM PTR,ByVal As BOOL) As HRESULT
IDataObject_GetDataHere_Stub(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As RemSTGMEDIUM PTR PTR) As HRESULT
IDataObject_GetDataHere_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As STGMEDIUM PTR) As HRESULT
IDataObject_GetData_Stub(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As RemSTGMEDIUM PTR PTR) As HRESULT
IDataObject_GetData_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As STGMEDIUM PTR) As HRESULT
IDataObject_EnumDAdvise_Proxy(ByVal As IDataObject PTR,ByVal As IEnumSTATDATA PTR PTR) As HRESULT
IDataObject_DUnadvise_Proxy(ByVal As IDataObject PTR,ByVal As DWORD) As HRESULT
IDataObject_DAdvise_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As DWORD,ByVal As IAdviseSink PTR,ByVal As DWORD PTR) As HRESULT
IDataAdviseHolder_Unadvise_Proxy(ByVal As IDataAdviseHolder PTR,ByVal As DWORD) As HRESULT
IDataObject_RemoteSetData_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As RemSTGMEDIUM PTR,ByVal As BOOL) As HRESULT
IDataObject_GetCanonicalFormatEtc_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As FORMATETC PTR) As HRESULT
IDataObject_QueryGetData_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR) As HRESULT
IDataObject_RemoteGetDataHere_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As RemSTGMEDIUM PTR PTR) As HRESULT
IDataAdviseHolder_EnumAdvise_Proxy(ByVal As IDataAdviseHolder PTR,ByVal As IEnumSTATDATA PTR PTR) As HRESULT
IDataObject_RemoteGetData_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataObject_RemoteGetDataHere_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataObject_RemoteGetData_Proxy(ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As RemSTGMEDIUM PTR PTR) As HRESULT
IDataObject_QueryGetData_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataAdviseHolder_Advise_Proxy(ByVal As IDataAdviseHolder PTR,ByVal As IDataObject PTR,ByVal As FORMATETC PTR,ByVal As DWORD,ByVal As IAdviseSink PTR,ByVal As DWORD PTR) As HRESULT
IDataObject_GetCanonicalFormatEtc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataObject_RemoteSetData_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataObject_EnumFormatEtc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataObject_DAdvise_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataObject_DUnadvise_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataObject_EnumDAdvise_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IDataAdviseHolder_Advise_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATDATA_Reset_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATSTG_Reset_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATSTG_Skip_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATSTG_RemoteNext_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumFORMATETC_RemoteNext_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumFORMATETC_RemoteNext_Proxy(ByVal As IEnumFORMATETC PTR,ByVal As ULONG,ByVal As FORMATETC PTR,ByVal As ULONG PTR) As HRESULT
IEnumSTATSTG_Reset_Proxy(ByVal As IEnumSTATSTG PTR) As HRESULT
IEnumSTATSTG_Skip_Proxy(ByVal As IEnumSTATSTG PTR,ByVal celt As ULONG) As HRESULT
IEnumSTATSTG_RemoteNext_Proxy(ByVal As IEnumSTATSTG PTR,ByVal As ULONG,ByVal As STATSTG PTR,ByVal As ULONG PTR) As HRESULT
IEnumString_Clone_Proxy(ByVal As IEnumString PTR,ByVal As IEnumString PTR PTR) As HRESULT
IEnumString_Reset_Proxy(ByVal As IEnumString PTR) As HRESULT
IEnumString_Skip_Proxy(ByVal As IEnumString PTR,ByVal As ULONG) As HRESULT
IEnumString_RemoteNext_Proxy(ByVal As IEnumString PTR,ByVal As ULONG,ByVal rgelt As LPCSTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumFORMATETC_Skip_Proxy(ByVal As IEnumFORMATETC PTR,ByVal As ULONG) As HRESULT
IEnumFORMATETC_Reset_Proxy(ByVal As IEnumFORMATETC PTR) As HRESULT
IEnumMoniker_Clone_Proxy(ByVal As IEnumMoniker PTR,ByVal As IEnumMoniker PTR PTR) As HRESULT
IEnumMoniker_Reset_Proxy(ByVal As IEnumMoniker PTR) As HRESULT
IEnumMoniker_Skip_Proxy(ByVal As IEnumMoniker PTR,ByVal As ULONG) As HRESULT
IEnumMoniker_RemoteNext_Proxy(ByVal As IEnumMoniker PTR,ByVal As ULONG,ByVal As IMoniker PTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumFORMATETC_Clone_Proxy(ByVal As IEnumFORMATETC PTR,ByVal As IEnumFORMATETC PTR PTR) As HRESULT
IEnumFORMATETC_Next_Stub(ByVal As IEnumFORMATETC PTR,ByVal As ULONG,ByVal As FORMATETC PTR,ByVal As ULONG PTR) As HRESULT
IEnumSTATDATA_RemoteNext_Proxy(ByVal As IEnumSTATDATA PTR,ByVal As ULONG,ByVal As STATDATA PTR,ByVal As ULONG PTR) As HRESULT
IEnumSTATDATA_Skip_Proxy(ByVal As IEnumSTATDATA PTR,ByVal As ULONG) As HRESULT
IEnumSTATDATA_Reset_Proxy(ByVal As IEnumSTATDATA PTR) As HRESULT
IEnumSTATDATA_Clone_Proxy(ByVal As IEnumSTATDATA PTR,ByVal As IEnumSTATDATA PTR PTR) As HRESULT
IEnumSTATDATA_Next_Proxy(ByVal As IEnumSTATDATA PTR,ByVal As ULONG,ByVal As STATDATA PTR,ByVal As ULONG PTR) As HRESULT
IEnumSTATDATA_Next_Stub(ByVal As IEnumSTATDATA PTR,ByVal As ULONG,ByVal As STATDATA PTR,ByVal As ULONG PTR) As HRESULT
IEnumUnknown_Clone_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATDATA_Skip_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumUnknown_Clone_Proxy(ByVal As IEnumUnknown PTR,ByVal As IEnumUnknown PTR PTR) As HRESULT
IEnumUnknown_Reset_Proxy(ByVal As IEnumUnknown PTR) As HRESULT
IEnumUnknown_Skip_Proxy(ByVal As IEnumUnknown PTR,ByVal As ULONG) As HRESULT
IEnumUnknown_RemoteNext_Proxy(ByVal As IEnumUnknown PTR,ByVal As ULONG,ByVal As IUnknown PTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumString_Clone_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATDATA_Clone_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATDATA_RemoteNext_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumFORMATETC_Clone_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATSTG_Clone_Proxy(ByVal As IEnumSTATSTG PTR,ByVal As IEnumSTATSTG PTR PTR) As HRESULT
IEnumUnknown_Next_Proxy(ByVal As IEnumUnknown PTR,ByVal As ULONG,ByVal As IUnknown PTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumUnknown_Next_Stub(ByVal As IEnumUnknown PTR,ByVal As ULONG,ByVal As IUnknown PTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumMoniker_Next_Proxy(ByVal As IEnumMoniker PTR,ByVal As ULONG,ByVal As IMoniker PTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumMoniker_Next_Stub(ByVal As IEnumMoniker PTR,ByVal As ULONG,ByVal As IMoniker PTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumString_Next_Proxy(ByVal As IEnumString PTR,ByVal As ULONG,ByVal As LPCSTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumString_Next_Stub(ByVal As IEnumString PTR,ByVal As ULONG,ByVal As LPCSTR PTR,ByVal As ULONG PTR) As HRESULT
IEnumSTATSTG_Next_Proxy(ByVal As IEnumSTATSTG PTR,ByVal As ULONG,ByVal As STATSTG PTR,ByVal As ULONG PTR) As HRESULT
IEnumSTATSTG_Next_Stub(ByVal As IEnumSTATSTG PTR,ByVal As ULONG,ByVal As STATSTG PTR,ByVal As ULONG PTR) As HRESULT
IEnumFORMATETC_Reset_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumFORMATETC_Skip_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumUnknown_RemoteNext_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumUnknown_Skip_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumUnknown_Reset_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumFORMATETC_Next_Proxy(ByVal As IEnumFORMATETC PTR,ByVal As ULONG,ByVal As FORMATETC PTR,ByVal As ULONG PTR) As HRESULT
IEnumMoniker_RemoteNext_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumMoniker_Skip_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumMoniker_Reset_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumMoniker_Clone_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumString_RemoteNext_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumString_Skip_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumString_Reset_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IEnumSTATSTG_Clone_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IExternalConnection_AddConnection_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IExternalConnection_ReleaseConnection_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IExternalConnection_AddConnection_Proxy(ByVal As IExternalConnection PTR,ByVal As DWORD,ByVal As DWORD) As DWORD
IExternalConnection_ReleaseConnection_Proxy(ByVal As IExternalConnection PTR,ByVal As DWORD,ByVal As DWORD,ByVal As BOOL) As DWORD
IIDFromString(ByVal lpsz As LPOLESTR,ByVal lpiid As LPIID) As HRESULT
ILAppendID(ByVal As LPITEMIDLIST,ByVal As LPCSHITEMID,ByVal As BOOL) As LPITEMIDLIST
ILClone(ByVal As LPCITEMIDLIST) As LPITEMIDLIST
ILCloneFirst(ByVal As LPCITEMIDLIST) As LPITEMIDLIST
ILCombine(ByVal As LPCITEMIDLIST,ByVal As LPCITEMIDLIST) As LPITEMIDLIST
ILFindChild(ByVal As LPCITEMIDLIST,ByVal As LPCITEMIDLIST) As LPITEMIDLIST
ILFindLastID(ByVal As LPCITEMIDLIST) As LPITEMIDLIST
ILFree(ByVal As LPITEMIDLIST) 
ILGetSize(ByVal As LPCITEMIDLIST) As UINT
ILGetNext(ByVal As LPCITEMIDLIST) As LPITEMIDLIST
ILIsEqual(ByVal As LPCITEMIDLIST,ByVal As LPCITEMIDLIST) As BOOL
ILIsParent(ByVal As LPCITEMIDLIST,ByVal As LPCITEMIDLIST,ByVal As BOOL) As BOOL
ILLoadFromStream(ByVal As IStream PTR,ByVal As LPITEMIDLIST PTR) As HRESULT
ILockBytes_ReadAt_Stub(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER,ByVal As BYTE PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
ILockBytes_WriteAt_Proxy(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER,ByVal As any PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
ILockBytes_Stat_Proxy(ByVal As ILockBytes PTR,ByVal As STATSTG PTR,ByVal As DWORD) As HRESULT
ILockBytes_RemoteWriteAt_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ILockBytes_ReadAt_Proxy(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER,ByVal As any PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
ILockBytes_Flush_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ILockBytes_SetSize_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ILockBytes_LockRegion_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ILockBytes_Stat_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ILockBytes_UnlockRegion_Proxy(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER,ByVal As ULARGE_INTEGER,ByVal As DWORD) As HRESULT
ILockBytes_RemoteReadAt_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ILockBytes_RemoteReadAt_Proxy(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER,ByVal As BYTE PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
ILockBytes_UnlockRegion_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ILockBytes_RemoteWriteAt_Proxy(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER,ByVal pv As BYTE PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
ILockBytes_Flush_Proxy(ByVal As ILockBytes PTR) As HRESULT
ILockBytes_SetSize_Proxy(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER) As HRESULT
ILockBytes_LockRegion_Proxy(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER,ByVal As ULARGE_INTEGER,ByVal As DWORD) As HRESULT
ILockBytes_WriteAt_Stub(ByVal As ILockBytes PTR,ByVal As ULARGE_INTEGER,ByVal As BYTE PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
ILRemoveLastID(ByVal As LPITEMIDLIST) As BOOL
ILSaveToStream(ByVal As IStream PTR,ByVal As LPCITEMIDLIST) As HRESULT
ImageUnload(ByVal LoadedImage As PLOADED_IMAGE) As BOOL
ImageLoad(ByVal DllName As LPSTR,ByVal DllPath As LPSTR) As PLOADED_IMAGE
ImageList_LoadImage(ByVal hInst As HINSTANCE,ByVal lpszbmp As LPCSTR,ByVal cx As Integer,ByVal cGrow As Integer,ByVal crMask As COLORREF,ByVal uType As UINT,ByVal uFlags As UINT) As HIMAGELIST
ImageList_AddMasked(ByVal himl As HIMAGELIST,ByVal hbmImage As HBITMAP,ByVal crMask As COLORREF) As Integer
ImageNtHeader(ByVal Base As PVOID) As PIMAGE_NT_HEADERS
ImageGetCertificateHeader(ByVal FileHandle As HANDLE,ByVal CertificateIndex As DWORD,ByVal Certificateheader As LPWIN_CERTIFICATE) As BOOL
ImageGetCertificateData(ByVal FileHandle As HANDLE,ByVal CertificateIndex As DWORD,ByVal Certificate As LPWIN_CERTIFICATE,ByVal RequiredLength As PDWORD) As BOOL
ImageEnumerateCertificates(ByVal FileHandle As HANDLE,ByVal TypeFilter As WORD,ByVal CertificateCount As PDWORD,ByVal ByRefdices As PDWORD,ByVal ByValdexCount As DWORD) As BOOL
ImageRemoveCertificate(ByVal FileHandle As HANDLE,ByVal ByValdex As DWORD) As BOOL
ImageAddCertificate(ByVal FileHandle As HANDLE,ByVal Certificate As LPWIN_CERTIFICATE,ByVal ByRefdex As PDWORD) As BOOL
ImageGetDigestStream(ByVal FileHandle As HANDLE,ByVal DigestLevel As DWORD,ByVal DigestFunction As DIGEST_FUNCTION,ByVal DigestHandle As DIGEST_HANDLE) As BOOL
ImageList_Add(ByVal himl As HIMAGELIST,ByVal hbmImage As HBITMAP,ByVal hbmMask As HBITMAP) As Integer
ImageList_LoadImage(ByVal hInst As HINSTANCE,ByVal lpszbmp As LPCWSTR,ByVal cx As Integer,ByVal cGrow As Integer,ByVal crMask As COLORREF,ByVal uType As UINT,ByVal uFlags As UINT) As HIMAGELIST
ImageList_BeginDrag(ByVal himlTrack As HIMAGELIST,ByVal iTrack As Integer,ByVal dxHotspot As Integer,ByVal dyHotspot As Integer) As BOOL
ImageList_Create(ByVal cx As Integer,ByVal cy As Integer,ByVal flags As UINT,ByVal cInitial As Integer,ByVal cGrow As Integer) As HIMAGELIST
ImageList_Destroy(ByVal himl As HIMAGELIST) As BOOL
ImageList_DragEnter(ByVal hwndLock As HWND,ByVal x As Integer,ByVal y As Integer) As BOOL
ImageList_DragLeave(ByVal hWndOwner As HWND) As BOOL
ImageList_DragMove(ByVal x As Integer,ByVal y As Integer) As BOOL
ImageList_DragShowNolock(ByVal fBoolean As BOOL) As BOOL
ImageList_Draw(ByVal himl As HIMAGELIST,ByVal i As Integer,ByVal hdcDst As HDC,ByVal x As Integer,ByVal y As Integer,ByVal fStyle As UINT) As BOOL
ImageList_DrawEx(ByVal himl As HIMAGELIST,ByVal i As Integer,ByVal hdcDst As HDC,ByVal x As Integer,ByVal y As Integer,ByVal dx As Integer,ByVal dy As Integer,ByVal rgbBk As COLORREF,ByVal rgbFg As COLORREF,ByVal fStyle As UINT) As BOOL
ImageList_GetBkColor(ByVal himl As HIMAGELIST) As COLORREF
ImageList_GetDragImage(ByVal ppt As LPPOINT,ByVal pptHotspot As LPPOINT) As HIMAGELIST
ImageList_GetIcon(ByVal himl As HIMAGELIST,ByVal i As Integer,ByVal flags As UINT) As HICON
ImageList_GetIconSize(ByVal himl As HIMAGELIST,ByVal cx As Integer PTR,ByVal cy As Integer PTR) As BOOL
ImageList_GetImageCount(ByVal himl As HIMAGELIST) As Integer
ImageList_GetImageInfo(ByVal himl As HIMAGELIST,ByVal i As Integer,ByVal pImageInfo As IMAGEINFO PTR) As BOOL
ImageList_Merge(ByVal himl1 As HIMAGELIST,ByVal i1 As Integer,ByVal himl2 As HIMAGELIST,ByVal i2 As Integer,ByVal dx As Integer,ByVal dy As Integer) As HIMAGELIST
ImageList_Remove(ByVal himl As HIMAGELIST,ByVal i As Integer) As BOOL
ImageList_Replace(ByVal himl As HIMAGELIST,ByVal i As Integer,ByVal hbmImage As HBITMAP,ByVal hbmMask As HBITMAP) As BOOL
ImageList_ReplaceIcon(ByVal himl As HIMAGELIST,ByVal i As Integer,ByVal hicon As HICON) As Integer
ImageList_SetBkColor(ByVal himl As HIMAGELIST,ByVal clrBk As COLORREF) As COLORREF
ImageList_SetDragCursorImage(ByVal himlDrag As HIMAGELIST,ByVal iDrag As Integer,ByVal dxHotspot As Integer,ByVal dyHotspot As Integer) As BOOL
ImageList_SetIconSize(ByVal himl As HIMAGELIST,ByVal cx As Integer,ByVal cy As Integer) As BOOL
ImageList_SetOverlayImage(ByVal himl As HIMAGELIST,ByVal iImage As Integer,ByVal iOverlay As Integer) As BOOL
ImageList_SetImageCount(ByVal himl As HIMAGELIST,ByVal uNewCount As UINT) As WINBOOL
ImageList_Copy(ByVal himlDst As HIMAGELIST,ByVal iDst As Integer,ByVal himlSrc As HIMAGELIST,ByVal iSrc As Integer,ByVal uFlags As UINT) As WINBOOL
ImageList_DrawIndirect(ByVal pimldp As IMAGELISTDRAWPARAMS PTR) As WINBOOL
ImagehlpApiVersionEx(ByVal AppVersion As LPAPI_VERSION) As LPAPI_VERSION
ImagehlpApiVersion() As LPAPI_VERSION
ImageRvaToVa(ByVal NtHeaders As PIMAGE_NT_HEADERS,ByVal Base As PVOID,ByVal Rva As ULONG,ByVal LastRvaSection As PIMAGE_SECTION_HEADER PTR) As PVOID
ImageRvaToSection(ByVal NtHeaders As PIMAGE_NT_HEADERS,ByVal Base As PVOID,ByVal Rva As ULONG) As PIMAGE_SECTION_HEADER
ImageDirectoryEntryToData(ByVal Base As PVOID,ByVal MappedAsImage As BOOLEAN,ByVal DirectoryEntry As USHORT,ByVal Size As PULONG) As PVOID
ImageList_EndDrag() 
IMalloc_Alloc_Proxy(ByVal As IMalloc PTR,ByVal As ULONG) As any PTR
IMalloc_GetSize_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PreDidAlloc_Proxy(ByVal As IMallocSpy PTR,ByVal As any PTR,ByVal As BOOL) As any PTR
IMallocSpy_PostHeapMinimize_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMalloc_Realloc_Proxy(ByVal As IMalloc PTR,ByVal As any PTR,ByVal As ULONG) As any PTR
IMallocSpy_PreFree_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PostFree_Proxy(ByVal As IMallocSpy PTR,ByVal As BOOL) 
IMallocSpy_PostFree_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PreRealloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PostRealloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PreGetSize_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PostGetSize_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PreDidAlloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PostDidAlloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PreHeapMinimize_Proxy(ByVal As IMallocSpy PTR) 
IMallocSpy_PreHeapMinimize_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PostHeapMinimize_Proxy(ByVal As IMallocSpy PTR) 
IMalloc_GetSize_Proxy(ByVal As IMalloc PTR,ByVal As any PTR) As ULONG
IMallocSpy_PostAlloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PreAlloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMalloc_HeapMinimize_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMalloc_HeapMinimize_Proxy(ByVal As IMalloc PTR) 
IMalloc_DidAlloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMalloc_Free_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMalloc_Free_Proxy(ByVal As IMalloc PTR,ByVal As any PTR) 
IMalloc_Realloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMalloc_Alloc_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMallocSpy_PreAlloc_Proxy(ByVal As IMallocSpy PTR,ByVal cbRequest As ULONG) As ULONG
IMallocSpy_PostAlloc_Proxy(ByVal As IMallocSpy PTR,ByVal As any PTR) As any PTR
IMallocSpy_PreFree_Proxy(ByVal As IMallocSpy PTR,ByVal As any PTR,ByVal As BOOL) As any PTR
IMallocSpy_PreRealloc_Proxy(ByVal As IMallocSpy PTR,ByVal As any PTR,ByVal As ULONG,ByVal As any PTR PTR,ByVal As BOOL) As ULONG
IMallocSpy_PostRealloc_Proxy(ByVal As IMallocSpy PTR,ByVal As any PTR,ByVal As BOOL) As any PTR
IMallocSpy_PreGetSize_Proxy(ByVal As IMallocSpy PTR,ByVal As any PTR,ByVal As BOOL) As any PTR
IMallocSpy_PostGetSize_Proxy(ByVal As IMallocSpy PTR,ByVal As ULONG,ByVal As BOOL) As ULONG
IMallocSpy_PostDidAlloc_Proxy(ByVal As IMallocSpy PTR,ByVal As any PTR,ByVal As BOOL,ByVal As Integer) As Integer
IMalloc_DidAlloc_Proxy(ByVal As IMalloc PTR,ByVal As any PTR) As Integer
IMarshal_DisconnectObject_Proxy(ByVal As IMarshal PTR,ByVal As DWORD) As HRESULT
IMarshal_GetMarshalSizeMax_Proxy(ByVal As IMarshal PTR,ByVal As IID PTR,ByVal As any PTR,ByVal As DWORD,ByVal As any PTR,ByVal As DWORD,ByVal As DWORD PTR) As HRESULT
IMarshal_MarshalInterface_Proxy(ByVal As IMarshal PTR,ByVal As IStream PTR,ByVal As IID PTR,ByVal As any PTR,ByVal As DWORD,ByVal As any PTR,ByVal As DWORD) As HRESULT
IMarshal_ReleaseMarshalData_Proxy(ByVal As IMarshal PTR,ByVal As IStream PTR) As HRESULT
IMarshal_UnmarshalInterface_Proxy(ByVal As IMarshal PTR,ByVal As IStream PTR,ByVal As IID PTR,ByVal As any PTR PTR) As HRESULT
IMarshal_ReleaseMarshalData_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMarshal_DisconnectObject_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMarshal_UnmarshalInterface_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMarshal_MarshalInterface_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMarshal_GetMarshalSizeMax_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMarshal_GetUnmarshalClass_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMarshal_GetUnmarshalClass_Proxy(ByVal As IMarshal PTR,ByVal As IID PTR,ByVal As any PTR,ByVal As DWORD,ByVal As any PTR,ByVal As DWORD,ByVal As CLSID PTR) As HRESULT
IMessageFilter_RetryRejectedCall_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMessageFilter_HandleInComingCall_Proxy(ByVal As IMessageFilter PTR,ByVal As DWORD,ByVal As HTASK,ByVal As DWORD,ByVal As LPINTERFACEINFO) As DWORD
IMessageFilter_HandleInComingCall_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMessageFilter_MessagePending_Proxy(ByVal As IMessageFilter PTR,ByVal As HTASK,ByVal As DWORD,ByVal As DWORD) As DWORD
IMessageFilter_MessagePending_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMessageFilter_RetryRejectedCall_Proxy(ByVal As IMessageFilter PTR,ByVal As HTASK,ByVal As DWORD,ByVal As DWORD) As DWORD
ImmAssociateContext(ByVal hwnd As HWND,ByVal himc As HIMC) As HIMC
ImmConfigureIME(ByVal hkl As HKL,ByVal hwnd As HWND,ByVal dw As DWORD,ByVal As PVOID) As BOOL
ImmCreateContext() As HIMC
ImmDestroyContext(ByVal himc As HIMC) As BOOL
ImmDisableIME(ByVal dword As DWORD) As BOOL
ImmEnumRegisterWord(ByVal hkl As HKL,ByVal RegisterWordEnumProc As REGISTERWORDENUMPROCW,ByVal lpszReading As LPCWSTR,ByVal dw As DWORD,ByVal lpszRegister As LPCWSTR,ByVal lpv As PVOID) As UINT
ImmEnumRegisterWord(ByVal hkl As HKL,ByVal RegisterWordEnumProc As REGISTERWORDENUMPROCA,ByVal lpszReading As LPCSTR,ByVal dw As DWORD,ByVal lpszRegister As LPCSTR,ByVal lpv As PVOID) As UINT
ImmEscape(ByVal hkl As HKL,ByVal himc As HIMC,ByVal un As UINT,ByVal lpv As PVOID) As LRESULT
ImmGetCandidateList(ByVal himc As HIMC,ByVal deIndex As DWORD,ByVal lpCandidateList As PCANDIDATELIST,ByVal dwBufLen As DWORD) As DWORD
ImmGetConversionStatus(ByVal himc As HIMC,ByVal lpdw As LPDWORD,ByVal lpdw2 As PDWORD) As BOOL
ImmGetIMEFileName(ByVal hkl As HKL,ByVal lpStr As LPSTR,ByVal uBufLen As UINT) As UINT
ImmGetRegisterWordStyle(ByVal hkl As HKL,ByVal nItem As UINT,ByVal lpStyleBuf As PSTYLEBUFA) As UINT
ImmGetCompositionFont(ByVal himc As HIMC,ByVal lpLogFont As LPLOGFONTW) As BOOL
ImmGetGuideLine(ByVal himc As HIMC,ByVal dwIndex As DWORD,ByVal lpStr As LPWSTR,ByVal dwBufLen As DWORD) As DWORD
ImmGetImeMenuItems(ByVal himc As HIMC,ByVal dword As DWORD,ByVal dword As DWORD,ByVal LPIMEMENUITEMINFOA As LPIMEMENUITEMINFOW,ByVal LPIMEMENUITEMINFOA As LPIMEMENUITEMINFOW,ByVal dword As DWORD) As DWORD
ImmGetContext(ByVal hwnd As HWND) As HIMC
ImmGetOpenStatus(ByVal himc As HIMC) As BOOL
ImmGetCompositionString(ByVal himc As HIMC,ByVal dw As DWORD,ByVal lpv As PVOID,ByVal dw2 As DWORD) As LONG
ImmGetCompositionFont(ByVal himc As HIMC,ByVal lpLogFont As LPLOGFONTA) As BOOL
ImmGetVirtualKey(ByVal hwnd As HWND) As UINT
ImmGetImeMenuItems(ByVal himc As HIMC,ByVal dword As DWORD,ByVal dword As DWORD,ByVal LPIMEMENUITEMINFOA As LPIMEMENUITEMINFOA,ByVal LPIMEMENUITEMINFOA As LPIMEMENUITEMINFOA,ByVal dword As DWORD) As DWORD
ImmGetDescription(ByVal hkl As HKL,ByVal lpsz As LPSTR,ByVal uBufLen As UINT) As UINT
ImmGetStatusWindowPos(ByVal himc As HIMC,ByVal lpPoint As LPPOINT) As BOOL
ImmGetDescription(ByVal hkl As HKL,ByVal lpsz As LPWSTR,ByVal uBufLen As UINT) As UINT
ImmGetCandidateListCount(ByVal himc As HIMC,ByVal lpdwListCount As PDWORD) As DWORD
ImmGetIMEFileName(ByVal hkl As HKL,ByVal lpStr As LPWSTR,ByVal uBufLen As UINT) As UINT
ImmGetCompositionWindow(ByVal himc As HIMC,ByVal lpCompositionForm As PCOMPOSITIONFORM) As BOOL
ImmGetGuideLine(ByVal himc As HIMC,ByVal dwIndex As DWORD,ByVal lpStr As LPSTR,ByVal dwBufLen As DWORD) As DWORD
ImmGetConversionList(ByVal hkl As HKL,ByVal himc As HIMC,ByVal lpsz As LPCSTR,ByVal lpCandidateList As PCANDIDATELIST,ByVal dwBufLen As DWORD,ByVal uFlag As UINT) As DWORD
ImmGetRegisterWordStyle(ByVal hkl As HKL,ByVal nItem As UINT,ByVal lpStyleBuf As PSTYLEBUFW) As UINT
ImmGetProperty(ByVal hkl As HKL,ByVal dw As DWORD) As DWORD
ImmGetDefaultIMEWnd(ByVal hwnd As HWND) As HWND
ImmGetCompositionString(ByVal himc As HIMC,ByVal dw As DWORD,ByVal lpv As PVOID,ByVal dw2 As DWORD) As LONG
ImmGetConversionList(ByVal hkl As HKL,ByVal himc As HIMC,ByVal lpsz As LPCWSTR,ByVal lpCandidateList As PCANDIDATELIST,ByVal dwBufLen As DWORD,ByVal uFlag As UINT) As DWORD
ImmGetCandidateListCount(ByVal himc As HIMC,ByVal lpdwListCount As PDWORD) As DWORD
ImmGetCandidateList(ByVal himc As HIMC,ByVal deIndex As DWORD,ByVal lpCandidateList As PCANDIDATELIST,ByVal dwBufLen As DWORD) As DWORD
ImmGetCandidateWindow(ByVal himc As HIMC,ByVal dw As DWORD,ByVal lpCandidateForm As PCANDIDATEFORM) As BOOL
ImmInstallIME(ByVal lpszIMEFileName As LPCWSTR,ByVal lpszLayoutText As LPCWSTR) As HKL
ImmIsUIMessage(ByVal hwnd As HWND,ByVal un As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As BOOL
ImmInstallIME(ByVal lpszIMEFileName As LPCSTR,ByVal lpszLayoutText As LPCSTR) As HKL
ImmIsUIMessage(ByVal hwnd As HWND,ByVal un As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As BOOL
ImmIsIME(ByVal hkl As HKL) As BOOL
ImmNotifyIME(ByVal himc As HIMC,ByVal dwAction As DWORD,ByVal dwIndex As DWORD,ByVal dwValue As DWORD) As BOOL
ImmReleaseContext(ByVal hwnd As HWND,ByVal himc As HIMC) As BOOL
ImmRegisterWord(ByVal hkl As HKL,ByVal lpszReading As LPCWSTR,ByVal dw As DWORD,ByVal lpszRegister As LPCWSTR) As BOOL
ImmRegisterWord(ByVal hkl As HKL,ByVal lpszReading As LPCSTR,ByVal dw As DWORD,ByVal lpszRegister As LPCSTR) As BOOL
ImmSetOpenStatus(ByVal himc As HIMC,ByVal b As BOOL) As BOOL
ImmSetCandidateWindow(ByVal himc As HIMC,ByVal lpCandidateForm As PCANDIDATEFORM) As BOOL
ImmSetCompositionString(ByVal himc As HIMC,ByVal dwIndex As DWORD,ByVal lpComp As PCVOID,ByVal dw As DWORD,ByVal lpRead As PCVOID,ByVal dw2 As DWORD) As BOOL
ImmSetStatusWindowPos(ByVal himc As HIMC,ByVal lpPoint As LPPOINT) As BOOL
ImmSetCompositionWindow(ByVal himc As HIMC,ByVal lpCompositionForm As PCOMPOSITIONFORM) As BOOL
ImmSetCompositionFont(ByVal himc As HIMC,ByVal lpLogFont As LPLOGFONTA) As BOOL
ImmSetConversionStatus(ByVal himc As HIMC,ByVal dw1 As DWORD,ByVal dw2 As DWORD) As BOOL
ImmSetCompositionFont(ByVal himc As HIMC,ByVal lpLogFont As LPLOGFONTW) As BOOL
ImmSetCompositionString(ByVal himc As HIMC,ByVal dwIndex As DWORD,ByVal lpComp As PCVOID,ByVal dw As DWORD,ByVal lpRead As PCVOID,ByVal dw2 As DWORD) As BOOL
ImmSimulateHotKey(ByVal hwnd As HWND,ByVal dw As DWORD) As BOOL
ImmUnregisterWord(ByVal hkl As HKL,ByVal lpszReading As LPCSTR,ByVal dw As DWORD,ByVal lpszUnregister As LPCSTR) As BOOL
ImmUnregisterWord(ByVal hkl As HKL,ByVal lpszReading As LPCWSTR,ByVal dw As DWORD,ByVal lpszUnregister As LPCWSTR) As BOOL
IMoniker_Inverse_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_IsRunning_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_GetTimeOfLastChange_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_IsEqual_Proxy(ByVal As IMoniker PTR,ByVal As IMoniker PTR) As HRESULT
IMoniker_CommonPrefixWith_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_Hash_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_ComposeWith_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_Reduce_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_RemoteBindToStorage_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_IsSystemMoniker_Proxy(ByVal As IMoniker PTR,ByVal As DWORD PTR) As HRESULT
IMoniker_ParseDisplayName_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As LPCSTR,ByVal As ULONG PTR,ByVal As IMoniker PTR PTR) As HRESULT
IMoniker_RemoteBindToObject_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_RelativePathTo_Proxy(ByVal As IMoniker PTR,ByVal As IMoniker PTR,ByVal As IMoniker PTR PTR) As HRESULT
IMoniker_CommonPrefixWith_Proxy(ByVal As IMoniker PTR,ByVal As IMoniker PTR,ByVal As IMoniker PTR PTR) As HRESULT
IMoniker_Inverse_Proxy(ByVal As IMoniker PTR,ByVal As IMoniker PTR PTR) As HRESULT
IMoniker_GetTimeOfLastChange_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As FILETIME PTR) As HRESULT
IMoniker_IsRunning_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As IMoniker PTR) As HRESULT
IMoniker_Hash_Proxy(ByVal As IMoniker PTR,ByVal As DWORD PTR) As HRESULT
IMoniker_IsEqual_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_Enum_Proxy(ByVal As IMoniker PTR,ByVal As BOOL,ByVal As IEnumMoniker PTR PTR) As HRESULT
IMoniker_ComposeWith_Proxy(ByVal As IMoniker PTR,ByVal As IMoniker PTR,ByVal As BOOL,ByVal As IMoniker PTR PTR) As HRESULT
IMoniker_Reduce_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As DWORD,ByVal As IMoniker PTR PTR,ByVal As IMoniker PTR PTR) As HRESULT
IMoniker_RemoteBindToStorage_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As IID PTR,ByVal As IUnknown PTR PTR) As HRESULT
IMoniker_RemoteBindToObject_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As IID PTR,ByVal As IUnknown PTR PTR) As HRESULT
IMoniker_BindToObject_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As IID PTR,ByVal As any PTR PTR) As HRESULT
IMoniker_BindToStorage_Stub(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As IID PTR,ByVal As IUnknown PTR PTR) As HRESULT
IMoniker_Enum_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_BindToStorage_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As IID PTR,ByVal As any PTR PTR) As HRESULT
IMoniker_GetDisplayName_Proxy(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As LPCSTR PTR) As HRESULT
IMoniker_BindToObject_Stub(ByVal As IMoniker PTR,ByVal As IBindCtx PTR,ByVal As IMoniker PTR,ByVal As IID PTR,ByVal As IUnknown PTR PTR) As HRESULT
IMoniker_IsSystemMoniker_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_ParseDisplayName_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_GetDisplayName_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IMoniker_RelativePathTo_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
ImpersonateDdeClientWindow(ByVal hWndClient As HWND,ByVal hWndServer As HWND) As BOOL
ImpersonateSecurityContext(ByVal phContext As PCtxtHandle) As SECURITY_STATUS
ImpersonateLoggedOnUser(ByVal hToken As HANDLE) As BOOL
ImpersonateSelf(ByVal ImpersonationLevel As SECURITY_IMPERSONATION_LEVEL) As BOOL
ImpersonateNamedPipeClient(ByVal hNamedPipe As HANDLE) As BOOL
InetIsOffline(ByVal dwFlags As DWORD) As BOOL
inet_ntoa(ByVal lIn As in_addr) As zstring PTR
inet_addr(ByVal cp As zstring PTR) As uinteger
inet_ntoa(ByVal lIn As in_addr) As zstring PTR
InflateRect(ByVal lpRect As LPRECT,ByVal x As Integer,ByVal y As Integer) As BOOL
InitializeSecurityContext(ByVal phCredential As PCredHandle,ByVal phContext As PCtxtHandle,ByVal pszTargetName As SEC_CHAR PTR,ByVal fContextReq As ULONG,ByVal Reserved1 As ULONG,ByVal TargetDataRep As ULONG,ByVal pInput As PSecBufferDesc,ByVal Reserved2 As ULONG,ByVal phNewContext As PCtxtHandle,ByVal pOutput As PSecBufferDesc,ByVal pfContextAttr As PULONG,ByVal ptsExpiry As PTimeStamp) As SECURITY_STATUS
InitSecurityInterface() As PSecurityFunctionTableA
InitializeSid(ByVal Sid As PSID,ByVal pIdentifierAuthority As PSID_IDENTIFIER_AUTHORITY,ByVal nSubAuthorityCount As BYTE) As BOOL
InitSecurityInterface() As PSecurityFunctionTableW
InitializeSecurityContext(ByVal phCredential As PCredHandle,ByVal phContext As PCtxtHandle,ByVal pszTargetName As SEC_WCHAR PTR,ByVal fContextReq As ULONG,ByVal Reserved1 As ULONG,ByVal TargetDataRep As ULONG,ByVal pInput As PSecBufferDesc,ByVal Reserved2 As ULONG,ByVal phNewContext As PCtxtHandle,ByVal pOutput As PSecBufferDesc,ByVal pfContextAttr As PULONG,ByVal ptsExpiry As PTimeStamp) As SECURITY_STATUS
InitCommonControlsEx(ByVal pIcce As LPINITCOMMONCONTROLSEX) As BOOL
InitVFW() As LONG
InitCommonControls() 
InitializeCriticalSection(ByVal lpCriticalSection As LPCRITICAL_SECTION) 
InitializeProcessForWsWatch(ByVal hProcess As HANDLE) As BOOL
InitiateSystemShutdown(ByVal lpMachineName As LPSTR,ByVal lpMessage As LPSTR,ByVal dwTimeout As DWORD,ByVal bForceAppsClosed As BOOL,ByVal bRebootAfterShutdown As BOOL) As BOOL
InitializeSecurityDescriptor(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal dwRevision As DWORD) As BOOL
InitAtomTable(ByVal nSize As DWORD) As BOOL
InitializeCriticalSectionAndSpinCount(ByVal lpCriticalSection As LPCRITICAL_SECTION,ByVal dwSpinCount As DWORD) As BOOL
InitializeSListHead(ByVal As PSLIST_HEADER) 
InitializeAcl(ByVal pAcl As PACL,ByVal nAclLength As DWORD,ByVal dwAclRevision As DWORD) As BOOL
InitiateSystemShutdown(ByVal lpMachineName As LPWSTR,ByVal lpMessage As LPWSTR,ByVal dwTimeout As DWORD,ByVal bForceAppsClosed As BOOL,ByVal bRebootAfterShutdown As BOOL) As BOOL
InSendMessageEx(ByVal lpReserved As LPVOID) As DWORD
InSendMessage() As BOOL
InsertMenuItem(ByVal hMenu As HMENU,ByVal uItem As UINT,ByVal bool As BOOL,ByVal ByRef As LPCMENUITEMINFOW) As BOOL
InsertMenu(ByVal hMenu As HMENU,ByVal nPosition As UINT,ByVal wFlags As UINT,ByVal wIDNewItem As UINT,ByVal lpNewItem As LPCWSTR) As BOOL
InsertMenu(ByVal hMenu As HMENU,ByVal nPosition As UINT,ByVal wFlags As UINT,ByVal wIDNewItem As UINT,ByVal lpNewItem As LPCSTR) As BOOL
InsertMenuItem(ByVal hMenu As HMENU,ByVal uItem As UINT,ByVal bool As BOOL,ByVal ByRef As LPCMENUITEMINFOA) As BOOL
InternetTimeToSystemTime(ByVal lpszTime As LPCSTR,ByVal pst As SYSTEMTIME PTR,ByVal dwReserved As DWORD) As BOOL
InternetGetLastResponseInfo(ByVal lpdwError As PDWORD,ByVal lpszBuffer As LPSTR,ByVal lpdwBufferLength As PDWORD) As BOOL
InternetDebugGetLocalTime(ByVal As SYSTEMTIME PTR,ByVal As PDWORD) As BOOL
InternetSetOptionEx(ByVal hInternet As HINTERNET,ByVal dwOption As DWORD,ByVal lpBuffer As PVOID,ByVal dwBufferLength As DWORD,ByVal dwFlags As DWORD) As BOOL
InternetSetCookie(ByVal lpszUrl As LPCSTR,ByVal lpszCookieName As LPCSTR,ByVal lpszCookieData As LPCSTR) As BOOL
InternetOpenUrl(ByVal hInternet As HINTERNET,ByVal lpszUrl As LPCSTR,ByVal lpszHeaders As LPCSTR,ByVal dwHeadersLength As DWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
InternetFindNextFile(ByVal hFind As HINTERNET,ByVal lpvFindData As PVOID) As BOOL
InternetQueryOption(ByVal hInternet As HINTERNET,ByVal dwOption As DWORD,ByVal lpBuffer As PVOID,ByVal lpdwBufferLength As PDWORD) As BOOL
InternetSetOption(ByVal hInternet As HINTERNET,ByVal dwOption As DWORD,ByVal lpBuffer As PVOID,ByVal dwBufferLength As DWORD) As BOOL
InternetSetOptionEx(ByVal hInternet As HINTERNET,ByVal dwOption As DWORD,ByVal lpBuffer As PVOID,ByVal dwBufferLength As DWORD,ByVal dwFlags As DWORD) As BOOL
InternetCheckConnection(ByVal lpszUrl As LPCSTR,ByVal dwFlags As DWORD,ByVal dwReserved As DWORD) As BOOL
InternetCombineUrl(ByVal lpszBaseUrl As LPCSTR,ByVal lpszRelativeUrl As LPCSTR,ByVal lpszBuffer As LPSTR,ByVal lpdwBufferLength As PDWORD,ByVal dwFlags As DWORD) As BOOL
InternetOpen(ByVal lpszAgent As LPCSTR,ByVal dwAccessType As DWORD,ByVal lpszProxy As LPCSTR,ByVal lpszProxyBypass As LPCSTR,ByVal dwFlags As DWORD) As HINTERNET
InternalGetWindowText(ByVal As HWND,ByVal As LPWSTR,ByVal As INT_) As INT_
IntersectRect(ByVal lpDestRect As LPRECT,ByVal lpSrc1Rect As LPCRECT,ByVal lpSrc2Rect As LPCRECT) As BOOL
InternetCreateUrl(ByVal lpUrlComponents As LPURL_COMPONENTSA,ByVal dwFlags As DWORD,ByVal lpszUrl As LPSTR,ByVal lpdwUrlLength As PDWORD) As BOOL
InternetCrackUrl(ByVal lpszUrl As LPCSTR,ByVal dwUrlLength As DWORD,ByVal dwFlags As DWORD,ByVal lpUrlComponents As LPURL_COMPONENTSA) As BOOL
InternetReadFileEx(ByVal hFile As HINTERNET,ByVal lpBuffersOut As LPINTERNET_BUFFERSW,ByVal dwFlags As DWORD,ByVal dwContext As DWORD_PTR) As BOOL
InternetTimeFromSystemTime(ByVal pst As SYSTEMTIME PTR,ByVal dwRFC As DWORD,ByVal lpszTime As LPSTR,ByVal cbTime As DWORD) As BOOL
IntersectClipRect(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer) As Integer
InternetGetCookie(ByVal lpszUrl As LPCSTR,ByVal lpszCookieName As LPCWSTR,ByVal lpCookieData As LPWSTR,ByVal lpdwSize As PDWORD) As BOOL
InternetSetCookie(ByVal lpszUrl As LPCSTR,ByVal lpszCookieName As LPCWSTR,ByVal lpszCookieData As LPCWSTR) As BOOL
InternetGetLastResponseInfo(ByVal lpdwError As PDWORD,ByVal lpszBuffer As LPWSTR,ByVal lpdwBufferLength As PDWORD) As BOOL
InternetGetCookie(ByVal lpszUrl As LPCSTR,ByVal lpszCookieName As LPCSTR,ByVal lpCookieData As LPSTR,ByVal lpdwSize As PDWORD) As BOOL
InternetSetOption(ByVal hInternet As HINTERNET,ByVal dwOption As DWORD,ByVal lpBuffer As PVOID,ByVal dwBufferLength As DWORD) As BOOL
InternetCanonicalizeUrl(ByVal lpszUrl As LPCSTR,ByVal lpszBuffer As LPSTR,ByVal lpdwBufferLength As PDWORD,ByVal dwFlags As DWORD) As BOOL
InternetConnect(ByVal hInternet As HINTERNET,ByVal lpszServerName As LPCSTR,ByVal nServerPort As INTERNET_PORT,ByVal lpszUserName As LPCSTR,ByVal lpszPassword As LPCSTR,ByVal dwService As DWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
InternetQueryOption(ByVal hInternet As HINTERNET,ByVal dwOption As DWORD,ByVal lpBuffer As PVOID,ByVal lpdwBufferLength As PDWORD) As BOOL
InternetFindNextFile(ByVal hFind As HINTERNET,ByVal lpvFindData As PVOID) As BOOL
InternetOpenUrl(ByVal hInternet As HINTERNET,ByVal lpszUrl As LPCWSTR,ByVal lpszHeaders As LPCWSTR,ByVal dwHeadersLength As DWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
InternetConnect(ByVal hInternet As HINTERNET,ByVal lpszServerName As LPCWSTR,ByVal nServerPort As INTERNET_PORT,ByVal lpszUserName As LPCWSTR,ByVal lpszPassword As LPCWSTR,ByVal dwService As DWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As HINTERNET
InternetOpen(ByVal lpszAgent As LPCWSTR,ByVal dwAccessType As DWORD,ByVal lpszProxy As LPCWSTR,ByVal lpszProxyBypass As LPCWSTR,ByVal dwFlags As DWORD) As HINTERNET
InternetCombineUrl(ByVal lpszBaseUrl As LPCWSTR,ByVal lpszRelativeUrl As LPCWSTR,ByVal lpszBuffer As LPWSTR,ByVal lpdwBufferLength As PDWORD,ByVal dwFlags As DWORD) As BOOL
InternetCheckConnection(ByVal lpszUrl As LPCWSTR,ByVal dwFlags As DWORD,ByVal dwReserved As DWORD) As BOOL
InternetCanonicalizeUrl(ByVal lpszUrl As LPCWSTR,ByVal lpszBuffer As LPWSTR,ByVal lpdwBufferLength As PDWORD,ByVal dwFlags As DWORD) As BOOL
InternetCreateUrl(ByVal lpUrlComponents As LPURL_COMPONENTSW,ByVal dwFlags As DWORD,ByVal lpszUrl As LPWSTR,ByVal lpdwUrlLength As PDWORD) As BOOL
InternetCrackUrl(ByVal lpszUrl As LPCWSTR,ByVal dwUrlLength As DWORD,ByVal dwFlags As DWORD,ByVal lpUrlComponents As LPURL_COMPONENTSW) As BOOL
InternetSetDialState(ByVal lpszConnectoid As LPCTSTR,ByVal dwState As DWORD,ByVal dwReserved As DWORD) As BOOL
InternetGetConnectedState(ByVal lpdwFlags As LPDWORD,ByVal dwReserved As DWORD) As BOOL
InternetAutodialHangup(ByVal dwReserved As DWORD) As BOOL
InternetAutodial(ByVal dwFlags As DWORD,ByVal hwndParent As DWORD) As BOOL
InternetGoOnline(ByVal lpszURL As LPTSTR,ByVal hwndParent As HWND,ByVal dwFlags As DWORD) As BOOL
InternetHangUp(ByVal dwConnection As DWORD,ByVal dwReserved As DWORD) As DWORD
InternetDial(ByVal hwndParent As HWND,ByVal lpszConnectoid As LPTSTR,ByVal dwFlags As DWORD,ByVal lpdwConnection As LPDWORD,ByVal dwReserved As DWORD) As DWORD
InternetConfirmZoneCrossing(ByVal hWnd As HWND,ByVal szUrlPrev As LPSTR,ByVal szUrlNew As LPSTR,ByVal bPost As BOOL) As DWORD
InternetErrorDlg(ByVal hWnd As HWND,ByVal hRequest As HINTERNET,ByVal dwError As DWORD,ByVal dwFlags As DWORD,ByVal lppvData As PVOID PTR) As DWORD
InterlockedDecrement(ByVal lpAddend As LPLONG) As LONG
InternetAttemptConnect(ByVal dwReserved As DWORD) As DWORD
InternetSetStatusCallback(ByVal hInternet As HINTERNET,ByVal lpfnInternetCallback As INTERNET_STATUS_CALLBACK) As INTERNET_STATUS_CALLBACK
InternetQueryDataAvailable(ByVal hFile As HINTERNET,ByVal lpdwNumberOfBytesAvailable As PDWORD,ByVal dwFlags As DWORD,ByVal dwContext As DWORD) As BOOL
InterlockedExchange(ByVal Target As LPLONG,ByVal Value As LONG) As LONG
InterlockedExchangeAdd(ByVal Addend As LPLONG,ByVal Value As LONG) As LONG
InterlockedCompareExchange(ByVal Destination As LPLONG,ByVal Exchange As LONG,ByVal Comperand As LONG) As LONG
InternetWriteFile(ByVal hFile As HINTERNET,ByVal lpBuffer As LPCVOID,ByVal dwNumberOfBytesToWrite As DWORD,ByVal lpdwNumberOfBytesWritten As PDWORD) As BOOL
InternetSetFilePointer(ByVal hFile As HINTERNET,ByVal lDistanceToMove As LONG,ByVal pReserved As PVOID,ByVal dwMoveMethod As DWORD,ByVal dwContext As DWORD) As DWORD
InternetReadFile(ByVal hFile As HINTERNET,ByVal lpBuffer As PVOID,ByVal dwNumberOfBytesToRead As DWORD,ByVal lpdwNumberOfBytesRead As PDWORD) As BOOL
InternetCloseHandle(ByVal hInternet As HINTERNET) As BOOL
InterlockedFlushSList(ByVal As PSLIST_HEADER) As PSingle_LIST_ENTRY
InterlockedIncrement(ByVal lpAddend As LPLONG) As LONG
InternetReadFileEx(ByVal hFile As HINTERNET,ByVal lpBuffersOut As LPINTERNET_BUFFERSA,ByVal dwFlags As DWORD,ByVal dwContext As DWORD_PTR) As BOOL
IntlStrEqWorker(ByVal fCaseSens As BOOL,ByVal lpString1 As LPCWSTR,ByVal lpString2 As LPCWSTR,ByVal nChar As Integer) As BOOL
IntlStrEqWorker(ByVal fCaseSens As BOOL,ByVal lpString1 As LPCSTR,ByVal lpString2 As LPCSTR,ByVal nChar As Integer) As BOOL
InvalidateRgn(ByVal hwnd As HWND,ByVal hRgn As HRGN,ByVal bErase As BOOL) As BOOL
InvalidateRect(ByVal hwnd As HWND,ByVal lpRect As LPCRECT,ByVal fBoolean As BOOL) As BOOL
InvertRgn(ByVal hdc As HDC,ByVal hRgn As HRGN) As BOOL
InvertRect(ByVal hdc As HDC,ByVal lpRect As LPCRECT) As BOOL
ioctlsocket(ByVal s As SOCKET,ByVal cmd As Integer,ByVal argp As u_long PTR) As Integer
IPersistStorage_SaveCompleted_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistStorage_HandsOffStorage_Proxy(ByVal As IPersistStorage PTR) As HRESULT
IPersistStorage_HandsOffStorage_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistStorage_SaveCompleted_Proxy(ByVal As IPersistStorage PTR,ByVal As IStorage PTR) As HRESULT
IPersistStorage_Save_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistFile_Save_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistFile_Load_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistFile_IsDirty_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistFile_SaveCompleted_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistFile_GetCurFile_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistStorage_IsDirty_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersist_GetClassID_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistStream_IsDirty_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistStream_Load_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistStream_Save_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistStream_GetSizeMax_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistStorage_InitNew_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersist_GetClassID_Proxy(ByVal As IPersist PTR,ByVal As CLSID PTR) As HRESULT
IPersistStorage_Save_Proxy(ByVal As IPersistStorage PTR,ByVal As IStorage PTR,ByVal As BOOL) As HRESULT
IPersistStorage_Load_Proxy(ByVal As IPersistStorage PTR,ByVal As IStorage PTR) As HRESULT
IPersistStorage_InitNew_Proxy(ByVal As IPersistStorage PTR,ByVal As IStorage PTR) As HRESULT
IPersistStorage_IsDirty_Proxy(ByVal As IPersistStorage PTR) As HRESULT
IPersistFile_GetCurFile_Proxy(ByVal As IPersistFile PTR,ByVal As LPCSTR PTR) As HRESULT
IPersistFile_SaveCompleted_Proxy(ByVal As IPersistFile PTR,ByVal As LPCOLESTR) As HRESULT
IPersistFile_Save_Proxy(ByVal As IPersistFile PTR,ByVal pszFileName As LPCOLESTR,ByVal As BOOL) As HRESULT
IPersistStorage_Load_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPersistFile_Load_Proxy(ByVal As IPersistFile PTR,ByVal As LPCOLESTR,ByVal As DWORD) As HRESULT
IPersistFile_IsDirty_Proxy(ByVal As IPersistFile PTR) As HRESULT
IPersistStream_GetSizeMax_Proxy(ByVal As IPersistStream PTR,ByVal As ULARGE_INTEGER PTR) As HRESULT
IPersistStream_Save_Proxy(ByVal As IPersistStream PTR,ByVal As IStream PTR,ByVal As BOOL) As HRESULT
IPersistStream_Load_Proxy(ByVal As IPersistStream PTR,ByVal As IStream PTR) As HRESULT
IPersistStream_IsDirty_Proxy(ByVal As IPersistStream PTR) As HRESULT
IpRenewAddress(ByVal AdapterInfo As PIP_ADAPTER_INDEX_MAP) As DWORD
IpReleaseAddress(ByVal AdapterInfo As PIP_ADAPTER_INDEX_MAP) As DWORD
IPSFactoryBuffer_CreateProxy_Proxy(ByVal As IPSFactoryBuffer PTR,ByVal As IUnknown PTR,ByVal As IID PTR,ByVal As IRpcProxyBuffer PTR PTR,ByVal As any PTR PTR) As HRESULT
IPSFactoryBuffer_CreateStub_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IPSFactoryBuffer_CreateStub_Proxy(ByVal As IPSFactoryBuffer PTR,ByVal As IID PTR,ByVal As IUnknown PTR,ByVal As IRpcStubBuffer PTR PTR) As HRESULT
IPSFactoryBuffer_CreateProxy_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRootStorage_SwitchToFile_Proxy(ByVal As IRootStorage PTR,ByVal As LPCSTR) As HRESULT
IRootStorage_SwitchToFile_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IROTData_GetComparisonData_Proxy(ByVal As IROTData PTR,ByVal As BYTE PTR,ByVal cbMax As ULONG,ByVal As ULONG PTR) As HRESULT
IROTData_GetComparisonData_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcStubBuffer_DebugServerQueryInterface_Proxy(ByVal As IRpcStubBuffer PTR,ByVal As any PTR PTR) As HRESULT
IRpcStubBuffer_Connect_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcProxyBuffer_Disconnect_Proxy(ByVal As IRpcProxyBuffer PTR) 
IRpcStubBuffer_CountRefs_Proxy(ByVal As IRpcStubBuffer PTR) As ULONG
IRpcStubBuffer_IsIIDSupported_Proxy(ByVal As IRpcStubBuffer PTR,ByVal As IID PTR) As IRpcStubBuffer PTR
IRpcStubBuffer_Invoke_Proxy(ByVal As IRpcStubBuffer PTR,ByVal As RPCOLEMESSAGE PTR,ByVal As IRpcChannelBuffer PTR) As HRESULT
IRpcProxyBuffer_Connect_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcChannelBuffer_IsConnected_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcChannelBuffer_GetDestCtx_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcChannelBuffer_FreeBuffer_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcChannelBuffer_GetBuffer_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcStubBuffer_DebugServerRelease_Proxy(ByVal As IRpcStubBuffer PTR,ByVal As any PTR) 
IRpcStubBuffer_DebugServerQueryInterface_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcStubBuffer_CountRefs_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcStubBuffer_IsIIDSupported_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcStubBuffer_Invoke_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcStubBuffer_Disconnect_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcStubBuffer_Disconnect_Proxy(ByVal As IRpcStubBuffer PTR) 
IRpcChannelBuffer_SendReceive_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcProxyBuffer_Disconnect_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcStubBuffer_DebugServerRelease_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRpcChannelBuffer_GetBuffer_Proxy(ByVal As IRpcChannelBuffer PTR,ByVal As RPCOLEMESSAGE PTR,ByVal As IID PTR) As HRESULT
IRpcChannelBuffer_SendReceive_Proxy(ByVal As IRpcChannelBuffer PTR,ByVal As RPCOLEMESSAGE PTR,ByVal As ULONG PTR) As HRESULT
IRpcChannelBuffer_FreeBuffer_Proxy(ByVal As IRpcChannelBuffer PTR,ByVal As RPCOLEMESSAGE PTR) As HRESULT
IRpcChannelBuffer_GetDestCtx_Proxy(ByVal As IRpcChannelBuffer PTR,ByVal As DWORD PTR,ByVal As any PTR PTR) As HRESULT
IRpcChannelBuffer_IsConnected_Proxy(ByVal As IRpcChannelBuffer PTR) As HRESULT
IRpcProxyBuffer_Connect_Proxy(ByVal As IRpcProxyBuffer PTR,ByVal pRpcChannelBuffer As IRpcChannelBuffer PTR) As HRESULT
IRpcStubBuffer_Connect_Proxy(ByVal As IRpcStubBuffer PTR,ByVal As IUnknown PTR) As HRESULT
IRunningObjectTable_NoteChangeTime_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunnableObject_LockRunning_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunnableObject_SetContainedObject_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunnableObject_GetRunningClass_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunnableObject_Run_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunnableObject_LockRunning_Proxy(ByVal As IRunnableObject PTR,ByVal As BOOL,ByVal As BOOL) As HRESULT
IRunnableObject_SetContainedObject_Proxy(ByVal As IRunnableObject PTR,ByVal As BOOL) As HRESULT
IRunningObjectTable_Register_Proxy(ByVal As IRunningObjectTable PTR,ByVal As DWORD,ByVal As IUnknown PTR,ByVal As IMoniker PTR,ByVal As DWORD PTR) As HRESULT
IRunningObjectTable_EnumRunning_Proxy(ByVal As IRunningObjectTable PTR,ByVal As IEnumMoniker PTR PTR) As HRESULT
IRunningObjectTable_GetTimeOfLastChange_Proxy(ByVal As IRunningObjectTable PTR,ByVal As IMoniker PTR,ByVal As FILETIME PTR) As HRESULT
IRunningObjectTable_NoteChangeTime_Proxy(ByVal As IRunningObjectTable PTR,ByVal As DWORD,ByVal As FILETIME PTR) As HRESULT
IRunningObjectTable_GetObject_Proxy(ByVal As IRunningObjectTable PTR,ByVal As IMoniker PTR,ByVal As IUnknown PTR PTR) As HRESULT
IRunningObjectTable_IsRunning_Proxy(ByVal As IRunningObjectTable PTR,ByVal As IMoniker PTR) As HRESULT
IRunningObjectTable_Register_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunningObjectTable_EnumRunning_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunningObjectTable_GetTimeOfLastChange_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunningObjectTable_Revoke_Proxy(ByVal As IRunningObjectTable PTR,ByVal As DWORD) As HRESULT
IRunningObjectTable_GetObject_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunningObjectTable_IsRunning_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunnableObject_GetRunningClass_Proxy(ByVal As IRunnableObject PTR,ByVal As LPCLSID) As HRESULT
IRunnableObject_Run_Proxy(ByVal As IRunnableObject PTR,ByVal As LPBINDCTX) As HRESULT
IRunnableObject_IsRunning_Proxy(ByVal As IRunnableObject PTR) As BOOL
IRunningObjectTable_Revoke_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IRunnableObject_IsRunning_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IsAccelerator(ByVal hAccel As HACCEL,ByVal cAccelEntries As Integer,ByVal lpMsg As LPMSG,ByVal lpwCmd As WORD PTR) As BOOL
IsAdminOverrideActive(ByVal As PADMINISTRATOR_POWER_POLICY) As BOOLEAN
IsAppThemed() As BOOL
IsBadCodePtr(ByVal lpfn As FARPROC) As BOOL
IsBadReadPtr(ByVal lp As PCVOID,ByVal ucb As UINT) As BOOL
IsBadWritePtr(ByVal lp As PVOID,ByVal ucb As UINT) As BOOL
IsBadStringPtr(ByVal lpsz As LPCWSTR,ByVal ucchMax As UINT) As BOOL
IsBadHugeReadPtr(ByVal lp As PCVOID,ByVal ucb As UINT) As BOOL
IsBadStringPtr(ByVal lpsz As LPCSTR,ByVal ucchMax As UINT) As BOOL
IsBadHugeWritePtr(ByVal lp As PVOID,ByVal ucb As UINT) As BOOL
IsChild(ByVal hWndParent As HWND,ByVal hwnd As HWND) As BOOL
IsCharLower(ByVal cChar As WCHAR) As BOOL
IsCharAlpha(ByVal ch As CHAR) As BOOL
IsCharAlphaNumeric(ByVal cChar As WCHAR) As BOOL
IsCharLower(ByVal cChar As CHAR) As BOOL
IsCharAlpha(ByVal cChar As WCHAR) As BOOL
IsCharAlphaNumeric(ByVal cChar As CHAR) As BOOL
IsCharUpper(ByVal cChar As WCHAR) As BOOL
IsCharUpper(ByVal cChar As CHAR) As BOOL
IsClipboardFormatAvailable(ByVal wFormat As UINT) As BOOL
IsDBCSLeadByteEx(ByVal CodePage As UINT,ByVal TestChar As BYTE) As BOOL
IsDBCSLeadByte(ByVal bTestChar As BYTE) As BOOL
IsDebuggerPresent() As BOOL
IsDialogMessage(ByVal hDlg As HWND,ByVal lpMsg As LPMSG) As BOOL
IsDlgButtonChecked(ByVal hDlg As HWND,ByVal nIDButton As Integer) As UINT
IsGUIThread(ByVal As BOOL) As BOOL
IsHungAppWindow(ByVal As HWND) As BOOL
IsIconic(ByVal hwnd As HWND) As BOOL
IsMenu(ByVal hMenu As HMENU) As BOOL
IsNLSDefinedString(ByVal As NLS_FUNCTION,ByVal As DWORD,ByVal As LPNLSVERSIONINFO,ByVal As LPCWSTR,ByVal As Integer) As BOOL
IsProcessorFeaturePresent(ByVal ProcessorFeature As DWORD) As BOOL
IsProcessInJob(ByVal As HANDLE,ByVal As HANDLE,ByVal As PBOOL) As BOOL
IsPwrShutdownAllowed() As BOOLEAN
IsPwrSuspendAllowed() As BOOLEAN
IsPwrHibernateAllowed() As BOOLEAN
IsRectEmpty(ByVal lpRect As LPCRECT) As BOOL
IsSystemResumeAutomatic() As BOOL
IStdMarshalInfo_GetClassForHandler_Proxy(ByVal As IStdMarshalInfo PTR,ByVal As DWORD,ByVal As any PTR,ByVal As CLSID PTR) As HRESULT
IStdMarshalInfo_GetClassForHandler_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IsTextUnicode(ByVal lpBuffer As PCVOID,ByVal cb As Integer,ByVal lpi As LPINT) As BOOL
IsThemePartDefined(ByVal As HTHEME,ByVal As Integer,ByVal As Integer) As BOOL
IsThemeDialogTextureEnabled(ByVal As HWND) As BOOL
IsThemeBackgroundPartiallyTransparent(ByVal As HTHEME,ByVal As Integer,ByVal As Integer) As BOOL
IsThemeActive() As BOOL
IStorage_OpenStorage_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_CopyTo_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_Commit_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_Stat_Proxy(ByVal As IStorage PTR,ByVal As STATSTG PTR,ByVal As DWORD) As HRESULT
IStorage_CreateStorage_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_DestroyElement_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_OpenStream_Stub(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As uinteger,ByVal As BYTE PTR,ByVal As DWORD,ByVal As DWORD,ByVal As IStream PTR PTR) As HRESULT
IStorage_OpenStream_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As any PTR,ByVal As DWORD,ByVal As DWORD,ByVal As IStream PTR PTR) As HRESULT
IStorage_EnumElements_Proxy(ByVal As IStorage PTR,ByVal As DWORD,ByVal As any PTR,ByVal As DWORD,ByVal As IEnumSTATSTG PTR PTR) As HRESULT
IStorage_RemoteOpenStream_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_EnumElements_Stub(ByVal As IStorage PTR,ByVal As DWORD,ByVal As uinteger,ByVal As BYTE PTR,ByVal As DWORD,ByVal As IEnumSTATSTG PTR PTR) As HRESULT
IStorage_SetClass_Proxy(ByVal As IStorage PTR,ByVal As CLSID PTR) As HRESULT
IStorage_SetElementTimes_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As FILETIME PTR,ByVal As FILETIME PTR,ByVal As FILETIME PTR) As HRESULT
IStorage_RenameElement_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As OLECHAR PTR) As HRESULT
IStorage_DestroyElement_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR) As HRESULT
IStorage_RemoteEnumElements_Proxy(ByVal As IStorage PTR,ByVal As DWORD,ByVal As uinteger,ByVal As BYTE PTR,ByVal As DWORD,ByVal As IEnumSTATSTG PTR PTR) As HRESULT
IStorage_Revert_Proxy(ByVal As IStorage PTR) As HRESULT
IStorage_Commit_Proxy(ByVal As IStorage PTR,ByVal As DWORD) As HRESULT
IStorage_MoveElementTo_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As DWORD) As HRESULT
IStorage_CopyTo_Proxy(ByVal As IStorage PTR,ByVal As DWORD,ByVal As IID PTR,ByVal As SNB,ByVal As IStorage PTR) As HRESULT
IStorage_OpenStorage_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As IStorage PTR,ByVal As DWORD,ByVal As SNB,ByVal As DWORD,ByVal As IStorage PTR PTR) As HRESULT
IStorage_CreateStorage_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As DWORD,ByVal As DWORD,ByVal As DWORD,ByVal As IStorage PTR PTR) As HRESULT
IStorage_RemoteOpenStream_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As uinteger,ByVal As BYTE PTR,ByVal As DWORD,ByVal As DWORD,ByVal As IStream PTR PTR) As HRESULT
IStorage_CreateStream_Proxy(ByVal As IStorage PTR,ByVal As OLECHAR PTR,ByVal As DWORD,ByVal As DWORD,ByVal As DWORD,ByVal As IStream PTR PTR) As HRESULT
IStorage_MoveElementTo_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_RemoteEnumElements_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_Revert_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_SetStateBits_Proxy(ByVal As IStorage PTR,ByVal As DWORD,ByVal As DWORD) As HRESULT
IStorage_Stat_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_SetStateBits_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_SetClass_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_SetElementTimes_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_RenameElement_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStorage_CreateStream_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_SetSize_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_Revert_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_Clone_Proxy(ByVal As IStream PTR,ByVal As IStream PTR PTR) As HRESULT
IStream_Stat_Proxy(ByVal As IStream PTR,ByVal As STATSTG PTR,ByVal As DWORD) As HRESULT
IStream_UnlockRegion_Proxy(ByVal As IStream PTR,ByVal As ULARGE_INTEGER,ByVal As ULARGE_INTEGER,ByVal As DWORD) As HRESULT
IStream_RemoteCopyTo_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_Stat_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_UnlockRegion_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_LockRegion_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_CopyTo_Stub(ByVal As IStream PTR,ByVal As IStream PTR,ByVal As ULARGE_INTEGER,ByVal As ULARGE_INTEGER PTR,ByVal As ULARGE_INTEGER PTR) As HRESULT
IStream_CopyTo_Proxy(ByVal As IStream PTR,ByVal As IStream PTR,ByVal As ULARGE_INTEGER,ByVal As ULARGE_INTEGER PTR,ByVal As ULARGE_INTEGER PTR) As HRESULT
IStream_Seek_Stub(ByVal As IStream PTR,ByVal As LARGE_INTEGER,ByVal As DWORD,ByVal As ULARGE_INTEGER PTR) As HRESULT
IStream_Seek_Proxy(ByVal As IStream PTR,ByVal As LARGE_INTEGER,ByVal As DWORD,ByVal As ULARGE_INTEGER PTR) As HRESULT
IStream_Write_Stub(ByVal As IStream PTR,ByVal As BYTE PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
IStream_Write_Proxy(ByVal As IStream PTR,ByVal As any PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
IStream_Read_Stub(ByVal As IStream PTR,ByVal As BYTE PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
IStream_Read_Proxy(ByVal As IStream PTR,ByVal As any PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
IStream_RemoteRead_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_RemoteRead_Proxy(ByVal As IStream PTR,ByVal As BYTE PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
IStream_RemoteWrite_Proxy(ByVal As IStream PTR,ByVal pv As BYTE PTR,ByVal As ULONG,ByVal As ULONG PTR) As HRESULT
IStream_RemoteSeek_Proxy(ByVal As IStream PTR,ByVal As LARGE_INTEGER,ByVal As DWORD,ByVal As ULARGE_INTEGER PTR) As HRESULT
IStream_RemoteWrite_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_RemoteSeek_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_LockRegion_Proxy(ByVal As IStream PTR,ByVal As ULARGE_INTEGER,ByVal As ULARGE_INTEGER,ByVal As DWORD) As HRESULT
IStream_Clone_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_Commit_Stub(ByVal As IRpcStubBuffer PTR,ByVal As IRpcChannelBuffer PTR,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IStream_SetSize_Proxy(ByVal As IStream PTR,ByVal As ULARGE_INTEGER) As HRESULT
IStream_RemoteCopyTo_Proxy(ByVal As IStream PTR,ByVal As IStream PTR,ByVal As ULARGE_INTEGER,ByVal As ULARGE_INTEGER PTR,ByVal As ULARGE_INTEGER PTR) As HRESULT
IStream_Commit_Proxy(ByVal As IStream PTR,ByVal As DWORD) As HRESULT
IStream_Revert_Proxy(ByVal As IStream PTR) As HRESULT
IsValidLocale(ByVal Locale As LCID,ByVal dwFlags As DWORD) As BOOL
IsValidSid(ByVal pSid As PSID) As BOOL
IsValidAcl(ByVal pAcl As PACL) As BOOL
IsValidCodePage(ByVal CodePage As UINT) As BOOL
IsValidSecurityDescriptor(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR) As BOOL
IsWindowEnabled(ByVal hwnd As HWND) As BOOL
IsWindowVisible(ByVal hwnd As HWND) As BOOL
IsWinEventHookInstalled(ByVal As DWORD) As BOOL
IsWindow(ByVal hwnd As HWND) As BOOL
IsWindowUnicode(ByVal hwnd As HWND) As BOOL
IsWow64Process(ByVal As HANDLE,ByVal As PBOOL) As BOOL
IsZoomed(ByVal hwnd As HWND) As BOOL
IUnknown_Release_Proxy(ByVal This As IUnknown PTR) As ULONG
IUnknown_AddRef_Proxy(ByVal This As IUnknown PTR) As ULONG
IUnknown_QueryInterface_Proxy(ByVal This As IUnknown PTR,ByVal riid As IID PTR,ByVal ppvObject As any PTR PTR) As HRESULT
IUnknown_Release_Stub(ByVal As LPRPCSTUBBUFFER,ByVal As LPRPCCHANNELBUFFER,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IUnknown_AddRef_Stub(ByVal As LPRPCSTUBBUFFER,ByVal As LPRPCCHANNELBUFFER,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
IUnknown_QueryInterface_Stub(ByVal As LPRPCSTUBBUFFER,ByVal As LPRPCCHANNELBUFFER,ByVal As PRPC_MESSAGE,ByVal As PDWORD) 
joyGetNumDevs() As UINT
joyGetDevCaps(ByVal id As UINT,ByVal lpCaps As LPJOYCAPSW,ByVal uSize As UINT) As MMRESULT
joyGetThreshold(ByVal id As UINT,ByVal lpuThreshold As LPUINT) As MMRESULT
joyGetDevCaps(ByVal id As UINT,ByVal lpCaps As LPJOYCAPSA,ByVal uSize As UINT) As MMRESULT
joyGetPos(ByVal uJoyID As UINT,ByVal pji As LPJOYINFO) As MMRESULT
joyGetPosEx(ByVal uJoyID As UINT,ByVal pji As LPJOYINFOEX) As MMRESULT
joyReleaseCapture(ByVal id As UINT) As MMRESULT
joySetCapture(ByVal hwnd As HWND,ByVal uID As UINT,ByVal uPeriod As UINT,ByVal bChanged As BOOL) As MMRESULT
joySetThreshold(ByVal id As UINT,ByVal uThreshold As UINT) As MMRESULT
keybd_event(ByVal bVk As BYTE,ByVal bScan As BYTE,ByVal dwFlags As DWORD,ByVal dwExtraInfo As DWORD) 
KillTimer(ByVal hwnd As HWND,ByVal nIDEvent As UINT) As BOOL
LargeIntegerDivide(ByVal As LARGE_INTEGER,ByVal As LARGE_INTEGER,ByVal As PLARGE_INTEGER) As LARGE_INTEGER
LBItemFromPt(ByVal hLB As HWND,ByVal pt As POINT,ByVal bAutoScroll As BOOL) As Integer
LCMapString(ByVal Locale As LCID,ByVal dwMapFlags As DWORD,ByVal lpSrcStr As LPCSTR,ByVal cchSrc As Integer,ByVal lpDestStr As LPSTR,ByVal cchDest As Integer) As Integer
LCMapString(ByVal Locale As LCID,ByVal dwMapFlags As DWORD,ByVal lpSrcStr As LPCWSTR,ByVal cchSrc As Integer,ByVal lpDestStr As LPWSTR,ByVal cchDest As Integer) As Integer
LdapMapErrorToWin32(ByVal LdapError As ULONG) As ULONG
LdapGetLastError() As ULONG
LdapUTF8ToUnicode(ByVal lpSrcStr As LPCSTR,ByVal cchSrc As Integer,ByVal lpDestStr As LPWSTR,ByVal cchDest As Integer) As INT_
LdapUnicodeToUTF8(ByVal lpSrcStr As LPCWSTR,ByVal cchSrc As Integer,ByVal lpDestStr As LPSTR,ByVal cchDest As Integer) As INT_
ldap_parse_reference(ByVal Connection As LDAP PTR,ByVal ResultMessage As LDAPMessage PTR,ByVal Referrals As PCHAR PTR PTR) As ULONG
ldap_ufn2dn(ByVal ufn As PCHAR,ByVal pDn As PCHAR PTR) As ULONG
ldap_dn2ufn(ByVal dn As PCHAR) As PCHAR
ldap_modify_ext_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal mods As LDAPModA PTR PTR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR) As ULONG
ldap_check_filter(ByVal ld As LDAP PTR,ByVal SearchFilter As PCHAR) As ULONG
ldap_modify_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal mods As LDAPModW PTR PTR) As ULONG
ldap_modify(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal mods As LDAPModW PTR PTR) As ULONG
ldap_sasl_bind_s(ByVal ExternalHandle As LDAP PTR,ByVal DistName As PCHAR,ByVal AuthMechanism As PCHAR,ByVal cred As BERVAL PTR,ByVal ServerCtrls As PLDAPControlA PTR,ByVal ClientCtrls As PLDAPControlA PTR,ByVal ServerData As PBERVAL PTR) As ULONG
ldap_modify_ext_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal mods As LDAPModW PTR PTR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR) As ULONG
ldap_modify_ext(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal mods As LDAPModW PTR PTR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_compare_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal attr As PWCHAR,ByVal value As PWCHAR) As ULONG
ldap_compare(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal attr As PWCHAR,ByVal value As PWCHAR) As ULONG
ldap_compare_ext_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal Attr As PWCHAR,ByVal Value As PWCHAR,ByVal Data As berval PTR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR) As ULONG
ldap_compare_ext(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal Attr As PWCHAR,ByVal Value As PWCHAR,ByVal Data As berval PTR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_simple_bind(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal passwd As PCHAR) As ULONG
ldap_simple_bind_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal passwd As PCHAR) As ULONG
ldap_search_st(ByVal ld As LDAP PTR,ByVal base As PWCHAR,ByVal scope As ULONG,ByVal filter As PWCHAR,ByVal attrs As PWCHAR PTR,ByVal attrsonly As ULONG,ByVal timeout As LDAP_TIMEVAL PTR,ByVal res As LDAPMessage PTR PTR) As ULONG
ldap_search_s(ByVal ld As LDAP PTR,ByVal base As PWCHAR,ByVal scope As ULONG,ByVal filter As PWCHAR,ByVal attrs As PWCHAR PTR,ByVal attrsonly As ULONG,ByVal res As LDAPMessage PTR PTR) As ULONG
ldap_search(ByVal ld As LDAP PTR,ByVal base As PWCHAR,ByVal scope As ULONG,ByVal filter As PWCHAR,ByVal attrs As PWCHAR PTR,ByVal attrsonly As ULONG) As ULONG
ldap_search_ext_s(ByVal ld As LDAP PTR,ByVal base As PWCHAR,ByVal scope As ULONG,ByVal filter As PWCHAR,ByVal attrs As PWCHAR PTR,ByVal attrsonly As ULONG,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal timeout As LDAP_TIMEVAL PTR,ByVal SizeLimit As ULONG,ByVal res As LDAPMessage PTR PTR) As ULONG
ldap_search_ext(ByVal ld As LDAP PTR,ByVal base As PWCHAR,ByVal scope As ULONG,ByVal filter As PWCHAR,ByVal attrs As PWCHAR PTR,ByVal attrsonly As ULONG,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal TimeLimit As ULONG,ByVal SizeLimit As ULONG,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_bind_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal cred As PWCHAR,ByVal method As ULONG) As ULONG
ldap_bind(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal cred As PCHAR,ByVal method As ULONG) As ULONG
ldap_bind(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal cred As PWCHAR,ByVal method As ULONG) As ULONG
ldap_simple_bind_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal passwd As PWCHAR) As ULONG
ldap_simple_bind(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal passwd As PWCHAR) As ULONG
ldap_sasl_bind_s(ByVal ExternalHandle As LDAP PTR,ByVal DistName As PWCHAR,ByVal AuthMechanism As PWCHAR,ByVal cred As BERVAL PTR,ByVal ServerCtrls As PLDAPControlW PTR,ByVal ClientCtrls As PLDAPControlW PTR,ByVal ServerData As PBERVAL PTR) As ULONG
ldap_sasl_bind(ByVal ExternalHandle As LDAP PTR,ByVal DistName As PWCHAR,ByVal AuthMechanism As PWCHAR,ByVal cred As BERVAL PTR,ByVal ServerCtrls As PLDAPControlW PTR,ByVal ClientCtrls As PLDAPControlW PTR,ByVal MessageNumber As Integer PTR) As ULONG
ldap_free_controls(ByVal Controls As LDAPControlW PTR PTR) As ULONG
ldap_controls_free(ByVal Controls As LDAPControlW PTR PTR) As ULONG
ldap_control_free(ByVal Control As LDAPControlW PTR) As ULONG
ldap_set_option(ByVal ld As LDAP PTR,ByVal lOption As Integer,ByVal Long As any PTR) As ULONG
ldap_get_option(ByVal ld As LDAP PTR,ByVal lOption As Integer,ByVal Long As any PTR) As ULONG
ldap_start_tls_s(ByVal As LDAP PTR,ByVal As PLDAPControlW PTR,ByVal As PLDAPControlW PTR) As ULONG
ldap_bind_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal cred As PCHAR,ByVal method As ULONG) As ULONG
ldap_parse_reference(ByVal Connection As LDAP PTR,ByVal ResultMessage As LDAPMessage PTR,ByVal Referrals As PWCHAR PTR PTR) As ULONG
ldap_search_ext(ByVal ld As LDAP PTR,ByVal base As PCHAR,ByVal scope As ULONG,ByVal filter As PCHAR,ByVal attrs As PCHAR PTR,ByVal attrsonly As ULONG,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal TimeLimit As ULONG,ByVal SizeLimit As ULONG,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_ufn2dn(ByVal ufn As PWCHAR,ByVal pDn As PWCHAR PTR) As ULONG
ldap_dn2ufn(ByVal dn As PWCHAR) As PWCHAR
ldap_explode_dn(ByVal dn As PWCHAR,ByVal notypes As ULONG) As PWCHAR
ldap_get_dn(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR) As PWCHAR
ldap_value_free(ByVal vals As PWCHAR PTR) As ULONG
ldap_add_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal attrs As LDAPModW PTR PTR) As ULONG
ldap_sslinit(ByVal HostName As PWCHAR,ByVal PortNumber As ULONG,ByVal secure As Integer) As PLDAP
ldap_search_ext_s(ByVal ld As LDAP PTR,ByVal base As PCHAR,ByVal scope As ULONG,ByVal filter As PCHAR,ByVal attrs As PCHAR PTR,ByVal attrsonly As ULONG,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR,ByVal timeout As LDAP_TIMEVAL PTR,ByVal SizeLimit As ULONG,ByVal res As LDAPMessage PTR PTR) As ULONG
ldap_open(ByVal HostName As PWCHAR,ByVal PortNumber As ULONG) As PLDAP
ldap_init(ByVal HostName As PWCHAR,ByVal PortNumber As ULONG) As PLDAP
ldap_count_values_len(ByVal vals As berval PTR PTR) As ULONG
ldap_rename_ext(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal NewRDN As PWCHAR,ByVal NewParent As PWCHAR,ByVal DeleteOldRdn As INT_,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_search_init_page(ByVal ExternalHandle As PLDAP,ByVal DistinguishedName As PWCHAR,ByVal ScopeOfSearch As ULONG,ByVal SearchFilter As PWCHAR,ByVal AttributeList As PWCHAR PTR,ByVal AttributesOnly As ULONG,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal PageTimeLimit As ULONG,ByVal TotalSizeLimit As ULONG,ByVal SortKeys As PLDAPSortKeyW PTR) As PLDAPSearch
ldap_conn_from_msg(ByVal PrimaryConn As LDAP PTR,ByVal res As LDAPMessage PTR) As LDAP
ldap_search_abandon_page(ByVal ExternalHandle As PLDAP,ByVal SearchBlock As PLDAPSearch) As ULONG
ldap_get_paged_count(ByVal ExternalHandle As PLDAP,ByVal SearchBlock As PLDAPSearch,ByVal TotalCount As ULONG PTR,ByVal Results As PLDAPMessage) As ULONG
ldap_sasl_bind(ByVal ExternalHandle As LDAP PTR,ByVal DistName As PCHAR,ByVal AuthMechanism As PCHAR,ByVal cred As BERVAL PTR,ByVal ServerCtrls As PLDAPControlA PTR,ByVal ClientCtrls As PLDAPControlA PTR,ByVal MessageNumber As Integer PTR) As ULONG
ldap_get_next_page(ByVal ExternalHandle As PLDAP,ByVal SearchHandle As PLDAPSearch,ByVal PageSize As ULONG,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_value_free_len(ByVal vals As berval PTR PTR) As ULONG
ldap_count_references(ByVal ld As LDAP PTR,ByVal res As LDAPMessage PTR) As ULONG
ldap_search(ByVal ld As LDAP PTR,ByVal base As PCHAR,ByVal scope As ULONG,ByVal filter As PCHAR,ByVal attrs As PCHAR PTR,ByVal attrsonly As ULONG) As ULONG
ldap_count_entries(ByVal ld As LDAP PTR,ByVal res As LDAPMessage PTR) As ULONG
ldap_search_s(ByVal ld As LDAP PTR,ByVal base As PCHAR,ByVal scope As ULONG,ByVal filter As PCHAR,ByVal attrs As PCHAR PTR,ByVal attrsonly As ULONG,ByVal res As LDAPMessage PTR PTR) As ULONG
ldap_next_reference(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR) As PLDAPMessage
ldap_first_reference(ByVal ld As LDAP PTR,ByVal res As LDAPMessage PTR) As PLDAPMessage
ldap_next_entry(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR) As PLDAPMessage
ldap_first_entry(ByVal ld As LDAP PTR,ByVal res As LDAPMessage PTR) As PLDAPMessage
ldap_result2error(ByVal ld As LDAP PTR,ByVal res As LDAPMessage PTR,ByVal freeit As ULONG) As ULONG
ldap_free_controls(ByVal Controls As LDAPControlA PTR PTR) As ULONG
ldap_controls_free(ByVal Controls As LDAPControlA PTR PTR) As ULONG
ldap_msgfree(ByVal res As LDAPMessage PTR) As ULONG
ldap_result(ByVal ld As LDAP PTR,ByVal msgid As ULONG,ByVal all As ULONG,ByVal timeout As LDAP_TIMEVAL PTR,ByVal res As LDAPMessage PTR PTR) As ULONG
ldap_search_st(ByVal ld As LDAP PTR,ByVal base As PCHAR,ByVal scope As ULONG,ByVal filter As PCHAR,ByVal attrs As PCHAR PTR,ByVal attrsonly As ULONG,ByVal timeout As LDAP_TIMEVAL PTR,ByVal res As LDAPMessage PTR PTR) As ULONG
ldap_abandon(ByVal ld As LDAP PTR,ByVal msgid As ULONG) As ULONG
ldap_close_extended_op(ByVal ld As LDAP PTR,ByVal MessageNumber As ULONG) As ULONG
ldap_unbind_s(ByVal ld As LDAP PTR) As ULONG
ldap_unbind(ByVal ld As LDAP PTR) As ULONG
ldap_compare_ext(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal Attr As PCHAR,ByVal Value As PCHAR,ByVal Data As berval PTR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_compare_ext_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal Attr As PCHAR,ByVal Value As PCHAR,ByVal Data As berval PTR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR) As ULONG
ldap_compare(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal attr As PCHAR,ByVal value As PCHAR) As ULONG
ldap_stop_tls_s(ByVal As LDAP PTR) As BOOLEAN
ldap_connect(ByVal ld As LDAP PTR,ByVal timeout As LDAP_TIMEVAL PTR) As ULONG
ldap_extended_operation_s(ByVal As LDAP PTR,ByVal As PWCHAR,ByVal As berval PTR,ByVal As PLDAPControlW PTR,ByVal As PLDAPControlW PTR,ByVal As PWCHAR PTR,ByVal As berval PTR PTR) As ULONG
ldap_rename_ext_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal NewRDN As PWCHAR,ByVal NewParent As PWCHAR,ByVal DeleteOldRdn As INT_,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR) As ULONG
ldap_parse_result(ByVal Connection As LDAP PTR,ByVal ResultMessage As LDAPMessage PTR,ByVal ReturnCode As ULONG PTR,ByVal MatchedDNs As PWCHAR PTR,ByVal ErrorMessage As PWCHAR PTR,ByVal Referrals As PWCHAR PTR PTR,ByVal ServerControls As PLDAPControlW PTR PTR,ByVal Freeit As BOOLEAN) As ULONG
ldap_parse_extended_result(ByVal Connection As LDAP,ByVal ResultMessage As LDAPMessage PTR,ByVal ResultOID As PWCHAR PTR,ByVal ResultData As berval PTR PTR,ByVal Freeit As BOOLEAN) As ULONG
ldap_parse_vlv_control(ByVal As LDAP PTR,ByVal As LDAPControlW PTR PTR,ByVal As uinteger PTR,ByVal As uinteger PTR,ByVal As berval PTR PTR,ByVal As Integer PTR) As INT_
ldap_err2string(ByVal err As ULONG) As PWCHAR
ldap_first_attribute(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR,ByVal ptr As BerElement PTR PTR) As PWCHAR
ldap_memfree(ByVal Block As PWCHAR) 
ldap_memfree(ByVal Block As PCHAR) 
ldap_modrdn(ByVal ExternalHandle As LDAP PTR,ByVal DistinguishedName As PWCHAR,ByVal NewDistinguishedName As PWCHAR) As ULONG
ldap_parse_sort_control(ByVal ExternalHandle As PLDAP,ByVal Control As PLDAPControlW PTR,ByVal Result As ULONG PTR,ByVal sAttribute As PWCHAR PTR) As ULONG
ldap_parse_page_control(ByVal ExternalHandle As PLDAP,ByVal ServerControls As PLDAPControlW PTR,ByVal TotalCount As ULONG PTR,ByVal Cookie As berval PTR PTR) As ULONG
ldap_modrdn_s(ByVal ExternalHandle As LDAP PTR,ByVal DistinguishedName As PWCHAR,ByVal NewDistinguishedName As PWCHAR) As ULONG
ldap_modrdn2(ByVal ExternalHandle As LDAP PTR,ByVal DistinguishedName As PWCHAR,ByVal NewDistinguishedName As PWCHAR,ByVal DeleteOldRdn As INT_) As ULONG
ldap_modrdn2_s(ByVal ExternalHandle As LDAP PTR,ByVal DistinguishedName As PWCHAR,ByVal NewDistinguishedName As PWCHAR,ByVal DeleteOldRdn As INT_) As ULONG
ldap_add_ext(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal attrs As LDAPModW PTR PTR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_control_free(ByVal Control As LDAPControlA PTR) As ULONG
ldap_add_ext_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal attrs As LDAPModW PTR PTR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR) As ULONG
ldap_escape_filter_element(ByVal sourceFilterElement As PWCHAR,ByVal sourceLength As ULONG,ByVal destFilterElement As PWCHAR,ByVal destLength As ULONG) As ULONG
ldap_compare_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal attr As PCHAR,ByVal value As PCHAR) As ULONG
ldap_modify_ext(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal mods As LDAPModA PTR PTR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_create_page_control(ByVal ExternalHandle As PLDAP,ByVal PageSize As ULONG,ByVal Cookie As berval PTR,ByVal IsCritical As UCHAR,ByVal Control As PLDAPControlA PTR) As ULONG
ldap_encode_sort_control(ByVal ExternalHandle As PLDAP,ByVal SortKeys As PLDAPSortKeyW PTR,ByVal Control As PLDAPControlW,ByVal Criticality As BOOLEAN) As ULONG
ldap_set_option(ByVal ld As LDAP PTR,ByVal lOption As Integer,ByVal Long As any PTR) As ULONG
ldap_delete_ext(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_delete_ext_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR) As ULONG
ldap_delete(ByVal ld As LDAP PTR,ByVal dn As PWCHAR) As ULONG
ldap_get_option(ByVal ld As LDAP PTR,ByVal lOption As Integer,ByVal Long As any PTR) As ULONG
ldap_delete_s(ByVal ld As LDAP PTR,ByVal dn As PWCHAR) As ULONG
ldap_extended_operation(ByVal ld As LDAP PTR,ByVal Oid As PWCHAR,ByVal Data As berval PTR,ByVal ServerControls As PLDAPControlW PTR,ByVal ClientControls As PLDAPControlW PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_create_vlv_control(ByVal As LDAP PTR,ByVal As LDAPVLVInfo PTR,ByVal As UCHAR,ByVal As LDAPControlW PTR PTR) As INT_
ldap_create_sort_control(ByVal ExternalHandle As PLDAP,ByVal SortKeys As PLDAPSortKeyW PTR,ByVal IsCritical As UCHAR,ByVal Control As PLDAPControlW PTR) As ULONG
ldap_start_tls_s(ByVal As LDAP PTR,ByVal As PLDAPControlA PTR,ByVal As PLDAPControlA PTR) As ULONG
ldap_sslinit(ByVal HostName As PCHAR,ByVal PortNumber As ULONG,ByVal secure As Integer) As PLDAP
ldap_modify(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal mods As LDAPModA PTR PTR) As ULONG
ldap_modify_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal mods As LDAPModA PTR PTR) As ULONG
ldap_open(ByVal HostName As PCHAR,ByVal PortNumber As ULONG) As PLDAP
ldap_next_attribute(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR,ByVal ptr As BerElement PTR) As PWCHAR
ldap_init(ByVal HostName As PCHAR,ByVal PortNumber As ULONG) As PLDAP
ldap_rename_ext(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal NewRDN As PCHAR,ByVal NewParent As PCHAR,ByVal DeleteOldRdn As INT_,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_rename_ext_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal NewRDN As PCHAR,ByVal NewParent As PCHAR,ByVal DeleteOldRdn As INT_,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR) As ULONG
ldap_get_next_page_s(ByVal ExternalHandle As PLDAP,ByVal SearchHandle As PLDAPSearch,ByVal timeout As LDAP_TIMEVAL PTR,ByVal PageSize As ULONG,ByVal TotalCount As ULONG PTR,ByVal Results As LDAPMessage PTR PTR) As ULONG
ldap_modrdn(ByVal ExternalHandle As LDAP PTR,ByVal DistinguishedName As PCHAR,ByVal NewDistinguishedName As PCHAR) As ULONG
ldap_modrdn_s(ByVal ExternalHandle As LDAP PTR,ByVal DistinguishedName As PCHAR,ByVal NewDistinguishedName As PCHAR) As ULONG
ldap_modrdn2(ByVal ExternalHandle As LDAP PTR,ByVal DistinguishedName As PCHAR,ByVal NewDistinguishedName As PCHAR,ByVal DeleteOldRdn As INT_) As ULONG
ldap_modrdn2_s(ByVal ExternalHandle As LDAP PTR,ByVal DistinguishedName As PCHAR,ByVal NewDistinguishedName As PCHAR,ByVal DeleteOldRdn As INT_) As ULONG
ldap_add_ext(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal attrs As LDAPModA PTR PTR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_add_ext_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal attrs As LDAPModA PTR PTR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR) As ULONG
ldap_add(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal attrs As LDAPModA PTR PTR) As ULONG
ldap_create_page_control(ByVal ExternalHandle As PLDAP,ByVal PageSize As ULONG,ByVal Cookie As berval PTR,ByVal IsCritical As UCHAR,ByVal Control As PLDAPControlW PTR) As ULONG
ldap_add_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal attrs As LDAPModA PTR PTR) As ULONG
ldap_add(ByVal ld As LDAP PTR,ByVal dn As PWCHAR,ByVal attrs As LDAPModW PTR PTR) As ULONG
ldap_delete_ext(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_delete_ext_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR) As ULONG
ldap_get_values(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR,ByVal attr As PWCHAR) As PWCHAR PTR
ldap_delete(ByVal ld As LDAP PTR,ByVal dn As PCHAR) As ULONG
ldap_delete_s(ByVal ld As LDAP PTR,ByVal dn As PCHAR) As ULONG
ldap_get_values_len(ByVal ExternalHandle As LDAP PTR,ByVal Message As LDAPMessage PTR,ByVal attr As PWCHAR) As BerValue PTR PTR
ldap_count_values(ByVal vals As PWCHAR PTR) As ULONG
ldap_check_filter(ByVal ld As LDAP PTR,ByVal SearchFilter As PWCHAR) As ULONG
ldap_extended_operation(ByVal ld As LDAP PTR,ByVal Oid As PCHAR,ByVal Data As berval PTR,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR,ByVal MessageNumber As ULONG PTR) As ULONG
ldap_extended_operation_s(ByVal As LDAP PTR,ByVal As PCHAR,ByVal As berval PTR,ByVal As PLDAPControlA PTR,ByVal As PLDAPControlA PTR,ByVal As PCHAR PTR,ByVal As berval PTR PTR) As ULONG
ldap_parse_result(ByVal Connection As LDAP PTR,ByVal ResultMessage As LDAPMessage PTR,ByVal ReturnCode As ULONG PTR,ByVal MatchedDNs As PCHAR PTR,ByVal ErrorMessage As PCHAR PTR,ByVal Referrals As PCHAR PTR PTR,ByVal ServerControls As PLDAPControlA PTR PTR,ByVal Freeit As BOOLEAN) As ULONG
ldap_parse_extended_result(ByVal Connection As LDAP,ByVal ResultMessage As LDAPMessage PTR,ByVal ResultOID As PCHAR PTR,ByVal ResultData As berval PTR PTR,ByVal Freeit As BOOLEAN) As ULONG
ldap_err2string(ByVal err As ULONG) As PCHAR
ldap_first_attribute(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR,ByVal ptr As BerElement PTR PTR) As PCHAR
ldap_next_attribute(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR,ByVal ptr As BerElement PTR) As PCHAR
ldap_get_values(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR,ByVal attr As PCHAR) As PCHAR PTR
ldap_get_values_len(ByVal ExternalHandle As LDAP PTR,ByVal Message As LDAPMessage PTR,ByVal attr As PCHAR) As BerValue PTR PTR
ldap_count_values(ByVal vals As PCHAR PTR) As ULONG
ldap_value_free(ByVal vals As PCHAR PTR) As ULONG
ldap_get_dn(ByVal ld As LDAP PTR,ByVal entry As LDAPMessage PTR) As PCHAR
ldap_explode_dn(ByVal dn As PCHAR,ByVal notypes As ULONG) As PCHAR
ldap_search_init_page(ByVal ExternalHandle As PLDAP,ByVal DistinguishedName As PCHAR,ByVal ScopeOfSearch As ULONG,ByVal SearchFilter As PCHAR,ByVal AttributeList As PCHAR PTR,ByVal AttributesOnly As ULONG,ByVal ServerControls As PLDAPControlA PTR,ByVal ClientControls As PLDAPControlA PTR,ByVal PageTimeLimit As ULONG,ByVal TotalSizeLimit As ULONG,ByVal SortKeys As PLDAPSortKeyA PTR) As PLDAPSearch
ldap_parse_vlv_control(ByVal As LDAP PTR,ByVal As LDAPControlA PTR PTR,ByVal As uinteger PTR,ByVal As uinteger PTR,ByVal As berval PTR PTR,ByVal As Integer PTR) As INT_
ldap_parse_sort_control(ByVal ExternalHandle As PLDAP,ByVal Control As PLDAPControlA PTR,ByVal Result As ULONG PTR,ByVal sAttribute As PCHAR PTR) As ULONG
ldap_parse_page_control(ByVal ExternalHandle As PLDAP,ByVal ServerControls As PLDAPControlA PTR,ByVal TotalCount As ULONG PTR,ByVal Cookie As berval PTR PTR) As ULONG
ldap_escape_filter_element(ByVal sourceFilterElement As PCHAR,ByVal sourceLength As ULONG,ByVal destFilterElement As PCHAR,ByVal destLength As ULONG) As ULONG
ldap_encode_sort_control(ByVal ExternalHandle As PLDAP,ByVal SortKeys As PLDAPSortKeyA PTR,ByVal Control As PLDAPControlA,ByVal Criticality As BOOLEAN) As ULONG
ldap_create_vlv_control(ByVal As LDAP PTR,ByVal As LDAPVLVInfo PTR,ByVal As UCHAR,ByVal As LDAPControlA PTR PTR) As INT_
ldap_create_sort_control(ByVal ExternalHandle As PLDAP,ByVal SortKeys As PLDAPSortKeyA PTR,ByVal IsCritical As UCHAR,ByVal Control As PLDAPControlA PTR) As ULONG
LeaveCriticalSection(ByVal lpCriticalSection As LPCRITICAL_SECTION) 
LHashValOfNameSys(ByVal syskind As SYSKIND,ByVal lcid As LCID,ByVal szName As OLECHAR PTR) As ULONG
LHashValOfNameSysA(ByVal As SYSKIND,ByVal As LCID,ByVal As zstring PTR) As ULONG
LineDDA(ByVal n1 As Integer,ByVal n2 As Integer,ByVal n3 As Integer,ByVal n4 As Integer,ByVal lpLineDDAProc As LINEDDAPROC,ByVal lParam As LPARAM) As BOOL
LineTo(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer) As BOOL
listen(ByVal s As SOCKET,ByVal backlog As Integer) As Integer
LoadMenuIndirect(ByVal lpMenuTemplate As MENUTEMPLATE PTR) As HMENU
LoadString(ByVal hInstance As HINSTANCE,ByVal wID As UINT,ByVal lpBuffer As LPSTR,ByVal nBufferMax As Integer) As Integer
LoadModule(ByVal lpModuleName As LPCSTR,ByVal lpParameterBlock As PVOID) As DWORD
LoadResource(ByVal hInstance As HINSTANCE,ByVal hResInfo As HRSRC) As HGLOBAL
LoadMenu(ByVal hInstance As HINSTANCE,ByVal lpString As LPCSTR) As HMENU
LoadLibraryEx(ByVal lpLibFileName As LPCWSTR,ByVal hFile As HANDLE,ByVal dwFlags As DWORD) As HINSTANCE
LoadLibrary(ByVal lpLibFileName As LPCWSTR) As HINSTANCE
LoadKeyboardLayout(ByVal pwszKLID As LPCWSTR,ByVal flags As UINT) As HKL
LoadString(ByVal hInstance As HINSTANCE,ByVal wID As UINT,ByVal lpBuffer As LPWSTR,ByVal nBufferMax As Integer) As Integer
LoadImage(ByVal hInst As HINSTANCE,ByVal lpsz As LPCWSTR,ByVal uType As UINT,ByVal n1 As Integer,ByVal n2 As Integer,ByVal uFlags As UINT) As HANDLE
LoadIcon(ByVal hInstance As HINSTANCE,ByVal lpIconName As LPCWSTR) As HICON
LoadMenuIndirect(ByVal lpMenuTemplate As MENUTEMPLATE PTR) As HMENU
LoadCursorFromFile(ByVal lpFileName As LPCWSTR) As HCURSOR
LoadRegTypeLib(ByVal rguid As GUID PTR,ByVal wVerMajor As WORD,ByVal wVerMinor As WORD,ByVal lcid As LCID,ByVal pptlib As LPTYPELIB PTR) As HRESULT
LoadTypeLibEx(ByVal szFile As LPCOLESTR,ByVal regkind As REGKIND,ByVal pptlib As LPTYPELIB PTR) As HRESULT
LoadTypeLib(ByVal TLpszModule As OLECHAR PTR,ByVal TPpTypeLib As LPTYPELIB PTR) As HRESULT
LoadMenu(ByVal hInstance As HINSTANCE,ByVal lpString As LPCWSTR) As HMENU
LoadUserProfile(ByVal hToken As HANDLE,ByVal lpProfileInfo As LPPROFILEINFOA) As BOOL
LoadAccelerators(ByVal hInstance As HINSTANCE,ByVal lpTableName As LPCSTR) As HACCEL
LoadBitmap(ByVal hInstance As HINSTANCE,ByVal lpBitmapName As LPCSTR) As HBITMAP
LoadUserProfile(ByVal hToken As HANDLE,ByVal lpProfileInfo As LPPROFILEINFOW) As BOOL
LoadBitmap(ByVal hInstance As HINSTANCE,ByVal lpBitmapName As LPCWSTR) As HBITMAP
LoadAccelerators(ByVal hInstance As HINSTANCE,ByVal lpTableName As LPCWSTR) As HACCEL
LoadCursor(ByVal hInstance As HINSTANCE,ByVal lpCursorName As LPCWSTR) As HCURSOR
LoadCursor(ByVal hInstance As HINSTANCE,ByVal lpCursorName As LPCSTR) As HCURSOR
LoadLibraryEx(ByVal lpLibFileName As LPCSTR,ByVal hFile As HANDLE,ByVal dwFlags As DWORD) As HINSTANCE
LoadLibrary(ByVal lpLibFileName As LPCSTR) As HINSTANCE
LoadCursorFromFile(ByVal lpFileName As LPCSTR) As HCURSOR
LoadIcon(ByVal hInstance As HINSTANCE,ByVal lpIconName As LPCSTR) As HICON
LoadImage(ByVal hInst As HINSTANCE,ByVal lpsz As LPCSTR,ByVal uType As UINT,ByVal n1 As Integer,ByVal n2 As Integer,ByVal uFlags As UINT) As HANDLE
LoadKeyboardLayout(ByVal pwszKLID As LPCSTR,ByVal flags As UINT) As HKL
LocalFlags(ByVal hMem As HLOCAL) As UINT
LocalSize(ByVal hMem As HLOCAL) As UINT
LocalShrink(ByVal hMem As HLOCAL,ByVal cbNewSize As UINT) As SIZE_T
LocalReAlloc(ByVal hMem As HLOCAL,ByVal wBytes As SIZE_T,ByVal wFlags As UINT) As HLOCAL
LocalLock(ByVal hMem As HLOCAL) As PVOID
LocalCompact(ByVal uMinFree As UINT) As SIZE_T
LocalAlloc(ByVal wFlags As UINT,ByVal wBytes As SIZE_T) As HLOCAL
LocalDiscard(ByVal As HLOCAL) As HLOCAL
LocalFileTimeToFileTime(ByVal lpLocalFileTime As FILETIME PTR,ByVal lpFileTime As LPFILETIME) As BOOL
LocalFree(ByVal hMem As HLOCAL) As HLOCAL
LocalHandle(ByVal wMem As LPCVOID) As HLOCAL
LocalUnlock(ByVal hMem As HLOCAL) As BOOL
LockWorkStation() As BOOL
LockServiceDatabase(ByVal hSCManager As SC_HANDLE) As SC_LOCK
LockFile(ByVal hFile As HANDLE,ByVal dwFileOffsetLow As DWORD,ByVal dwFileOffsetHigh As DWORD,ByVal nNumberOfBytesToLockLow As DWORD,ByVal nNumberOfBytesToLockHigh As DWORD) As BOOL
LockSetForegroundWindow(ByVal uLockCode As UINT) As BOOL
LockResource(ByVal hResData As HGLOBAL) As PVOID
LockWindowUpdate(ByVal hwndLock As HWND) As BOOL
LockFileEx(ByVal hFile As HANDLE,ByVal dwFlags As DWORD,ByVal dwReserved As DWORD,ByVal nNumberOfBytesToLockLow As DWORD,ByVal nNumberOfBytesToLockHigh As DWORD,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
LogonUser(ByVal lpszUsername As LPSTR,ByVal lpszDomain As LPSTR,ByVal lpszPassword As LPSTR,ByVal dwLogonType As DWORD,ByVal dwLogonProvider As DWORD,ByVal phToken As PHANDLE) As BOOL
LogonUser(ByVal lpszUsername As LPWSTR,ByVal lpszDomain As LPWSTR,ByVal lpszPassword As LPWSTR,ByVal dwLogonType As DWORD,ByVal dwLogonProvider As DWORD,ByVal phToken As PHANDLE) As BOOL
long_array_from_ndr(ByVal SourceMessage As PRPC_MESSAGE,ByVal LowerIndex As uinteger,ByVal UpperIndex As uinteger,ByVal Target As uinteger PTR) 
long_from_ndr(ByVal source As PRPC_MESSAGE,ByVal target As uinteger PTR) 
long_from_ndr_temp(ByVal source As ubyte PTR PTR,ByVal target As uinteger PTR,ByVal format As uinteger) 
LookupPrivilegeName(ByVal lpSystemName As LPCWSTR,ByVal lpLuid As PLUID,ByVal lpName As LPWSTR,ByVal cbName As PDWORD) As BOOL
LookupAccountSid(ByVal lpSystemName As LPCSTR,ByVal Sid As PSID,ByVal Name As LPSTR,ByVal cbName As PDWORD,ByVal ReferencedDomainName As LPSTR,ByVal cbReferencedDomainName As PDWORD,ByVal peUse As PSID_NAME_USE) As BOOL
LookupIconIdFromDirectoryEx(ByVal presbits As PBYTE,ByVal fIcon As BOOL,ByVal cxDesired As Integer,ByVal cyDesired As Integer,ByVal Flags As UINT) As Integer
LookupPrivilegeDisplayName(ByVal lpSystemName As LPCSTR,ByVal lpName As LPCSTR,ByVal lpDisplayName As LPSTR,ByVal cbDisplayName As PDWORD,ByVal lpLanguageID As PDWORD) As BOOL
LookupAccountName(ByVal lpSystemName As LPCSTR,ByVal lpAccountName As LPCSTR,ByVal Sid As PSID,ByVal cbSid As PDWORD,ByVal ReferencedDomainName As LPSTR,ByVal cbReferencedDomainName As PDWORD,ByVal peUse As PSID_NAME_USE) As BOOL
LookupSecurityDescriptorParts(ByVal pOwner As PTRUSTEE_W PTR,ByVal pGroup As PTRUSTEE_W PTR,ByVal cCountOfAccessEntries As PULONG,ByVal pListOfAccessEntries As PEXPLICIT_ACCESS_W PTR,ByVal cCountOfAuditEntries As PULONG,ByVal pListOfAuditEntries As PEXPLICIT_ACCESS_W PTR,ByVal pSD As PSECURITY_DESCRIPTOR) As DWORD
LookupAccountName(ByVal lpSystemName As LPCWSTR,ByVal lpAccountName As LPCWSTR,ByVal Sid As PSID,ByVal cbSid As PDWORD,ByVal ReferencedDomainName As LPWSTR,ByVal cbReferencedDomainName As PDWORD,ByVal peUse As PSID_NAME_USE) As BOOL
LookupAccountSid(ByVal lpSystemName As LPCWSTR,ByVal Sid As PSID,ByVal Name As LPWSTR,ByVal cbName As PDWORD,ByVal ReferencedDomainName As LPWSTR,ByVal cbReferencedDomainName As PDWORD,ByVal peUse As PSID_NAME_USE) As BOOL
LookupPrivilegeDisplayName(ByVal lpSystemName As LPCWSTR,ByVal lpName As LPCWSTR,ByVal lpDisplayName As LPWSTR,ByVal cbDisplayName As PDWORD,ByVal lpLanguageID As PDWORD) As BOOL
LookupPrivilegeValue(ByVal lpSystemName As LPCSTR,ByVal lpName As LPCSTR,ByVal lpLuid As PLUID) As BOOL
LookupPrivilegeValue(ByVal lpSystemName As LPCWSTR,ByVal lpName As LPCWSTR,ByVal lpLuid As PLUID) As BOOL
LookupIconIdFromDirectory(ByVal presbits As PBYTE,ByVal fIcon As BOOL) As Integer
LookupPrivilegeName(ByVal lpSystemName As LPCSTR,ByVal lpLuid As PLUID,ByVal lpName As LPSTR,ByVal cbName As PDWORD) As BOOL
LookupSecurityDescriptorParts(ByVal pOwner As PTRUSTEE_A PTR,ByVal pGroup As PTRUSTEE_A PTR,ByVal cCountOfAccessEntries As PULONG,ByVal pListOfAccessEntries As PEXPLICIT_ACCESS_A PTR,ByVal cCountOfAuditEntries As PULONG,ByVal pListOfAuditEntries As PEXPLICIT_ACCESS_A PTR,ByVal pSD As PSECURITY_DESCRIPTOR) As DWORD
LPtoDP(ByVal hdc As HDC,ByVal lpPoint As LPPOINT,ByVal nCount As Integer) As BOOL
LresultFromObject(ByVal riid As IID PTR,ByVal wParam As WPARAM,ByVal pUnk As LPUNKNOWN) As LONG
LsaAddAccountRights(ByVal PolicyHandle As LSA_HANDLE,ByVal AccountSid As PSID,ByVal UserRights As PLSA_UNICODE_STRING,ByVal CountOfRights As ULONG) As NTSTATUS
LsaClose(ByVal ObjectHandle As LSA_HANDLE) As NTSTATUS
LsaConnectUntrusted(ByVal LsaHandle As PHANDLE) As NTSTATUS
LsaCallAuthenticationPackage(ByVal LsaHandle As HANDLE,ByVal AuthenticationPackage As ULONG,ByVal ProtocolSubmitBuffer As PVOID,ByVal SubmitBufferLength As ULONG,ByVal ProtocolReturnBuffer As PVOID PTR,ByVal ReturnBufferLength As PULONG,ByVal ProtocolStatus As PNTSTATUS) As NTSTATUS
LsaCreateTrustedDomainEx(ByVal PolicyHandle As LSA_HANDLE,ByVal TrustedDomainInformation As PTRUSTED_DOMAIN_INFORMATION_EX,ByVal AuthenticationInformation As PTRUSTED_DOMAIN_AUTH_INFORMATION,ByVal DesiredAccess As ACCESS_MASK,ByVal TrustedDomainHandle As PLSA_HANDLE) As NTSTATUS
LsaDeleteTrustedDomain(ByVal PolicyHandle As LSA_HANDLE,ByVal TrustedDomainSid As PSID) As NTSTATUS
LsaDeregisterLogonProcess(ByVal LsaHandle As HANDLE) As NTSTATUS
LsaEnumerateTrustedDomains(ByVal PolicyHandle As LSA_HANDLE,ByVal EnumerationContext As PLSA_ENUMERATION_HANDLE,ByVal buffer As PVOID PTR,ByVal PreferedMaximumLength As ULONG,ByVal CountReturned As PULONG) As NTSTATUS
LsaEnumerateAccountRights(ByVal PolicyHandle As LSA_HANDLE,ByVal AccountSid As PSID,ByVal UserRights As PLSA_UNICODE_STRING PTR,ByVal CountOfRights As PULONG) As NTSTATUS
LsaEnumerateAccountsWithUserRight(ByVal PolicyHandle As LSA_HANDLE,ByVal UserRights As PLSA_UNICODE_STRING,ByVal EnumerationBuffer As PVOID PTR,ByVal CountReturned As PULONG) As NTSTATUS
LsaEnumerateTrustedDomainsEx(ByVal PolicyHandle As LSA_HANDLE,ByVal EnumerationContext As PLSA_ENUMERATION_HANDLE,ByVal buffer As TRUSTED_INFORMATION_CLASS,ByVal PreferedMaximumLength As PVOID PTR,ByVal CountReturned As ULONG,ByVal As PULONG) As NTSTATUS
LsaFreeMemory(ByVal buffer As PVOID) As NTSTATUS
LsaFreeReturnBuffer(ByVal buffer As PVOID) As NTSTATUS
LsaLookupAuthenticationPackage(ByVal LsaHandle As HANDLE,ByVal PackageName As PLSA_STRING,ByVal AuthenticationPackage As PULONG) As NTSTATUS
LsaLogonUser(ByVal LsaHandle As HANDLE,ByVal OriginName As PLSA_STRING,ByVal LogonType As SECURITY_LOGON_TYPE,ByVal AuthenticationPackage As ULONG,ByVal AuthenticationInformation As PVOID,ByVal AuthenticationInformationLength As ULONG,ByVal LocalGroups As PTOKEN_GROUPS,ByVal SourceContext As PTOKEN_SOURCE,ByVal ProfileBuffer As PVOID PTR,ByVal ProfileBufferLength As PULONG,ByVal LogonId As PLUID,ByVal Token As PHANDLE,ByVal Quotas As PQUOTA_LIMITS,ByVal SubStatus As PNTSTATUS) As NTSTATUS
LsaLookupSids(ByVal PolicyHandle As LSA_HANDLE,ByVal count As ULONG,ByVal Sids As PSID PTR,ByVal ReferencedDomains As PLSA_REFERENCED_DOMAIN_LIST PTR,ByVal Names As PLSA_TRANSLATED_NAME PTR) As NTSTATUS
LsaLookupNames(ByVal PolicyHandle As LSA_HANDLE,ByVal count As ULONG,ByVal Names As PLSA_UNICODE_STRING,ByVal ReferencedDomains As PLSA_REFERENCED_DOMAIN_LIST PTR,ByVal Sids As PLSA_TRANSLATED_SID PTR) As NTSTATUS
LsaNtStatusToWinError(ByVal Status As NTSTATUS) As ULONG
LsaOpenPolicy(ByVal SystemName As PLSA_UNICODE_STRING,ByVal ObjectAttributes As PLSA_OBJECT_ATTRIBUTES,ByVal DesiredAccess As ACCESS_MASK,ByVal PolicyHandle As PLSA_HANDLE) As NTSTATUS
LsaQueryInformationPolicy(ByVal PolicyHandle As LSA_HANDLE,ByVal InformationClass As POLICY_INFORMATION_CLASS,ByVal buffer As PVOID PTR) As NTSTATUS
LsaQueryDomainInformationPolicy(ByVal PolicyHandle As LSA_HANDLE,ByVal InformationClass As POLICY_DOMAIN_INFORMATION_CLASS,ByVal buffer As PVOID PTR) As NTSTATUS
LsaQueryLocalInformationPolicy(ByVal As LSA_HANDLE,ByVal As POLICY_LOCAL_INFORMATION_CLASS,ByVal As PVOID PTR) As NTSTATUS
LsaQueryTrustedDomainInfoByName(ByVal PolicyHandle As LSA_HANDLE,ByVal TrustedDomainName As PLSA_UNICODE_STRING,ByVal InformationClass As TRUSTED_INFORMATION_CLASS,ByVal buffer As PVOID PTR) As NTSTATUS
LsaQueryTrustedDomainInfo(ByVal PolicyHandle As LSA_HANDLE,ByVal TrustedDomainSid As PSID,ByVal InformationClass As TRUSTED_INFORMATION_CLASS,ByVal buffer As PVOID PTR) As NTSTATUS
LsaRegisterLogonProcess(ByVal LogonProcessName As PLSA_STRING,ByVal LsaHandle As PHANDLE,ByVal SecurityMode As PLSA_OPERATIONAL_MODE) As NTSTATUS
LsaRetrievePrivateData(ByVal PolicyHandle As LSA_HANDLE,ByVal KeyName As PLSA_UNICODE_STRING,ByVal PrivateData As PLSA_UNICODE_STRING PTR) As NTSTATUS
LsaRemoveAccountRights(ByVal PolicyHandle As LSA_HANDLE,ByVal AccountSid As PSID,ByVal AllRights As BOOLEAN,ByVal UserRights As PLSA_UNICODE_STRING,ByVal CountOfRights As ULONG) As NTSTATUS
LsaStorePrivateData(ByVal PolicyHandle As LSA_HANDLE,ByVal KeyName As PLSA_UNICODE_STRING,ByVal PrivateData As PLSA_UNICODE_STRING) As NTSTATUS
LsaSetTrustedDomainInfoByName(ByVal PolicyHandle As LSA_HANDLE,ByVal TrustedDomainName As PLSA_UNICODE_STRING,ByVal InformationClass As TRUSTED_INFORMATION_CLASS,ByVal buffer As PVOID) As NTSTATUS
LsaSetInformationPolicy(ByVal PolicyHandle As LSA_HANDLE,ByVal InformationClass As POLICY_INFORMATION_CLASS,ByVal buffer As PVOID) As NTSTATUS
LsaSetTrustedDomainInformation(ByVal PolicyHandle As LSA_HANDLE,ByVal TrustedDomainSid As PSID,ByVal InformationClass As TRUSTED_INFORMATION_CLASS,ByVal buffer As PVOID) As NTSTATUS
LsaSetLocalInformationPolicy(ByVal As LSA_HANDLE,ByVal As POLICY_LOCAL_INFORMATION_CLASS,ByVal As PVOID) As NTSTATUS
LsaSetDomainInformationPolicy(ByVal PolicyHandle As LSA_HANDLE,ByVal InformationClass As POLICY_DOMAIN_INFORMATION_CLASS,ByVal buffer As PVOID) As NTSTATUS
lstrcpyn(ByVal lpString1 As LPWSTR,ByVal lpString2 As LPCWSTR,ByVal iMaxLength As Integer) As LPWSTR
lstrcpy(ByVal lpString1 As LPWSTR,ByVal lpString2 As LPCWSTR) As LPWSTR
lstrcpyn(ByVal lpString1 As LPSTR,ByVal lpString2 As LPCSTR,ByVal iMaxLength As Integer) As LPSTR
lstrcmp(ByVal lpString1 As LPCWSTR,ByVal lpString2 As LPCWSTR) As Integer
lstrcat(ByVal lpString1 As LPSTR,ByVal lpString2 As LPCSTR) As LPSTR
lstrcmpi(ByVal lpString1 As LPCWSTR,ByVal lpString2 As LPCWSTR) As Integer
lstrcat(ByVal lpString1 As LPWSTR,ByVal lpString2 As LPCWSTR) As LPWSTR
lstrlen(ByVal lpString As LPCSTR) As Integer
lstrlen(ByVal lpString As LPCWSTR) As Integer
lstrcpy(ByVal lpString1 As LPSTR,ByVal lpString2 As LPCSTR) As LPSTR
lstrcmpi(ByVal lpString1 As LPCSTR,ByVal lpString2 As LPCSTR) As Integer
lstrcmp(ByVal lpString1 As LPCSTR,ByVal lpString2 As LPCSTR) As Integer
LZClose(ByVal hfFile As INT_) 
LZCopy(ByVal hfSource As INT_,ByVal hfDest As INT_) As LONG
LZDone() 
LZInit(ByVal hfSrc As INT_) As INT_
LZOpenFile(ByVal lpszFile As LPSTR,ByVal lpOf As LPOFSTRUCT,ByVal style As WORD) As INT_
LZOpenFile(ByVal lpszFile As LPWSTR,ByVal lpOf As LPOFSTRUCT,ByVal style As WORD) As INT_
LZRead(ByVal hfFile As INT_,ByVal lpvBuf As LPSTR,ByVal cbread As INT_) As INT_
LZSeek(ByVal hfFile As INT_,ByVal lOffset As LONG,ByVal nOrigin As INT_) As LONG
LZStart() As INT_
MakeDragList(ByVal hLB As HWND) As BOOL
MakeAbsoluteSD(ByVal pSelfRelativeSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal pAbsoluteSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal lpdwAbsoluteSecurityDescriptorSize As PDWORD,ByVal pDacl As PACL,ByVal lpdwDaclSize As PDWORD,ByVal pSacl As PACL,ByVal lpdwSaclSize As PDWORD,ByVal pOwner As PSID,ByVal lpdwOwnerSize As PDWORD,ByVal pPrimaryGroup As PSID,ByVal lpdwPrimaryGroupSize As PDWORD) As BOOL
MakeSureDirectoryPathExists(ByVal DirPath As LPCSTR) As BOOL
MakeSignature(ByVal phContext As PCtxtHandle,ByVal fQOP As ULONG,ByVal pMessage As PSecBufferDesc,ByVal MessageSeqNo As ULONG) As SECURITY_STATUS
MakeSelfRelativeSD(ByVal pAbsoluteSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal pSelfRelativeSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal lpdwBufferLength As PDWORD) As BOOL
MapAndLoad(ByVal ImageName As LPSTR,ByVal DllPath As LPSTR,ByVal LoadedImage As PLOADED_IMAGE,ByVal DotDll As BOOL,ByVal ReadOnly As BOOL) As BOOL
MapDebugInformation(ByVal FileHandle As HANDLE,ByVal FileName As LPSTR,ByVal SymbolPath As LPSTR,ByVal ImageBase As DWORD) As PIMAGE_DEBUG_INFORMATION
MapDialogRect(ByVal hDlg As HWND,ByVal lpRect As LPRECT) As BOOL
MapFileAndCheckSum(ByVal Filename As LPSTR,ByVal HeaderSum As LPDWORD,ByVal CheckSum As LPDWORD) As DWORD
MapFileAndCheckSum(ByVal Filename As PWSTR,ByVal HeaderSum As LPDWORD,ByVal CheckSum As LPDWORD) As DWORD
MapGenericMask(ByVal AccessMask As PDWORD,ByVal GenericMapping As PGENERIC_MAPPING) 
MAPILogon(ByVal UIParam As ULONG,ByVal Flags As LPSTR,ByVal Reserved As LPSTR,ByVal Session As FLAGS,ByVal As ULONG,ByVal As LPLHANDLE) As ULONG
MAPI_NSCP_SynchronizeClient(ByVal As LHANDLE,ByVal As ULONG) As ULONG
MAPILogoff(ByVal Session As LHANDLE,ByVal UIParam As ULONG,ByVal Flags As FLAGS,ByVal Reserved As ULONG) As ULONG
MAPIGetNetscapeVersion() As ULONG
MAPIDeleteMail(ByVal lpSession As LHANDLE,ByVal UIParam As ULONG,ByVal Flags As LPSTR,ByVal Reserved As FLAGS,ByVal As ULONG) As ULONG
MAPIFindNext(ByVal Session As LHANDLE,ByVal UIParam As ULONG,ByVal Flag As LPSTR,ByVal Reserved As LPSTR,ByVal As FLAGS,ByVal As ULONG,ByVal As LPSTR) As ULONG
MAPIReadMail(ByVal As LHANDLE,ByVal As ULONG,ByVal As LPSTR,ByVal As FLAGS,ByVal As ULONG,ByVal As lpMapiMessage PTR) As ULONG
MAPISendDocuments(ByVal UIParam As ULONG,ByVal Reserved As LPSTR,ByVal As LPSTR,ByVal As LPSTR,ByVal As ULONG) As ULONG
MAPIResolveName(ByVal Session As LHANDLE,ByVal UIParam As ULONG,ByVal Flags As LPSTR,ByVal Reserved As FLAGS,ByVal Recipient As ULONG,ByVal As lpMapiRecipDesc PTR) As ULONG
MAPIDetails(ByVal Session As LHANDLE,ByVal UIParam As ULONG,ByVal Recipient As lpMapiRecipDesc,ByVal Flags As FLAGS,ByVal Reserved As ULONG) As ULONG
MAPISendMail(ByVal Session As LHANDLE,ByVal UIParam As ULONG,ByVal Message As lpMapiMessage,ByVal Recipient As FLAGS,ByVal File As ULONG) As ULONG
MAPIFreeBuffer(ByVal pv As LPVOID) As ULONG
MAPISaveMail(ByVal Session As LHANDLE,ByVal UIParam As ULONG,ByVal lpszMessage As lpMapiMessage,ByVal Recipient As FLAGS,ByVal File As ULONG,ByVal Flags As LPSTR) As ULONG
MAPIAddress(ByVal As LHANDLE,ByVal As ULONG,ByVal As LPSTR,ByVal As ULONG,ByVal As LPSTR,ByVal As ULONG,ByVal As lpMapiRecipDesc,ByVal As FLAGS,ByVal As ULONG,ByVal As LPULONG,ByVal As lpMapiRecipDesc PTR) As ULONG
MapUserPhysicalPages(ByVal VirtualAddress As PVOID,ByVal NumberOfPages As ULONG_PTR,ByVal PageArray As PULONG_PTR) As BOOL
MapUserPhysicalPagesScatter(ByVal VirtualAddresses As PVOID PTR,ByVal NumberOfPages As ULONG_PTR,ByVal PageArray As PULONG_PTR) As BOOL
MapViewOfFileEx(ByVal hFileMappingObject As HANDLE,ByVal dwDesiredAccess As DWORD,ByVal dwFileOffsetHigh As DWORD,ByVal dwFileOffsetLow As DWORD,ByVal dwNumberOfBytesToMap As DWORD,ByVal lpBaseAddress As PVOID) As PVOID
MapVirtualKeyEx(ByVal uCode As UINT,ByVal uMapType As UINT,ByVal dwhkl As HKL) As UINT
MapVirtualKey(ByVal wCode As UINT,ByVal wMapType As UINT) As UINT
MapViewOfFile(ByVal hFileMappingObject As HANDLE,ByVal dwDesiredAccess As DWORD,ByVal dwFileOffsetHigh As DWORD,ByVal dwFileOffsetLow As DWORD,ByVal dwNumberOfBytesToMap As DWORD) As PVOID
MapWindowPoints(ByVal hwndFrom As HWND,ByVal hwndTo As HWND,ByVal lppt As LPPOINT,ByVal cPoints As UINT) As Integer
MaskBlt(ByVal hdcDest As HDC,ByVal nXDest As Integer,ByVal nYDest As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal hdcSrc As HDC,ByVal nXSrc As Integer,ByVal nYSrc As Integer,ByVal hbmMask As HBITMAP,ByVal xMask As Integer,ByVal yMask As Integer,ByVal dwRop As DWORD) As BOOL
mciGetYieldProc(ByVal mciId As MCIDEVICEID,ByVal pdwYieldData As PDWORD) As YIELDPROC
mciGetCreatorTask(ByVal wDeviceID As MCIDEVICEID) As HTASK
mciGetDeviceID(ByVal lpstrName As LPCWSTR) As MCIDEVICEID
mciGetErrorString(ByVal dwError As MCIERROR,ByVal lpstrBuffer As LPSTR,ByVal uLength As UINT) As BOOL
mciGetErrorString(ByVal dwError As MCIERROR,ByVal lpstrBuffer As LPWSTR,ByVal uLength As UINT) As BOOL
mciGetDeviceIDFromElementID(ByVal dwElementID As DWORD,ByVal lpstrType As LPCSTR) As MCIDEVICEID
mciGetDeviceID(ByVal lpstrName As LPCSTR) As MCIDEVICEID
mciGetDeviceIDFromElementID(ByVal dwElementID As DWORD,ByVal lpstrType As LPCWSTR) As MCIDEVICEID
mciSendCommand(ByVal wDeviceID As MCIDEVICEID,ByVal uMessage As UINT,ByVal dwParam1 As DWORD,ByVal dwParam2 As DWORD) As MCIERROR
mciSetYieldProc(ByVal mciId As MCIDEVICEID,ByVal fpYieldProc As YIELDPROC,ByVal dwYieldData As DWORD) As BOOL
mciSendString(ByVal lpstrCommand As LPCSTR,ByVal lpstrReturnString As LPSTR,ByVal uReturnLength As UINT,ByVal hwndCallback As HWND) As MCIERROR
mciSendString(ByVal lpstrCommand As LPCWSTR,ByVal lpstrReturnString As LPWSTR,ByVal uReturnLength As UINT,ByVal hwndCallback As HWND) As MCIERROR
MCIWndCreate(ByVal hwndParent As HWND,ByVal hInstance As HINSTANCE,ByVal dwStyle As DWORD,ByVal szFile As LPCWSTR) As HWND
MCIWndCreate(ByVal hwndParent As HWND,ByVal hInstance As HINSTANCE,ByVal dwStyle As DWORD,ByVal szFile As LPCSTR) As HWND
MenuHelp(ByVal uMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM,ByVal hMainMenu As HMENU,ByVal hInst As HINSTANCE,ByVal hwndStatus As HWND,ByVal lpwIDs As PUINT) 
MenuItemFromPoint(ByVal hWnd As HWND,ByVal hMenu As HMENU,ByVal ptScreen As POINT) As Integer
MessageBeep(ByVal wType As UINT) As BOOL
MessageBox(ByVal hwnd As HWND,ByVal lpText As LPCSTR,ByVal lpCaption As LPCSTR,ByVal wType As UINT) As Integer
MessageBoxEx(ByVal hwnd As HWND,ByVal lpText As LPCWSTR,ByVal lpCaption As LPCWSTR,ByVal wType As UINT,ByVal wLanguageId As WORD) As Integer
MessageBoxEx(ByVal hwnd As HWND,ByVal lpText As LPCSTR,ByVal lpCaption As LPCSTR,ByVal wType As UINT,ByVal wLanguageId As WORD) As Integer
MessageBox(ByVal hwnd As HWND,ByVal lpText As LPCWSTR,ByVal lpCaption As LPCWSTR,ByVal wType As UINT) As Integer
MessageBoxIndirect(ByVal lpMsgBoxParams As MSGBOXPARAMSA PTR) As Integer
MessageBoxIndirect(ByVal lpMsgBoxParams As MSGBOXPARAMSW PTR) As Integer
midiOutGetErrorText(ByVal err As MMRESULT,ByVal lpText As LPSTR,ByVal uSize As UINT) As MMRESULT
midiInGetID(ByVal hMidiIn As HMIDIIN,ByVal lpuDeviceID As LPUINT) As MMRESULT
midiInMessage(ByVal hMidiIn As HMIDIIN,ByVal msg As UINT,ByVal dw1 As DWORD,ByVal dw2 As DWORD) As MMRESULT
midiOutLongMsg(ByVal hMidiOut As HMIDIOUT,ByVal lpMidiOutHdr As LPMIDIHDR,ByVal uSize As UINT) As MMRESULT
midiInStop(ByVal hMidiIn As HMIDIIN) As MMRESULT
midiInReset(ByVal hMidiIn As HMIDIIN) As MMRESULT
midiOutSetVolume(ByVal uDeviceID As HMIDIOUT,ByVal dwVolume As DWORD) As MMRESULT
midiOutGetVolume(ByVal uDeviceID As HMIDIOUT,ByVal lpdwVolume As PDWORD) As MMRESULT
midiDisconnect(ByVal hmi As HMIDI,ByVal hmo As HMIDIOUT,ByVal pReserved As PVOID) As MMRESULT
midiConnect(ByVal hmi As HMIDI,ByVal hmo As HMIDIOUT,ByVal pReserved As PVOID) As MMRESULT
midiOutOpen(ByVal lphMidiOut As LPHMIDIOUT,ByVal uDeviceID As UINT,ByVal dwCallback As DWORD,ByVal dwInstance As DWORD,ByVal dwFlags As DWORD) As MMRESULT
midiOutClose(ByVal hMidiOut As HMIDIOUT) As MMRESULT
midiOutPrepareHeader(ByVal hMidiOut As HMIDIOUT,ByVal lpMidiOutHdr As LPMIDIHDR,ByVal uSize As UINT) As MMRESULT
midiOutUnprepareHeader(ByVal hMidiOut As HMIDIOUT,ByVal lpMidiOutHdr As LPMIDIHDR,ByVal uSize As UINT) As MMRESULT
midiStreamStop(ByVal hms As HMIDISTRM) As MMRESULT
midiStreamRestart(ByVal hms As HMIDISTRM) As MMRESULT
midiStreamPause(ByVal hms As HMIDISTRM) As MMRESULT
midiOutGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPMIDIOUTCAPSA,ByVal uSize As UINT) As MMRESULT
midiStreamOut(ByVal hms As HMIDISTRM,ByVal pmh As LPMIDIHDR,ByVal cbmh As UINT) As MMRESULT
midiStreamPosition(ByVal hms As HMIDISTRM,ByVal lpmmt As LPMMTIME,ByVal cbmmt As UINT) As MMRESULT
midiStreamProperty(ByVal hms As HMIDISTRM,ByVal lppropdata As LPBYTE,ByVal dwProperty As DWORD) As MMRESULT
midiStreamClose(ByVal hms As HMIDISTRM) As MMRESULT
midiStreamOpen(ByVal phms As LPHMIDISTRM,ByVal puDeviceID As LPUINT,ByVal cMidi As DWORD,ByVal dwCallback As DWORD,ByVal dwInstance As DWORD,ByVal fdwOpen As DWORD) As MMRESULT
midiOutGetNumDevs() As UINT
midiOutShortMsg(ByVal hMidiOut As HMIDIOUT,ByVal dwMsg As DWORD) As MMRESULT
midiInStart(ByVal hMidiIn As HMIDIIN) As MMRESULT
midiOutReset(ByVal hMidiOut As HMIDIOUT) As MMRESULT
midiOutCachePatches(ByVal hMidiOut As HMIDIOUT,ByVal uBank As UINT,ByVal lpPatchArray As LPWORD,ByVal uFlags As UINT) As MMRESULT
midiInGetErrorText(ByVal err As MMRESULT,ByVal lpText As LPWSTR,ByVal uSize As UINT) As MMRESULT
midiInGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPMIDIINCAPSW,ByVal uSize As UINT) As MMRESULT
midiOutGetErrorText(ByVal err As MMRESULT,ByVal lpText As LPWSTR,ByVal uSize As UINT) As MMRESULT
midiOutGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPMIDIOUTCAPSW,ByVal uSize As UINT) As MMRESULT
midiInGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPMIDIINCAPSA,ByVal uSize As UINT) As MMRESULT
midiOutCacheDrumPatches(ByVal hMidiOut As HMIDIOUT,ByVal uPatch As UINT,ByVal lpKeyArray As LPWORD,ByVal uFlags As UINT) As MMRESULT
midiInGetErrorText(ByVal err As MMRESULT,ByVal lpText As LPSTR,ByVal uSize As UINT) As MMRESULT
midiOutGetID(ByVal hMidiOut As HMIDIOUT,ByVal lpuDeviceID As LPUINT) As MMRESULT
midiOutMessage(ByVal hMidiOut As HMIDIOUT,ByVal msg As UINT,ByVal dw1 As DWORD,ByVal dw2 As DWORD) As MMRESULT
midiInGetNumDevs() As UINT
midiInOpen(ByVal lphMidiIn As LPHMIDIIN,ByVal uDeviceID As UINT,ByVal dwCallback As DWORD,ByVal dwInstance As DWORD,ByVal dwFlags As DWORD) As MMRESULT
midiInClose(ByVal hMidiIn As HMIDIIN) As MMRESULT
midiInPrepareHeader(ByVal hMidiIn As HMIDIIN,ByVal lpMidiInHdr As LPMIDIHDR,ByVal uSize As UINT) As MMRESULT
midiInUnprepareHeader(ByVal hMidiIn As HMIDIIN,ByVal lpMidiInHdr As LPMIDIHDR,ByVal uSize As UINT) As MMRESULT
midiInAddBuffer(ByVal hMidiIn As HMIDIIN,ByVal lpMidiInHdr As LPMIDIHDR,ByVal uSize As UINT) As MMRESULT
MIDL_wchar_strlen(ByVal s As wchar_t PTR) As uinteger
MIDL_wchar_strcpy(ByVal t As any PTR,ByVal s As wchar_t PTR) 
MIDL_user_allocate(ByVal Long As size_t) As any PTR
MIDL_user_free(ByVal pVoid As any PTR) 
midl_allocate(ByVal As Integer) As any PTR
MIMEAssociationDialog(ByVal hwndParent As HWND,ByVal dwInFlags As DWORD,ByVal pcszFile As PCSTR,ByVal pcszMIMEContentType As PCSTR,ByVal pszAppBuf As PSTR,ByVal ucAppBufLen As UINT) As HRESULT
MIMEAssociationDialog(ByVal hwndParent As HWND,ByVal dwInFlags As DWORD,ByVal pcszFile As PCWSTR,ByVal pcszMIMEContentType As PCWSTR,ByVal pszAppBuf As PWSTR,ByVal ucAppBufLen As UINT) As HRESULT
mixerGetLineControls(ByVal hmxobj As HMIXEROBJ,ByVal pmxlc As LPMIXERLINECONTROLSW,ByVal fdwControls As DWORD) As MMRESULT
mixerGetDevCaps(ByVal uMxId As UINT,ByVal pmxcaps As LPMIXERCAPSA,ByVal cbmxcaps As UINT) As MMRESULT
mixerGetDevCaps(ByVal uMxId As UINT,ByVal pmxcaps As LPMIXERCAPSW,ByVal cbmxcaps As UINT) As MMRESULT
mixerGetLineInfo(ByVal hmxobj As HMIXEROBJ,ByVal pmxl As LPMIXERLINEA,ByVal fdwInfo As DWORD) As MMRESULT
mixerGetLineControls(ByVal hmxobj As HMIXEROBJ,ByVal pmxlc As LPMIXERLINECONTROLSA,ByVal fdwControls As DWORD) As MMRESULT
mixerSetControlDetails(ByVal hmxobj As HMIXEROBJ,ByVal pmxcd As LPMIXERCONTROLDETAILS,ByVal fdwDetails As DWORD) As MMRESULT
mixerGetControlDetails(ByVal hmxobj As HMIXEROBJ,ByVal pmxcd As LPMIXERCONTROLDETAILS,ByVal fdwDetails As DWORD) As MMRESULT
mixerMessage(ByVal hmx As HMIXER,ByVal uMsg As UINT,ByVal dwParam1 As DWORD,ByVal dwParam2 As DWORD) As DWORD
mixerClose(ByVal hmx As HMIXER) As MMRESULT
mixerOpen(ByVal phmx As LPHMIXER,ByVal uMxId As UINT,ByVal dwCallback As DWORD,ByVal dwInstance As DWORD,ByVal fdwOpen As DWORD) As MMRESULT
mixerGetNumDevs() As UINT
mixerGetID(ByVal hmxobj As HMIXEROBJ,ByVal pumxID As PUINT,ByVal fdwId As DWORD) As MMRESULT
mixerGetControlDetails(ByVal hmxobj As HMIXEROBJ,ByVal pmxcd As LPMIXERCONTROLDETAILS,ByVal fdwDetails As DWORD) As MMRESULT
mixerGetLineInfo(ByVal hmxobj As HMIXEROBJ,ByVal pmxl As LPMIXERLINEW,ByVal fdwInfo As DWORD) As MMRESULT
MkParseDisplayName(ByVal pbc As LPBC,ByVal szUserName As LPCOLESTR,ByVal pchEaten As ULONG PTR,ByVal ppmk As LPMONIKER PTR) As HRESULT
MLLoadLibrary(ByVal As LPCWSTR,ByVal As HANDLE,ByVal As DWORD,ByVal As LPCWSTR,ByVal As BOOL) As HINSTANCE
MLLoadLibrary(ByVal As LPCSTR,ByVal As HANDLE,ByVal As DWORD,ByVal As LPCSTR,ByVal As BOOL) As HINSTANCE
mmioOpen(ByVal szFileName As LPSTR,ByVal lpmmioinfo As LPMMIOINFO,ByVal dwOpenFlags As DWORD) As HMMIO
mmioRead(ByVal hmmio As HMMIO,ByVal pch As HPSTR,ByVal cch As LONG) As LONG
mmioStringToFOURCC(ByVal sz As LPCWSTR,ByVal uFlags As UINT) As FOURCC
mmioInstallIOProc(ByVal fccIOProc As FOURCC,ByVal pIOProc As LPMMIOPROC,ByVal dwFlags As DWORD) As LPMMIOPROC
mmioSetBuffer(ByVal hmmio As HMMIO,ByVal pchBuffer As LPSTR,ByVal cchBuffer As LONG,ByVal uFlags As UINT) As MMRESULT
mmioFlush(ByVal hmmio As HMMIO,ByVal uFlags As UINT) As MMRESULT
mmioClose(ByVal hmmio As HMMIO,ByVal uFlags As UINT) As MMRESULT
mmioRename(ByVal szFileName As LPCWSTR,ByVal SzNewFileName As LPCWSTR,ByVal lpmmioinfo As LPCMMIOINFO,ByVal dwRenameFlags As DWORD) As MMRESULT
mmioOpen(ByVal szFileName As LPWSTR,ByVal lpmmioinfo As LPMMIOINFO,ByVal dwOpenFlags As DWORD) As HMMIO
mmioAscend(ByVal hmmio As HMMIO,ByVal lpck As LPMMCKINFO,ByVal uFlags As UINT) As MMRESULT
mmioCreateChunk(ByVal hmmio As HMMIO,ByVal lpck As LPMMCKINFO,ByVal uFlags As UINT) As MMRESULT
mmioSendMessage(ByVal hmmio As HMMIO,ByVal uMsg As UINT,ByVal lParam1 As LPARAM,ByVal lParam2 As LPARAM) As LRESULT
mmioInstallIOProc(ByVal fccIOProc As FOURCC,ByVal pIOProc As LPMMIOPROC,ByVal dwFlags As DWORD) As LPMMIOPROC
mmioAdvance(ByVal hmmio As HMMIO,ByVal lpmmioinfo As LPMMIOINFO,ByVal uFlags As UINT) As MMRESULT
mmioSetInfo(ByVal hmmio As HMMIO,ByVal lpmmioinfo As LPCMMIOINFO,ByVal uFlags As UINT) As MMRESULT
mmioGetInfo(ByVal hmmio As HMMIO,ByVal lpmmioinfo As LPMMIOINFO,ByVal uFlags As UINT) As MMRESULT
mmioSeek(ByVal hmmio As HMMIO,ByVal lOffset As LONG,ByVal iOrigin As Integer) As LONG
mmioWrite(ByVal hmmio As HMMIO,ByVal pch As LPCSTR,ByVal cch As LONG) As LONG
mmioRename(ByVal szFileName As LPCSTR,ByVal SzNewFileName As LPCSTR,ByVal lpmmioinfo As LPCMMIOINFO,ByVal dwRenameFlags As DWORD) As MMRESULT
mmioStringToFOURCC(ByVal sz As LPCSTR,ByVal uFlags As UINT) As FOURCC
mmioDescend(ByVal hmmio As HMMIO,ByVal lpck As LPMMCKINFO,ByVal lpckParent As MMCKINFO PTR,ByVal uFlags As UINT) As MMRESULT
mmsystemGetVersion() As UINT
ModifyWorldTransform(ByVal hdc As HDC,ByVal lpXform As XFORM PTR,ByVal iMode As DWORD) As BOOL
ModifyMenu(ByVal hMenu As HMENU,ByVal nPosition As UINT,ByVal wFlags As UINT,ByVal wIDNewItem As UINT,ByVal lpString As LPCSTR) As BOOL
ModifyMenu(ByVal hMenu As HMENU,ByVal nPosition As UINT,ByVal wFlags As UINT,ByVal wIDNewItem As UINT,ByVal lpString As LPCWSTR) As BOOL
Module32First(ByVal hSnapshot As HANDLE,ByVal lpme As LPMODULEENTRY32) As BOOL
Module32Next(ByVal hSnapshot As HANDLE,ByVal lpme As LPMODULEENTRY32) As BOOL
Module32First(ByVal hSnapshot As HANDLE,ByVal lpme As LPMODULEENTRY32W) As BOOL
Module32Next(ByVal hSnapshot As HANDLE,ByVal lpme As LPMODULEENTRY32W) As BOOL
MonitorFromWindow(ByVal hwnd As HWND,ByVal dwFlags As DWORD) As HMONITOR
MonikerRelativePathTo(ByVal pmkSrc As LPMONIKER,ByVal pmkDest As LPMONIKER,ByVal ppmkRelPath As LPMONIKER PTR,ByVal dwReserved As BOOL) As HRESULT
MonitorFromPoint(ByVal pt As POINT,ByVal dwFlags As DWORD) As HMONITOR
MonitorFromRect(ByVal lprc As LPCRECT,ByVal dwFlags As DWORD) As HMONITOR
MonikerCommonPrefixWith(ByVal pmkThis As LPMONIKER,ByVal pmkOther As LPMONIKER,ByVal ppmkCommon As LPMONIKER PTR) As HRESULT
mouse_event(ByVal dwFlags As DWORD,ByVal dx As DWORD,ByVal dy As DWORD,ByVal cButtons As DWORD,ByVal dwExtraInfo As ULONG_PTR) 
MoveWindow(ByVal hwnd As HWND,ByVal x As Integer,ByVal y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal fBoolean As BOOL) As BOOL
MoveFile(ByVal lpExistingFileName As LPCWSTR,ByVal lpNewFileName As LPCWSTR) As BOOL
MoveFileEx(ByVal lpExistingFileName As LPCWSTR,ByVal lpNewFileName As LPCWSTR,ByVal dwFlags As DWORD) As BOOL
MoveToEx(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal lpPoint As LPPOINT) As BOOL
MoveFileEx(ByVal lpExistingFileName As LPCSTR,ByVal lpNewFileName As LPCSTR,ByVal dwFlags As DWORD) As BOOL
MoveFile(ByVal lpExistingFileName As LPCSTR,ByVal lpNewFileName As LPCSTR) As BOOL
MsgWaitForMultipleObjectsEx(ByVal nCount As DWORD,ByVal pHandles As HANDLE PTR,ByVal dwMilliseconds As DWORD,ByVal dwWakeMask As DWORD,ByVal dwFlags As DWORD) As DWORD
MsgWaitForMultipleObjects(ByVal nCount As DWORD,ByVal pHandles As HANDLE PTR,ByVal fWaitAll As BOOL,ByVal dwMilliseconds As DWORD,ByVal dwWakeMask As DWORD) As DWORD
Msv1_0SubAuthenticationRoutine(ByVal As NETLOGON_LOGON_INFO_CLASS,ByVal As PVOID,ByVal As ULONG,ByVal As PUSER_ALL_INFORMATION,ByVal As PULONG,ByVal As PULONG,ByVal As PBOOLEAN,ByVal As PLARGE_INTEGER,ByVal As PLARGE_INTEGER) As NTSTATUS
Msv1_0SubAuthenticationRoutineEx(ByVal LogonLevel As NETLOGON_LOGON_INFO_CLASS,ByVal LogonInformation As PVOID,ByVal Flags As ULONG,ByVal UserAll As PUSER_ALL_INFORMATION,ByVal UserHandle As SAM_HANDLE,ByVal ValidationInfo As PMSV1_0_VALIDATION_INFO,ByVal ActionsPerformed As PULONG) As NTSTATUS
Msv1_0SubAuthenticationFilter(ByVal As NETLOGON_LOGON_INFO_CLASS,ByVal As PVOID,ByVal As ULONG,ByVal As PUSER_ALL_INFORMATION,ByVal As PULONG,ByVal As PULONG,ByVal As PBOOLEAN,ByVal As PLARGE_INTEGER,ByVal As PLARGE_INTEGER) As NTSTATUS
Msv1_0SubAuthenticationRoutineGeneric(ByVal As PVOID,ByVal As ULONG,ByVal As PULONG,ByVal As PVOID PTR) As NTSTATUS
MulDiv(ByVal nNumber As Integer,ByVal nNumerator As Integer,ByVal nDenominator As Integer) As Integer
MultinetGetConnectionPerformance(ByVal lpNetResource As LPNETRESOURCEA,ByVal lpNetConnectInfoStruct As LPNETCONNECTINFOSTRUCT) As DWORD
MultinetGetConnectionPerformance(ByVal lpNetResource As LPNETRESOURCEW,ByVal lpNetConnectInfoStruct As LPNETCONNECTINFOSTRUCT) As DWORD
MultiByteToWideChar(ByVal CodePage As UINT,ByVal dwFlags As DWORD,ByVal lpMultiByteStr As LPCSTR,ByVal cchMultiByte As Integer,ByVal lpWideCharStr As LPWSTR,ByVal cchWideChar As Integer) As Integer
NDdeShareGetInfo(ByVal lpszServer As LPSTR,ByVal lpszShareName As LPSTR,ByVal nLevel As UINT,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD,ByVal lpnTotalAvailable As PDWORD,ByVal lpnItems As PWORD) As UINT
NDdeShareEnum(ByVal lpszServer As LPSTR,ByVal nLevel As UINT,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD,ByVal lpnEntriesRead As PDWORD,ByVal lpcbTotalAvailable As PDWORD) As UINT
NDdeShareDel(ByVal lpszServer As LPSTR,ByVal lpszShareName As LPSTR,ByVal wReserved As UINT) As UINT
NDdeTrustedShareEnum(ByVal lpszServer As LPSTR,ByVal nLevel As UINT,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD,ByVal lpnEntriesRead As PDWORD,ByVal lpcbTotalAvailable As PDWORD) As UINT
NDdeShareSetInfo(ByVal lpszServer As LPSTR,ByVal lpszShareName As LPSTR,ByVal nLevel As UINT,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD,ByVal sParmNum As WORD) As UINT
NDdeSetTrustedShare(ByVal lpszServer As LPWSTR,ByVal lpszShareName As LPWSTR,ByVal dwTrustOptions As DWORD) As UINT
NDdeShareAdd(ByVal lpszServer As LPWSTR,ByVal nLevel As UINT,ByVal pSD As PSECURITY_DESCRIPTOR,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD) As UINT
NDdeShareDel(ByVal lpszServer As LPWSTR,ByVal lpszShareName As LPWSTR,ByVal wReserved As UINT) As UINT
NDdeShareEnum(ByVal lpszServer As LPWSTR,ByVal nLevel As UINT,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD,ByVal lpnEntriesRead As PDWORD,ByVal lpcbTotalAvailable As PDWORD) As UINT
NDdeShareGetInfo(ByVal lpszServer As LPWSTR,ByVal lpszShareName As LPWSTR,ByVal nLevel As UINT,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD,ByVal lpnTotalAvailable As PDWORD,ByVal lpnItems As PWORD) As UINT
NDdeSetShareSecurity(ByVal lpszServer As LPWSTR,ByVal lpszShareName As LPWSTR,ByVal si As SECURITY_INFORMATION,ByVal pSD As PSECURITY_DESCRIPTOR) As UINT
NDdeIsValidAppTopicList(ByVal targetTopic As LPWSTR) As BOOL
NDdeIsValidShareName(ByVal ShareName As LPWSTR) As BOOL
NDdeGetTrustedShare(ByVal lpszServer As LPWSTR,ByVal lpszShareName As LPWSTR,ByVal lpdwTrustOptions As PDWORD,ByVal lpdwShareModId0 As PDWORD,ByVal lpdwShareModId1 As PDWORD) As UINT
NDdeGetShareSecurity(ByVal lpszServer As LPWSTR,ByVal lpszShareName As LPWSTR,ByVal si As SECURITY_INFORMATION,ByVal pSD As PSECURITY_DESCRIPTOR,ByVal cbSD As DWORD,ByVal lpcbsdRequired As PDWORD) As UINT
NDdeGetErrorString(ByVal uErrorCode As UINT,ByVal lpszErrorString As LPWSTR,ByVal cBufSize As DWORD) As UINT
NDdeShareSetInfo(ByVal lpszServer As LPWSTR,ByVal lpszShareName As LPWSTR,ByVal nLevel As UINT,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD,ByVal sParmNum As WORD) As UINT
NDdeTrustedShareEnum(ByVal lpszServer As LPWSTR,ByVal nLevel As UINT,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD,ByVal lpnEntriesRead As PDWORD,ByVal lpcbTotalAvailable As PDWORD) As UINT
NDdeGetErrorString(ByVal uErrorCode As UINT,ByVal lpszErrorString As LPSTR,ByVal cBufSize As DWORD) As UINT
NDdeGetShareSecurity(ByVal lpszServer As LPSTR,ByVal lpszShareName As LPSTR,ByVal si As SECURITY_INFORMATION,ByVal pSD As PSECURITY_DESCRIPTOR,ByVal cbSD As DWORD,ByVal lpcbsdRequired As PDWORD) As UINT
NDdeGetTrustedShare(ByVal lpszServer As LPSTR,ByVal lpszShareName As LPSTR,ByVal lpdwTrustOptions As PDWORD,ByVal lpdwShareModId0 As PDWORD,ByVal lpdwShareModId1 As PDWORD) As UINT
NDdeIsValidShareName(ByVal ShareName As LPSTR) As BOOL
NDdeIsValidAppTopicList(ByVal targetTopic As LPSTR) As BOOL
NDdeSetShareSecurity(ByVal lpszServer As LPSTR,ByVal lpszShareName As LPSTR,ByVal si As SECURITY_INFORMATION,ByVal pSD As PSECURITY_DESCRIPTOR) As UINT
NDdeSetTrustedShare(ByVal lpszServer As LPSTR,ByVal lpszShareName As LPSTR,ByVal dwTrustOptions As DWORD) As UINT
NDdeShareAdd(ByVal lpszServer As LPSTR,ByVal nLevel As UINT,ByVal pSD As PSECURITY_DESCRIPTOR,ByVal lpBuffer As PBYTE,ByVal cBufSize As DWORD) As UINT
NdrAllocate(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal lLen As uinteger) As any PTR
NdrByteCountPointerMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrByteCountPointerUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrByteCountPointerBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrByteCountPointerFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NDRCContextBinding(ByVal CContext As NDR_CCONTEXT) As RPC_BINDING_HANDLE
NDRCContextMarshall(ByVal CContext As NDR_CCONTEXT,ByVal pBuff As any PTR) 
NDRCContextUnmarshall(ByVal pCContext As NDR_CCONTEXT PTR,ByVal hBinding As RPC_BINDING_HANDLE,ByVal pBuff As any PTR,ByVal DataRepresentation As uinteger) 
NDRcopy(ByVal pTarget As any PTR,ByVal pSource As any PTR,ByVal size As uinteger) 
NdrComplexArrayMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrConformantVaryingArrayMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrConformantArrayMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrClientCall(ByVal pStubDescriptor As PMIDL_STUB_DESC,ByVal pFormat As PFORMAT_STRING,...) As CLIENT_CALL_RETURN
NdrConformantStringMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrConformantVaryingStructBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrComplexStructBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantStructBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrClientContextUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pContextHandle As NDR_CCONTEXT PTR,ByVal BindHandle As RPC_BINDING_HANDLE) 
NdrConformantArrayBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantVaryingArrayBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantStructMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrComplexArrayBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantStringBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrComplexStructMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrConformantStringMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrComplexArrayMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrConformantVaryingStructMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrConformantVaryingArrayMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrConformantArrayMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrContextHandleSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrComplexStructMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrConformantVaryingStructMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrConformantStructFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantVaryingStructFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantStructMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrConformantStringUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrComplexStructFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrComplexArrayUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrConformantVaryingArrayUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrConformantArrayFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantVaryingArrayFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantVaryingStructUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrComplexArrayFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrConformantArrayUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrComplexStructUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrConformantStructUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrClientContextMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ContextHandle As NDR_CCONTEXT,ByVal fCheck As Integer) 
NdrClearOutParameters(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING,ByVal ArgAddr As any PTR) 
NdrConvert(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) 
NdrClientInitializeNew(ByVal pRpcMsg As PRPC_MESSAGE,ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pStubDescriptor As PMIDL_STUB_DESC,ByVal ProcNum As uinteger) 
NdrClientInitialize(ByVal pRpcMsg As PRPC_MESSAGE,ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pStubDescriptor As PMIDL_STUB_DESC,ByVal ProcNum As uinteger) 
NdrEncapsulatedUnionUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrEncapsulatedUnionMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrEncapsulatedUnionMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrEncapsulatedUnionBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrEncapsulatedUnionFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrFullPointerFree(ByVal pXlatTables As PFULL_PTR_XLAT_TABLES,ByVal Pointer As any PTR) As Integer
NdrFixedArrayMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrFullPointerXlatFree(ByVal pXlatTables As PFULL_PTR_XLAT_TABLES) 
NdrFullPointerInsertRefId(ByVal pXlatTables As PFULL_PTR_XLAT_TABLES,ByVal RefId As uinteger,ByVal pPointer As any PTR) 
NdrFullPointerXlatInit(ByVal NumberOfPointers As uinteger,ByVal XlatSide As XLAT_SIDE) As PFULL_PTR_XLAT_TABLES
NdrFullPointerQueryPointer(ByVal pXlatTables As PFULL_PTR_XLAT_TABLES,ByVal pPointer As any PTR,ByVal QueryType As ubyte,ByVal pRefId As uinteger PTR) As Integer
NdrFixedArrayMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrFullPointerQueryRefId(ByVal pXlatTables As PFULL_PTR_XLAT_TABLES,ByVal RefId As uinteger,ByVal QueryType As ubyte,ByVal ppPointer As any PTR PTR) As Integer
NdrFixedArrayBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrFixedArrayFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrFixedArrayUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrFreeBuffer(ByVal pStubMsg As PMIDL_STUB_MESSAGE) 
NdrGetBuffer(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal BufferLength As uinteger,ByVal Handle As RPC_BINDING_HANDLE) As ubyte PTR
NdrHardStructMemorySize(ByVal As PMIDL_STUB_MESSAGE,ByVal As PFORMAT_STRING) As uinteger
NdrHardStructUnmarshall(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR,ByVal As PFORMAT_STRING,ByVal As ubyte) As ubyte PTR
NdrHardStructFree(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR,ByVal As PFORMAT_STRING) 
NdrHardStructBufferSize(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR,ByVal As PFORMAT_STRING) 
NdrHardStructMarshall(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR,ByVal As PFORMAT_STRING) As ubyte PTR
NdrInterfacePointerMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrInterfacePointerMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrInterfacePointerBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrInterfacePointerFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrInterfacePointerUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrMapCommAndFaultStatus(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pCommStatus As uinteger PTR,ByVal pFaultStatus As uinteger PTR,ByVal Status As RPC_STATUS) As RPC_STATUS
NdrNonConformantStringBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrNsGetBuffer(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal BufferLength As uinteger,ByVal Handle As RPC_BINDING_HANDLE) As ubyte PTR
NdrNonEncapsulatedUnionMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrNonEncapsulatedUnionUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrNsSendReceive(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pBufferEnd As ubyte PTR,ByVal pAutoHandle As RPC_BINDING_HANDLE PTR) As ubyte PTR
NdrNonEncapsulatedUnionMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrNonConformantStringUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrNonConformantStringMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrNonEncapsulatedUnionBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrNonEncapsulatedUnionFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrNonConformantStringMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrOleFree(ByVal NodeToFree As any PTR) 
NdrOleAllocate(ByVal Size As uinteger) As any PTR
NdrPointerBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrPointerMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrPointerUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrPointerMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrPointerFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrRpcSmSetClientToOsf(ByVal pMessage As PMIDL_STUB_MESSAGE) 
NdrRpcSsDefaultFree(ByVal NodeToFree As any PTR) 
NdrRpcSsDefaultAllocate(ByVal Size As uinteger) As any PTR
NdrRpcSmClientFree(ByVal NodeToFree As any PTR) 
NdrRpcSmClientAllocate(ByVal Size As uinteger) As any PTR
NdrRpcSsEnableAllocate(ByVal pMessage As PMIDL_STUB_MESSAGE) 
NdrRpcSsDisableAllocate(ByVal pMessage As PMIDL_STUB_MESSAGE) 
NDRSContextMarshall(ByVal CContext As NDR_SCONTEXT,ByVal pBuff As any PTR,ByVal userRunDownIn As NDR_RUNDOWN) 
NDRSContextUnmarshall(ByVal pBuff As any PTR,ByVal DataRepresentation As uinteger) As NDR_SCONTEXT
NdrSH_TLUPDecision(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR) As Integer
NdrSH_TLUPDecisionBuffer(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR) As Integer
NdrSH_IfAlloc(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR,ByVal As uinteger) As Integer
NdrSimpleStructFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrSH_UPDecision(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR,ByVal As RPC_BUFPTR) As Integer
NdrServerContextMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ContextHandle As NDR_SCONTEXT,ByVal RundownRoutine As NDR_RUNDOWN) 
NdrSH_Copy(ByVal As ubyte PTR,ByVal As ubyte PTR,ByVal As uinteger) As uinteger
NdrSimpleStructMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrServerContextUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE) As NDR_SCONTEXT
NdrServerMarshall(ByVal pThis As LPRPCSTUBBUFFER,ByVal pChannel As LPRPCCHANNELBUFFER,ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) 
NdrSH_IfCopy(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR,ByVal As uinteger) As RPC_BUFPTR
NdrSimpleStructMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrSH_IfAllocSet(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR,ByVal As uinteger) As Integer
NdrServerInitializeMarshall(ByVal pRpcMsg As PRPC_MESSAGE,ByVal pStubMsg As PMIDL_STUB_MESSAGE) 
NdrSH_StringUnMarshall(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR,ByVal As Integer) As RPC_BUFPTR
NdrServerCall(ByVal pRpcMsg As PRPC_MESSAGE) 
NdrSH_StringMarshall(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR,ByVal As uinteger,ByVal As Integer) As RPC_BUFPTR
NdrSimpleTypeMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal FormatChar As ubyte) 
NdrSH_IfAllocRef(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR,ByVal As uinteger) As Integer
NdrSimpleStructUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrServerInitializeNew(ByVal pRpcMsg As PRPC_MESSAGE,ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pStubDescriptor As PMIDL_STUB_DESC) As ubyte PTR
NdrServerInitialize(ByVal pRpcMsg As PRPC_MESSAGE,ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pStubDescriptor As PMIDL_STUB_DESC) As ubyte PTR
NdrServerInitializeUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pStubDescriptor As PMIDL_STUB_DESC,ByVal pRpcMsg As PRPC_MESSAGE) As ubyte PTR
NdrSimpleTypeUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal FormatChar As ubyte) 
NdrSimpleStructBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrSendReceive(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pBufferEnd As ubyte PTR) As ubyte PTR
NdrSH_IfAllocCopy(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR PTR,ByVal As uinteger) As RPC_BUFPTR
NdrSH_IfFree(ByVal As PMIDL_STUB_MESSAGE,ByVal As ubyte PTR) 
NdrStubCall(ByVal pThis As LPRPCSTUBBUFFER,ByVal pChannel As LPRPCCHANNELBUFFER,ByVal pRpcMsg As PRPC_MESSAGE,ByVal pdwStubPhase As uinteger PTR) As Integer
NdrServerUnmarshall(ByVal pChannel As LPRPCCHANNELBUFFER,ByVal pRpcMsg As PRPC_MESSAGE,ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pStubDescriptor As PMIDL_STUB_DESC,ByVal pFormat As PFORMAT_STRING,ByVal pParamList As any PTR) As Integer
NdrUserMarshalMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrUserMarshalBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrUserMarshalUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrUserMarshalFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrUserMarshalMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrVaryingArrayBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrVaryingArrayFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrVaryingArrayMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrVaryingArrayUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrVaryingArrayMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrXmitOrRepAsMarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) As ubyte PTR
NdrXmitOrRepAsUnmarshall(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal ppMemory As ubyte PTR PTR,ByVal pFormat As PFORMAT_STRING,ByVal fMustAlloc As ubyte) As ubyte PTR
NdrXmitOrRepAsMemorySize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pFormat As PFORMAT_STRING) As uinteger
NdrXmitOrRepAsBufferSize(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
NdrXmitOrRepAsFree(ByVal pStubMsg As PMIDL_STUB_MESSAGE,ByVal pMemory As ubyte PTR,ByVal pFormat As PFORMAT_STRING) 
Netbios(ByVal pncb As PNCB) As UCHAR
NotifyChangeEventLog(ByVal hEventLog As HANDLE,ByVal hEvent As HANDLE) As BOOL
NotifyRouteChange(ByVal handle As PHANDLE,ByVal overlapped As LPOVERLAPPED) As DWORD
NotifyAddrChange(ByVal handle As PHANDLE,ByVal overlapped As LPOVERLAPPED) As DWORD
NotifyBootConfigStatus(ByVal BootAcceptable As BOOL) As BOOL
NSPStartup(ByVal lpProviderId As LPGUID,ByVal lpnspRoutines As LPNSP_ROUTINE) As INT_
ntohl(ByVal netlong As u_long) As u_long
ntohs(ByVal netshort As u_short) As u_short
ntohl(ByVal netlong As u_long) As u_long
ntohs(ByVal netshort As u_short) As u_short
OaBuildVersion() As uinteger
ObjectCloseAuditAlarm(ByVal SubsystemName As LPCSTR,ByVal HandleId As PVOID,ByVal GenerateOnClose As BOOL) As BOOL
ObjectPrivilegeAuditAlarm(ByVal SubsystemName As LPCWSTR,ByVal HandleId As PVOID,ByVal ClientToken As HANDLE,ByVal DesiredAccess As DWORD,ByVal Privileges As PPRIVILEGE_SET,ByVal AccessGranted As BOOL) As BOOL
ObjectOpenAuditAlarm(ByVal SubsystemName As LPCSTR,ByVal HandleId As PVOID,ByVal ObjectTypeName As LPSTR,ByVal ObjectName As LPSTR,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal ClientToken As HANDLE,ByVal DesiredAccess As DWORD,ByVal GrantedAccess As DWORD,ByVal Privileges As PPRIVILEGE_SET,ByVal ObjectCreation As BOOL,ByVal AccessGranted As BOOL,ByVal GenerateOnClose As PBOOL) As BOOL
ObjectCloseAuditAlarm(ByVal SubsystemName As LPCWSTR,ByVal HandleId As PVOID,ByVal GenerateOnClose As BOOL) As BOOL
ObjectFromLresult(ByVal lResult As LONG,ByVal riid As IID PTR,ByVal wParam As WPARAM,ByVal ppvObject As any PTR PTR) As HRESULT
ObjectDeleteAuditAlarm(ByVal SubsystemName As LPCSTR,ByVal HandleId As PVOID,ByVal GenerateOnClose As BOOL) As BOOL
ObjectOpenAuditAlarm(ByVal SubsystemName As LPCWSTR,ByVal HandleId As PVOID,ByVal ObjectTypeName As LPWSTR,ByVal ObjectName As LPWSTR,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal ClientToken As HANDLE,ByVal DesiredAccess As DWORD,ByVal GrantedAccess As DWORD,ByVal Privileges As PPRIVILEGE_SET,ByVal ObjectCreation As BOOL,ByVal AccessGranted As BOOL,ByVal GenerateOnClose As PBOOL) As BOOL
ObjectDeleteAuditAlarm(ByVal SubsystemName As LPCWSTR,ByVal HandleId As PVOID,ByVal GenerateOnClose As BOOL) As BOOL
ObjectPrivilegeAuditAlarm(ByVal SubsystemName As LPCSTR,ByVal HandleId As PVOID,ByVal ClientToken As HANDLE,ByVal DesiredAccess As DWORD,ByVal Privileges As PPRIVILEGE_SET,ByVal AccessGranted As BOOL) As BOOL
ODBCGetTryWaitValue() As DWORD
ODBCSetTryWaitValue(ByVal dwValue As DWORD) As BOOL
OemKeyScan(ByVal wOemChar As WORD) As DWORD
OemToChar(ByVal lpszSrc As LPCSTR,ByVal lpszDst As LPWSTR) As BOOL
OemToCharBuff(ByVal lpszSrc As LPCSTR,ByVal lpszDst As LPWSTR,ByVal cchDstLength As DWORD) As BOOL
OemToChar(ByVal lpszSrc As LPCSTR,ByVal lpszDst As LPSTR) As BOOL
OemToCharBuff(ByVal lpszSrc As LPCSTR,ByVal lpszDst As LPSTR,ByVal cchDstLength As DWORD) As BOOL
OffsetWindowOrgEx(ByVal hdc As HDC,ByVal nX As Integer,ByVal nY As Integer,ByVal lpPoint As LPPOINT) As BOOL
OffsetClipRgn(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer) As Integer
OffsetRgn(ByVal hRgn As HRGN,ByVal x As Integer,ByVal y As Integer) As Integer
OffsetRect(ByVal lpRect As LPRECT,ByVal x As Integer,ByVal y As Integer) As BOOL
OffsetViewportOrgEx(ByVal hdc As HDC,ByVal nX As Integer,ByVal nY As Integer,ByVal lpPoint As LPPOINT) As BOOL
OleActivate(ByVal lpoleobject As LPOLEOBJECT,ByVal uint As UINT,ByVal bool As BOOL,ByVal bool As BOOL,ByVal hwnd As HWND,ByVal pRect As LPCRECT) As OLESTATUS
OleBlockServer(ByVal lhserver As LHSERVER) As OLESTATUS
OleBuildVersion() As DWORD
OleCreateFromData(ByVal pSrcDataObj As LPDATAOBJECT,ByVal riid As IID PTR,ByVal renderopt As DWORD,ByVal pFormatEtc As LPFORMATETC,ByVal pClientSite As LPOLECLIENTSITE,ByVal pStg As LPSTORAGE,ByVal ppvObj As PVOID PTR) As HRESULT
OleCreate(ByVal rclsid As CLSID PTR,ByVal riid As IID PTR,ByVal renderopt As DWORD,ByVal pFormatEtc As LPFORMATETC,ByVal pClientSite As LPOLECLIENTSITE,ByVal pStg As LPSTORAGE,ByVal ppvObj As PVOID PTR) As HRESULT
OleClose(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleCopyToClipboard(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleCreateLinkFromData(ByVal pSrcDataObj As LPDATAOBJECT,ByVal riid As IID PTR,ByVal renderopt As DWORD,ByVal pFormatEtc As LPFORMATETC,ByVal pClientSite As LPOLECLIENTSITE,ByVal pStg As LPSTORAGE,ByVal ppvObj As PVOID PTR) As HRESULT
OleCreateEmbeddingHelper(ByVal clsid As CLSID PTR,ByVal pUnkOuter As LPUNKNOWN,ByVal flags As DWORD,ByVal pCF As LPCLASSFACTORY,ByVal riid As IID PTR,ByVal lplpObj As PVOID PTR) As HRESULT
OleCreateDefaultHandler(ByVal clsid As CLSID PTR,ByVal pUnkOuter As LPUNKNOWN,ByVal riid As IID PTR,ByVal lplpObj As PVOID PTR) As HRESULT
OleCopyFromLink(ByVal lpoleobject As LPOLEOBJECT,ByVal lpcstr As LPCSTR,ByVal TLPOLECLIENT As LPOLECLIENT,ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR,ByVal lpoleobject As LPOLEOBJECT PTR) As OLESTATUS
OleClone(ByVal lpoleobject As LPOLEOBJECT,ByVal TLPOLECLIENT As LPOLECLIENT,ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR,ByVal lpoleobject As LPOLEOBJECT PTR) As OLESTATUS
OleCreateFromTemplate(ByVal lpcstr As LPCSTR,ByVal TLPOLECLIENT As LPOLECLIENT,ByVal lpcstr As LPCSTR,ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR,ByVal lpoleobject As LPOLEOBJECT PTR,ByVal pOleopt_render As OLEOPT_RENDER,ByVal oleclipformat As OLECLIPFORMAT) As OLESTATUS
OleCreateInvisible(ByVal lpcstr As LPCSTR,ByVal TLPOLECLIENT As LPOLECLIENT,ByVal lpcstr As LPCSTR,ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR,ByVal lpoleobject As LPOLEOBJECT PTR,ByVal pOleopt_render As OLEOPT_RENDER,ByVal oleclipformat As OLECLIPFORMAT,ByVal bool As BOOL) As OLESTATUS
OleCreate(ByVal rclsid As LPCSTR,ByVal riid As LPOLECLIENT,ByVal renderopt As LPCSTR,ByVal pFormatEtc As LHCLIENTDOC,ByVal pClientSite As LPCSTR,ByVal pStg As LPOLEOBJECT PTR,ByVal ppvObj As OLEOPT_RENDER,ByVal As OLECLIPFORMAT) As OLESTATUS
OleCreateLinkFromFile(ByVal lpcstr As LPCSTR,ByVal TLPOLECLIENT As LPOLECLIENT,ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR,ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR,ByVal lpoleobject As LPOLEOBJECT PTR,ByVal pOleopt_render As OLEOPT_RENDER,ByVal oleclipformat As OLECLIPFORMAT) As OLESTATUS
OleConvertOLESTREAMToIStorage(ByVal lpolestream As LPOLESTREAM,ByVal pstg As LPSTORAGE,ByVal ptd As DVTARGETDEVICE PTR) As HRESULT
OleCreateFromClip(ByVal lpcstr As LPCSTR,ByVal TLPOLECLIENT As LPOLECLIENT,ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR,ByVal lpoleobject As LPOLEOBJECT PTR,ByVal pOleopt_render As OLEOPT_RENDER,ByVal oleclipformat As OLECLIPFORMAT) As OLESTATUS
OleCreateMenuDescriptor(ByVal hmenuCombined As HMENU,ByVal lpMenuWidths As LPOLEMENUGROUPWIDTHS) As HOLEMENU
OleCreateFontIndirect(ByVal lpFontDesc As LPFONTDESC,ByVal riid As IID PTR,ByVal lplpvObj As PVOID PTR) As HRESULT
OleCreatePictureIndirect(ByVal lpPictDesc As LPPICTDESC,ByVal riid As IID PTR,ByVal fOwn As BOOL,ByVal lplpvObj As PVOID PTR) As HRESULT
OleConvertIStorageToOLESTREAM(ByVal pstg As LPSTORAGE,ByVal lpolestream As LPOLESTREAM) As HRESULT
OleCreateFromFile(ByVal rclsid As LPCSTR,ByVal lpszFileName As LPOLECLIENT,ByVal riid As LPCSTR,ByVal renderopt As LPCSTR,ByVal lpFormatEtc As LHCLIENTDOC,ByVal pClientSite As LPCSTR,ByVal pStg As LPOLEOBJECT PTR,ByVal ppvObj As OLEOPT_RENDER,ByVal As OLECLIPFORMAT) As OLESTATUS
OleCreateLinkFromClip(ByVal lpcstr As LPCSTR,ByVal TLPOLECLIENT As LPOLECLIENT,ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR,ByVal lpoleobject As LPOLEOBJECT PTR,ByVal pOleopt_render As OLEOPT_RENDER,ByVal oleclipformat As OLECLIPFORMAT) As OLESTATUS
OleConvertIStorageToOLESTREAMEx(ByVal pstg As LPSTORAGE,ByVal cfFormat As CLIPFORMAT,ByVal lWidth As LONG,ByVal lHeight As LONG,ByVal dwSize As DWORD,ByVal pmedium As LPSTGMEDIUM,ByVal polestm As LPOLESTREAM) As HRESULT
OleCreatePropertyFrame(ByVal hwndOwner As HWND,ByVal x As UINT,ByVal y As UINT,ByVal lpszCaption As LPCOLESTR,ByVal cObjects As ULONG,ByVal ppUnk As LPUNKNOWN PTR,ByVal cPages As ULONG,ByVal pPageClsID As LPCLSID,ByVal lcid As LCID,ByVal dwReserved As DWORD,ByVal pvReserved As PVOID) As HRESULT
OleCreatePropertyFrameIndirect(ByVal lpParams As LPOCPFIPARAMS) As HRESULT
OleConvertOLESTREAMToIStorageEx(ByVal polestm As LPOLESTREAM,ByVal pstg As LPSTORAGE,ByVal pcfFormat As CLIPFORMAT PTR,ByVal plwWidth As LONG PTR,ByVal plHeight As LONG PTR,ByVal pdwSize As DWORD PTR,ByVal pmedium As LPSTGMEDIUM) As HRESULT
OleCreateStaticFromData(ByVal pSrcDataObj As LPDATAOBJECT,ByVal iid As IID PTR,ByVal renderopt As DWORD,ByVal pFormatEtc As LPFORMATETC,ByVal pClientSite As LPOLECLIENTSITE,ByVal pStg As LPSTORAGE,ByVal ppvObj As PVOID PTR) As HRESULT
OleCreateFromFile(ByVal rclsid As CLSID PTR,ByVal lpszFileName As LPCOLESTR,ByVal riid As IID PTR,ByVal renderopt As DWORD,ByVal lpFormatEtc As LPFORMATETC,ByVal pClientSite As LPOLECLIENTSITE,ByVal pStg As LPSTORAGE,ByVal ppvObj As PVOID PTR) As HRESULT
OleCreateLinkToFile(ByVal lpszFileName As LPCOLESTR,ByVal riid As IID PTR,ByVal renderopt As DWORD,ByVal lpFormatEtc As LPFORMATETC,ByVal pClientSite As LPOLECLIENTSITE,ByVal pStg As LPSTORAGE,ByVal ppvObj As PVOID PTR) As HRESULT
OleCreateLink(ByVal pmkLinkSrc As LPMONIKER,ByVal riid As IID PTR,ByVal renderopt As DWORD,ByVal lpFormatEtc As LPFORMATETC,ByVal pClientSite As LPOLECLIENTSITE,ByVal pStg As LPSTORAGE,ByVal ppvObj As PVOID PTR) As HRESULT
OleDraw(ByVal pUnknown As LPOLEOBJECT,ByVal dwAspect As HDC,ByVal hdcDraw As LPCRECT,ByVal lprcBounds As LPCRECT,ByVal As HDC) As OLESTATUS
OleDelete(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleDestroyMenuDescriptor(ByVal holemenu As HOLEMENU) As HRESULT
OleDuplicateData(ByVal hSrc As HANDLE,ByVal cfFormat As CLIPFORMAT,ByVal uiFlags As UINT) As HANDLE
OleDoAutoConvert(ByVal pStg As LPSTORAGE,ByVal pClsidNew As LPCLSID) As HRESULT
OleDraw(ByVal pUnknown As LPUNKNOWN,ByVal dwAspect As DWORD,ByVal hdcDraw As HDC,ByVal lprcBounds As LPCRECT) As HRESULT
OleExecute(ByVal lpoleobject As LPOLEOBJECT,ByVal hglobal As HANDLE,ByVal uint As UINT) As OLESTATUS
OleEnumObjects(ByVal lhclientdoc As LHCLIENTDOC,ByVal lpoleobject As LPOLEOBJECT PTR) As OLESTATUS
OleEnumFormats(ByVal lpoleobject As LPOLEOBJECT,ByVal oleclipformat As OLECLIPFORMAT) As OLECLIPFORMAT
OleEqual(ByVal lpoleobject As LPOLEOBJECT,ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleFlushClipboard() As HRESULT
OleGetIconOfFile(ByVal lpszPath As LPOLESTR,ByVal fUseFileAsLabel As BOOL) As HGLOBAL
OleGetData(ByVal lpoleobject As LPOLEOBJECT,ByVal oleclipformat As OLECLIPFORMAT,ByVal pHandle As HANDLE PTR) As OLESTATUS
OleGetLinkUpdateOptions(ByVal lpoleobject As LPOLEOBJECT,ByVal pOleopt_update As OLEOPT_UPDATE PTR) As OLESTATUS
OleGetIconOfClass(ByVal rclsid As CLSID PTR,ByVal lpszLabel As LPOLESTR,ByVal fUseTypeAsLabel As BOOL) As HGLOBAL
OleGetClipboard(ByVal ppDataObj As LPDATAOBJECT PTR) As HRESULT
OleGetAutoConvert(ByVal clsidOld As CLSID PTR,ByVal pClsidNew As LPCLSID) As HRESULT
OleIsCurrentClipboard(ByVal pDataObj As LPDATAOBJECT) As HRESULT
OleInitialize(ByVal pvReserved As PVOID) As HRESULT
OleIsDcMeta(ByVal hdc As HDC) As BOOL
OleIsRunning(ByVal pObject As LPOLEOBJECT) As BOOL
OleIconToCursor(ByVal hinstExe As HINSTANCE,ByVal hIcon As HICON) As HCURSOR
OleLockRunning(ByVal pUnknown As LPUNKNOWN,ByVal fLock As BOOL,ByVal fLastUnlockCloses As BOOL) As HRESULT
OleLoadFromStream(ByVal pStm As LPOLESTREAM,ByVal iidInterface As LPCSTR,ByVal ppvObj As LPOLECLIENT,ByVal As LHCLIENTDOC,ByVal As LPCSTR,ByVal As LPOLEOBJECT PTR) As OLESTATUS
OleLoad(ByVal pStg As LPSTORAGE,ByVal riid As IID PTR,ByVal pClientSite As LPOLECLIENTSITE,ByVal ppvObj As PVOID PTR) As HRESULT
OleLoadPictureFile(ByVal varFileName As VARIANT,ByVal lplpdispPicture As LPDISPATCH PTR) As HRESULT
OleLoadPicture(ByVal lpstream As LPSTREAM,ByVal lSize As LONG,ByVal fRunmode As BOOL,ByVal riid As IID PTR,ByVal lplpvObj As PVOID PTR) As HRESULT
OleLockServer(ByVal lpoleobject As LPOLEOBJECT,ByVal pLhserver As LHSERVER PTR) As OLESTATUS
OleLoadPictureFileEx(ByVal varFileName As VARIANT,ByVal xSizeDesired As DWORD,ByVal ySizeDesired As DWORD,ByVal dwFlags As DWORD,ByVal lplpdispPicture As LPDISPATCH PTR) As HRESULT
OleLoadFromStream(ByVal pStm As LPSTREAM,ByVal iidInterface As IID PTR,ByVal ppvObj As PVOID PTR) As HRESULT
OleLoadPicturePath(ByVal szURLorPath As LPOLESTR,ByVal punkCaller As LPUNKNOWN,ByVal dwReserved As DWORD,ByVal clrReserved As OLE_COLOR,ByVal riid As IID PTR,ByVal ppvRet As LPVOID PTR) As HRESULT
OleLoadPictureEx(ByVal lpstream As LPSTREAM,ByVal lSize As LONG,ByVal fRunmode As BOOL,ByVal riid As IID PTR,ByVal xSizeDesired As DWORD,ByVal ySizeDesired As DWORD,ByVal dwFlags As DWORD,ByVal lplpvObj As LPVOID PTR) As HRESULT
OleMetafilePictFromIconAndLabel(ByVal hIcon As HICON,ByVal lpszLabel As LPOLESTR,ByVal lpszSourceFile As LPOLESTR,ByVal iIconIndex As UINT) As HGLOBAL
OleNoteObjectVisible(ByVal pUnknown As LPUNKNOWN,ByVal fVisible As BOOL) As HRESULT
OleObjectConvert(ByVal lpoleobject As LPOLEOBJECT,ByVal lpcstr As LPCSTR,ByVal TLPOLECLIENT As LPOLECLIENT,ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR,ByVal lpoleobject As LPOLEOBJECT PTR) As OLESTATUS
OleQueryCreateFromData(ByVal pSrcDataObject As LPDATAOBJECT) As HRESULT
OleQueryReleaseStatus(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleQuerySize(ByVal lpoleobject As LPOLEOBJECT,ByVal pDword As DWORD PTR) As OLESTATUS
OleQueryBounds(ByVal lpoleobject As LPOLEOBJECT,ByVal pRect As RECT PTR) As OLESTATUS
OleQueryOutOfDate(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleQueryLinkFromClip(ByVal lpcstr As LPCSTR,ByVal pOleopt_render As OLEOPT_RENDER,ByVal oleclipformat As OLECLIPFORMAT) As OLESTATUS
OleQueryClientVersion() As DWORD
OleQueryType(ByVal lpoleobject As LPOLEOBJECT,ByVal pLong As LONG PTR) As OLESTATUS
OleQueryServerVersion() As DWORD
OleQueryName(ByVal lpoleobject As LPOLEOBJECT,ByVal lpstr As LPSTR,ByVal pUint As UINT PTR) As OLESTATUS
OleQueryLinkFromData(ByVal pSrcDataObject As LPDATAOBJECT) As HRESULT
OleQueryProtocol(ByVal lpoleobject As LPOLEOBJECT,ByVal lpcstr As LPCSTR) As any PTR
OleQueryCreateFromClip(ByVal lpcstr As LPCSTR,ByVal pOleopt_render As OLEOPT_RENDER,ByVal oleclipformat As OLECLIPFORMAT) As OLESTATUS
OleQueryOpen(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleQueryReleaseMethod(ByVal lpoleobject As LPOLEOBJECT) As OLE_RELEASE_METHOD
OleQueryReleaseError(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleRequestData(ByVal lpoleobject As LPOLEOBJECT,ByVal oleclipformat As OLECLIPFORMAT) As OLESTATUS
OleRegisterServerDoc(ByVal lhserver As LHSERVER,ByVal lpcstr As LPCSTR,ByVal lpoleserverdoc As LPOLESERVERDOC,ByVal pLhserverdoc As LHSERVERDOC PTR) As OLESTATUS
OleRelease(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleRevokeObject(ByVal TLPOLECLIENT As LPOLECLIENT) As OLESTATUS
OleRegEnumVerbs(ByVal clsid As CLSID PTR,ByVal ppenum As LPENUMOLEVERB PTR) As HRESULT
OleRevokeServerDoc(ByVal lhserverdoc As LHSERVERDOC) As OLESTATUS
OleRenameServerDoc(ByVal lhserverdoc As LHSERVERDOC,ByVal lpcstr As LPCSTR) As OLESTATUS
OleRevertServerDoc(ByVal lhserverdoc As LHSERVERDOC) As OLESTATUS
OleRevokeServer(ByVal lhserver As LHSERVER) As OLESTATUS
OleRevokeClientDoc(ByVal lhclientdoc As LHCLIENTDOC) As OLESTATUS
OleRegEnumFormatEtc(ByVal clsid As CLSID PTR,ByVal dwDirection As DWORD,ByVal ppenum As LPENUMFORMATETC PTR) As HRESULT
OleRename(ByVal lpoleobject As LPOLEOBJECT,ByVal lpcstr As LPCSTR) As OLESTATUS
OleRegGetMiscStatus(ByVal clsid As CLSID PTR,ByVal dwAspect As DWORD,ByVal pdwStatus As DWORD PTR) As HRESULT
OleRegGetUserType(ByVal clsid As CLSID PTR,ByVal dwFormOfType As DWORD,ByVal pszUserType As LPOLESTR PTR) As HRESULT
OleRun(ByVal pUnknown As LPUNKNOWN) As HRESULT
OleRegisterServer(ByVal lpcstr As LPCSTR,ByVal lpoleserver As LPOLESERVER,ByVal pLhserver As LHSERVER PTR,ByVal hinstance As HINSTANCE,ByVal pOle_server_use As OLE_SERVER_USE) As OLESTATUS
OleReconnect(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleRevertClientDoc(ByVal lhclientdoc As LHCLIENTDOC) As OLESTATUS
OleRenameClientDoc(ByVal lhclientdoc As LHCLIENTDOC,ByVal lpcstr As LPCSTR) As OLESTATUS
OleRegisterClientDoc(ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR,ByVal lLong As LONG,ByVal pLhclientdoc As LHCLIENTDOC PTR) As OLESTATUS
OleSetBounds(ByVal lpoleobject As LPOLEOBJECT,ByVal pRect As LPCRECT) As OLESTATUS
OleSaveToStream(ByVal pPStm As LPOLEOBJECT,ByVal pStm As LPOLESTREAM) As OLESTATUS
OleSetHostNames(ByVal lpoleobject As LPOLEOBJECT,ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR) As OLESTATUS
OleSetColorScheme(ByVal lpoleobject As LPOLEOBJECT,ByVal pLogpalette As LOGPALETTE PTR) As OLESTATUS
OleSaveToStream(ByVal pPStm As LPPERSISTSTREAM,ByVal pStm As LPSTREAM) As HRESULT
OleSetTargetDevice(ByVal lpoleobject As LPOLEOBJECT,ByVal hglobal As HANDLE) As OLESTATUS
OleSavePictureFile(ByVal lpdispPicture As LPDISPATCH,ByVal bstrFileName As BSTR) As HRESULT
OleSetContainedObject(ByVal pUnknown As LPUNKNOWN,ByVal fContained As BOOL) As HRESULT
OleSetLinkUpdateOptions(ByVal lpoleobject As LPOLEOBJECT,ByVal pOleopt_update As OLEOPT_UPDATE) As OLESTATUS
OleSetData(ByVal lpoleobject As LPOLEOBJECT,ByVal oleclipformat As OLECLIPFORMAT,ByVal handle As HANDLE) As OLESTATUS
OleSetClipboard(ByVal pDataObj As LPDATAOBJECT) As HRESULT
OleSavedClientDoc(ByVal lhclientdoc As LHCLIENTDOC) As OLESTATUS
OleSetMenuDescriptor(ByVal holemenu As HOLEMENU,ByVal hwndFrame As HWND,ByVal hwndActiveObject As HWND,ByVal lpFrame As LPOLEINPLACEFRAME,ByVal lpActiveObj As LPOLEINPLACEACTIVEOBJECT) As HRESULT
OleSetAutoConvert(ByVal clsidOld As CLSID PTR,ByVal clsidNew As CLSID PTR) As HRESULT
OleSave(ByVal pPS As LPPERSISTSTORAGE,ByVal pStg As LPSTORAGE,ByVal fSameAsLoad As BOOL) As HRESULT
OleSavedServerDoc(ByVal lhserverdoc As LHSERVERDOC) As OLESTATUS
OleTranslateColor(ByVal lOleColor As OLE_COLOR,ByVal lHPalette As HPALETTE,ByVal lColorRef As COLORREF PTR) As HRESULT
OleTranslateAccelerator(ByVal lpFrame As LPOLEINPLACEFRAME,ByVal lpFrameInfo As LPOLEINPLACEFRAMEINFO,ByVal lpmsg As LPMSG) As HRESULT
OleUIEditLinks(ByVal TLPOLEUIEDITLINKSA As LPOLEUIEDITLINKSA) As UINT
OleUIConvert(ByVal TLPOLEUICONVERTA As LPOLEUICONVERTA) As UINT
OleUninitialize() 
OleUIConvert(ByVal TLPOLEUICONVERTA As LPOLEUICONVERTW) As UINT
OleUICanConvertOrActivateAs(ByVal rClsid As CLSID PTR,ByVal fIsLinkedObject As BOOL,ByVal wFormat As WORD) As BOOL
OleUIUpdateLinks(ByVal lpOleUILinkCntr As LPOLEUILINKCONTAINERA,ByVal hwndParent As HWND,ByVal lpszTitle As LPSTR,ByVal cLinks As Integer) As BOOL
OleUIPromptUser(ByVal nTemplate As Integer,ByVal hwndParent As HWND,...) As Integer
OleUIChangeIcon(ByVal TLPOLEUICHANGEICONA As LPOLEUICHANGEICONW) As UINT
OleUIBusy(ByVal TLPOLEUIBUSYA As LPOLEUIBUSYW) As UINT
OleUnblockServer(ByVal lhserver As LHSERVER,ByVal pBool As BOOL PTR) As OLESTATUS
OleUnlockServer(ByVal lhserver As LHSERVER) As OLESTATUS
OleUIInsertObject(ByVal TLPOLEUIINSERTOBJECTA As LPOLEUIINSERTOBJECTW) As UINT
OleUIInsertObject(ByVal TLPOLEUIINSERTOBJECTA As LPOLEUIINSERTOBJECTA) As UINT
OleUIPromptUser(ByVal nTemplate As Integer,ByVal hwndParent As HWND,...) As Integer
OleUIUpdateLinks(ByVal lpOleUILinkCntr As LPOLEUILINKCONTAINERW,ByVal hwndParent As HWND,ByVal lpszTitle As LPWSTR,ByVal cLinks As Integer) As BOOL
OleUIAddVerbMenu(ByVal lpOleObj As LPOLEOBJECT,ByVal lpszShortType As LPCSTR,ByVal hMenu As HMENU,ByVal uPos As UINT,ByVal uIDVerbMin As UINT,ByVal uIDVerbMax As UINT,ByVal bAddConvert As BOOL,ByVal idConvert As UINT,ByVal lphMenu As HMENU PTR) As BOOL
OleUIBusy(ByVal TLPOLEUIBUSYA As LPOLEUIBUSYA) As UINT
OleUIPasteSpecial(ByVal TLPOLEUIPASTESPECIALA As LPOLEUIPASTESPECIALW) As UINT
OleUIObjectProperties(ByVal TLPOLEUIOBJECTPROPSA As LPOLEUIOBJECTPROPSW) As UINT
OleUpdate(ByVal lpoleobject As LPOLEOBJECT) As OLESTATUS
OleUIChangeSource(ByVal TLPOLEUICHANGESOURCEA As LPOLEUICHANGESOURCEW) As UINT
OleUIEditLinks(ByVal TLPOLEUIEDITLINKSA As LPOLEUIEDITLINKSW) As UINT
OleUIChangeIcon(ByVal TLPOLEUICHANGEICONA As LPOLEUICHANGEICONA) As UINT
OleUIChangeSource(ByVal TLPOLEUICHANGESOURCEA As LPOLEUICHANGESOURCEA) As UINT
OleUIAddVerbMenu(ByVal lpOleObj As LPOLEOBJECT,ByVal lpszShortType As LPCWSTR,ByVal hMenu As HMENU,ByVal uPos As UINT,ByVal uIDVerbMin As UINT,ByVal uIDVerbMax As UINT,ByVal bAddConvert As BOOL,ByVal idConvert As UINT,ByVal lphMenu As HMENU PTR) As BOOL
OleUIPasteSpecial(ByVal TLPOLEUIPASTESPECIALA As LPOLEUIPASTESPECIALA) As UINT
OleUIObjectProperties(ByVal TLPOLEUIOBJECTPROPSA As LPOLEUIOBJECTPROPSA) As UINT
OpenWaitableTimer(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpTimerName As LPCSTR) As HANDLE
OpenProcessToken(ByVal ProcessHandle As HANDLE,ByVal DesiredAccess As DWORD,ByVal TokenHandle As PHANDLE) As BOOL
OpenService(ByVal hSCManager As SC_HANDLE,ByVal lpServiceName As LPCSTR,ByVal dwDesiredAccess As DWORD) As SC_HANDLE
OpenMutex(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpName As LPCSTR) As HANDLE
OpenSemaphore(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpName As LPCSTR) As HANDLE
OpenDriver(ByVal szDriverName As LPCWSTR,ByVal szSectionName As LPCWSTR,ByVal lParam2 As LONG) As HDRVR
OpenWaitableTimer(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpTimerName As LPCWSTR) As HANDLE
OpenSemaphore(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpName As LPCWSTR) As HANDLE
OpenMutex(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpName As LPCWSTR) As HANDLE
OpenFileMapping(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpName As LPCWSTR) As HANDLE
OpenEvent(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpName As LPCWSTR) As HANDLE
OpenThemeData(ByVal As HWND,ByVal As LPCWSTR) As HTHEME
OpenEventLog(ByVal lpUNCServerName As LPCWSTR,ByVal lpSourceName As LPCWSTR) As HANDLE
OpenBackupEventLog(ByVal lpUNCServerName As LPCWSTR,ByVal lpFileName As LPCWSTR) As HANDLE
OpenPrinter(ByVal pPrinterName As LPSTR,ByVal phPrinter As PHANDLE,ByVal pDefault As LPPRINTER_DEFAULTSA) As BOOL
OpenClipboard(ByVal hwnd As HWND) As BOOL
OpenIcon(ByVal hwnd As HWND) As BOOL
OpenInputDesktop(ByVal dwFlags As DWORD,ByVal fInherit As BOOL,ByVal dwDesiredAccess As DWORD) As HDESK
OpenDesktop(ByVal lpszDesktop As LPSTR,ByVal dwFlags As DWORD,ByVal fInherit As BOOL,ByVal dwDesiredAccess As DWORD) As HDESK
OpenWindowStation(ByVal lpszWinSta As LPSTR,ByVal fInherit As BOOL,ByVal dwDesiredAccess As DWORD) As HWINSTA
OpenFile(ByVal lpFileName As LPCSTR,ByVal lpReOpenBuff As LPOFSTRUCT,ByVal wStyle As UINT) As HFILE
OpenProcess(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal dwProcessId As DWORD) As HANDLE
OpenThread(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal dwThreadId As DWORD) As HANDLE
OpenThreadToken(ByVal ThreadHandle As HANDLE,ByVal DesiredAccess As DWORD,ByVal OpenAsSelf As BOOL,ByVal TokenHandle As PHANDLE) As BOOL
OpenWindowStation(ByVal lpszWinSta As LPWSTR,ByVal fInherit As BOOL,ByVal dwDesiredAccess As DWORD) As HWINSTA
OpenDesktop(ByVal lpszDesktop As LPWSTR,ByVal dwFlags As DWORD,ByVal fInherit As BOOL,ByVal dwDesiredAccess As DWORD) As HDESK
OpenSCManager(ByVal lpMachineName As LPCWSTR,ByVal lpDatabaseName As LPCWSTR,ByVal dwDesiredAccess As DWORD) As SC_HANDLE
OpenService(ByVal hSCManager As SC_HANDLE,ByVal lpServiceName As LPCWSTR,ByVal dwDesiredAccess As DWORD) As SC_HANDLE
OpenPrinter(ByVal pPrinterName As LPWSTR,ByVal phPrinter As PHANDLE,ByVal pDefault As LPPRINTER_DEFAULTSW) As BOOL
OpenSCManager(ByVal lpMachineName As LPCSTR,ByVal lpDatabaseName As LPCSTR,ByVal dwDesiredAccess As DWORD) As SC_HANDLE
OpenBackupEventLog(ByVal lpUNCServerName As LPCSTR,ByVal lpFileName As LPCSTR) As HANDLE
OpenEvent(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpName As LPCSTR) As HANDLE
OpenEventLog(ByVal lpUNCServerName As LPCSTR,ByVal lpSourceName As LPCSTR) As HANDLE
OpenFileMapping(ByVal dwDesiredAccess As DWORD,ByVal bInheritHandle As BOOL,ByVal lpName As LPCSTR) As HANDLE
OutputDebugString(ByVal lpOutputString As LPCWSTR) 
OutputDebugString(ByVal lpOutputString As LPCSTR) 
PackDDElParam(ByVal msg As UINT,ByVal uiLo As UINT_PTR,ByVal uiHi As UINT_PTR) As LPARAM
PageSetupDlg(ByVal pPagesetupdlg As LPPAGESETUPDLGW) As BOOL
PageSetupDlg(ByVal pPagesetupdlg As LPPAGESETUPDLGA) As BOOL
PaintRgn(ByVal hdc As HDC,ByVal hRgn As HRGN) As BOOL
PaintDesktop(ByVal hdc As HDC) As BOOL
PatBlt(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal dwRop As DWORD) As BOOL
PathMakeSystemFolder(ByVal pszPath As LPWSTR) As BOOL
PathMatchSpec(ByVal pszFile As LPCWSTR,ByVal pszSpec As LPCWSTR) As BOOL
PathParseIconLocation(ByVal pszIconFile As LPWSTR) As Integer
PathRemoveArgs(ByVal pszPath As LPWSTR) 
PathMakePretty(ByVal pszPath As LPWSTR) As BOOL
PathAppend(ByVal pszPath As LPWSTR,ByVal pMore As LPCWSTR) As BOOL
PathIsUNC(ByVal pszPath As LPCSTR) As BOOL
PathIsUNCServer(ByVal pszPath As LPCSTR) As BOOL
PathIsUNCServerShare(ByVal pszPath As LPCSTR) As BOOL
PathIsURL(ByVal pszPath As LPCSTR) As BOOL
PathMakePretty(ByVal pszPath As LPSTR) As BOOL
PathMakeSystemFolder(ByVal pszPath As LPSTR) As BOOL
PathMatchSpec(ByVal pszFile As LPCSTR,ByVal pszSpec As LPCSTR) As BOOL
PathParseIconLocation(ByVal pszIconFile As LPSTR) As Integer
PathRelativePathTo(ByVal pszPath As LPSTR,ByVal pszFrom As LPCSTR,ByVal dwAttrFrom As DWORD,ByVal pszTo As LPCSTR,ByVal dwAttrTo As DWORD) As BOOL
PathRemoveBackslash(ByVal pszPath As LPSTR) As LPSTR
PathRemoveFileSpec(ByVal pszPath As LPSTR) As BOOL
PathRenameExtension(ByVal pszPath As LPSTR,ByVal pszExt As LPCSTR) As BOOL
PathSearchAndQualify(ByVal pszPath As LPCSTR,ByVal pszBuf As LPSTR,ByVal cchBuf As UINT) As BOOL
PathSkipRoot(ByVal pszPath As LPCSTR) As LPSTR
PathStripToRoot(ByVal pszPath As LPSTR) As BOOL
PathIsUNCA(ByVal As LPCSTR) As BOOL
PathUnExpandEnvStrings(ByVal pszPath As LPCSTR,ByVal pszBuf As LPSTR,ByVal cchBuf As UINT) As BOOL
PathUnmakeSystemFolder(ByVal pszPath As LPSTR) As BOOL
PathIsPrefix(ByVal pszPrefix As LPCSTR,ByVal pszPath As LPCSTR) As BOOL
PathIsNetworkPath(ByVal pszPath As LPCSTR) As BOOL
PathIsLFNFileSpec(ByVal lpName As LPCSTR) As BOOL
PathIsFileSpec(ByVal pszPath As LPCSTR) As BOOL
PathIsDirectoryEmpty(ByVal pszPath As LPCSTR) As BOOL
PathIsDirectory(ByVal pszPath As LPCSTR) As BOOL
PathIsContentType(ByVal pszPath As LPCSTR,ByVal pszContentType As LPCSTR) As BOOL
PathUnmakeSystemFolder(ByVal pszPath As LPWSTR) As BOOL
PathUnExpandEnvStrings(ByVal pszPath As LPCWSTR,ByVal pszBuf As LPWSTR,ByVal cchBuf As UINT) As BOOL
PathStripToRoot(ByVal pszPath As LPWSTR) As BOOL
PathSkipRoot(ByVal pszPath As LPCWSTR) As LPWSTR
PathSearchAndQualify(ByVal pszPath As LPCWSTR,ByVal pszBuf As LPWSTR,ByVal cchBuf As UINT) As BOOL
PathGetDriveNumber(ByVal pszPath As LPCSTR) As Integer
PathGetCharType(ByVal ch As UCHAR) As UINT
PathGetArgs(ByVal pszPath As LPCSTR) As LPSTR
PathIsSystemFolder(ByVal pszPath As LPCSTR,ByVal dwAttrb As DWORD) As BOOL
PathFindOnPath(ByVal pszPath As LPSTR,ByVal ppszOtherDirs As LPCSTR PTR) As BOOL
PathFindNextComponent(ByVal pszPath As LPCSTR) As LPSTR
PathFindFileName(ByVal pszPath As LPCSTR) As LPSTR
PathFindExtension(ByVal pszPath As LPCSTR) As LPSTR
PathFileExists(ByVal pszPath As LPCSTR) As BOOL
PathCreateFromUrl(ByVal pszUrl As LPCSTR,ByVal pszPath As LPSTR,ByVal pcchPath As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
PathCompactPathEx(ByVal pszOut As LPSTR,ByVal pszSrc As LPCSTR,ByVal cchMax As UINT,ByVal dwFlags As DWORD) As BOOL
PathCompactPath(ByVal hDC As HDC,ByVal pszPath As LPSTR,ByVal dx As UINT) As BOOL
PathCommonPrefix(ByVal pszFile1 As LPCSTR,ByVal pszFile2 As LPCSTR,ByVal achPath As LPSTR) As Integer
PathIsRelative(ByVal pszPath As LPCSTR) As BOOL
PathCombine(ByVal szDest As LPSTR,ByVal lpszDir As LPCSTR,ByVal lpszFile As LPCSTR) As LPSTR
PathCanonicalize(ByVal pszBuf As LPSTR,ByVal pszPath As LPCSTR) As BOOL
PathBuildRoot(ByVal szRoot As LPSTR,ByVal iDrive As Integer) As LPSTR
PathAppend(ByVal pszPath As LPSTR,ByVal pMore As LPCSTR) As BOOL
PathAddExtension(ByVal pszPath As LPSTR,ByVal pszExt As LPCSTR) As BOOL
PathAddBackslash(ByVal pszPath As LPSTR) As LPSTR
PathIsSameRoot(ByVal pszPath1 As LPCSTR,ByVal pszPath2 As LPCSTR) As BOOL
PathIsRoot(ByVal pszPath As LPCSTR) As BOOL
PathUnquoteSpaces(ByVal lpsz As LPSTR) 
PathUndecorate(ByVal pszPath As LPSTR) 
PathStripPath(ByVal pszPath As LPSTR) 
PathSetDlgItemPath(ByVal hDlg As HWND,ByVal id As Integer,ByVal pszPath As LPCSTR) 
PathAddBackslash(ByVal pszPath As LPWSTR) As LPWSTR
PathAddExtension(ByVal pszPath As LPWSTR,ByVal pszExt As LPCWSTR) As BOOL
PathToRegion(ByVal hdc As HDC) As HRGN
PathQuoteSpaces(ByVal lpsz As LPWSTR) 
PathIsURL(ByVal pszPath As LPCWSTR) As BOOL
PathRemoveBlanks(ByVal pszPath As LPWSTR) 
PathRemoveExtension(ByVal pszPath As LPWSTR) 
PathSetDlgItemPath(ByVal hDlg As HWND,ByVal id As Integer,ByVal pszPath As LPCWSTR) 
PathStripPath(ByVal pszPath As LPWSTR) 
PathRemoveExtension(ByVal pszPath As LPSTR) 
PathBuildRoot(ByVal szRoot As LPWSTR,ByVal iDrive As Integer) As LPWSTR
PathCanonicalize(ByVal pszBuf As LPWSTR,ByVal pszPath As LPCWSTR) As BOOL
PathCombine(ByVal szDest As LPWSTR,ByVal lpszDir As LPCWSTR,ByVal lpszFile As LPCWSTR) As LPWSTR
PathCommonPrefix(ByVal pszFile1 As LPCWSTR,ByVal pszFile2 As LPCWSTR,ByVal achPath As LPWSTR) As Integer
PathCompactPath(ByVal hDC As HDC,ByVal pszPath As LPWSTR,ByVal dx As UINT) As BOOL
PathUndecorate(ByVal pszPath As LPWSTR) 
PathUnquoteSpaces(ByVal lpsz As LPWSTR) 
PathCompactPathEx(ByVal pszOut As LPWSTR,ByVal pszSrc As LPCWSTR,ByVal cchMax As UINT,ByVal dwFlags As DWORD) As BOOL
PathCreateFromUrl(ByVal pszUrl As LPCWSTR,ByVal pszPath As LPWSTR,ByVal pcchPath As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
PathFindSuffixArray(ByVal pszPath As LPCSTR,ByVal apszSuffix As LPCSTR PTR,ByVal iArraySize As Integer) As LPCSTR
PathFileExists(ByVal pszPath As LPCWSTR) As BOOL
PathQuoteSpaces(ByVal lpsz As LPSTR) 
PathFindExtension(ByVal pszPath As LPCWSTR) As LPWSTR
PathFindFileName(ByVal pszPath As LPCWSTR) As LPWSTR
PathRenameExtension(ByVal pszPath As LPWSTR,ByVal pszExt As LPCWSTR) As BOOL
PathRemoveFileSpec(ByVal pszPath As LPWSTR) As BOOL
PathFindNextComponent(ByVal pszPath As LPCWSTR) As LPWSTR
PathRemoveArgs(ByVal pszPath As LPSTR) 
PathFindOnPath(ByVal pszPath As LPWSTR,ByVal ppszOtherDirs As LPCWSTR PTR) As BOOL
PathFindSuffixArray(ByVal pszPath As LPCWSTR,ByVal apszSuffix As LPCWSTR PTR,ByVal iArraySize As Integer) As LPCWSTR
PathRemoveBlanks(ByVal pszPath As LPSTR) 
PathGetArgs(ByVal pszPath As LPCWSTR) As LPWSTR
PathRemoveBackslash(ByVal pszPath As LPWSTR) As LPWSTR
PathGetCharType(ByVal ch As WCHAR) As UINT
PathRelativePathTo(ByVal pszPath As LPWSTR,ByVal pszFrom As LPCWSTR,ByVal dwAttrFrom As DWORD,ByVal pszTo As LPCWSTR,ByVal dwAttrTo As DWORD) As BOOL
PathGetDriveNumber(ByVal pszPath As LPCWSTR) As Integer
PathIsContentType(ByVal pszPath As LPCWSTR,ByVal pszContentType As LPCWSTR) As BOOL
PathIsDirectoryEmpty(ByVal pszPath As LPCWSTR) As BOOL
PathIsDirectory(ByVal pszPath As LPCWSTR) As BOOL
PathIsFileSpec(ByVal pszPath As LPCWSTR) As BOOL
PathIsLFNFileSpec(ByVal lpName As LPCWSTR) As BOOL
PathIsNetworkPath(ByVal pszPath As LPCWSTR) As BOOL
PathIsPrefix(ByVal pszPrefix As LPCWSTR,ByVal pszPath As LPCWSTR) As BOOL
PathIsRelative(ByVal pszPath As LPCWSTR) As BOOL
PathIsRoot(ByVal pszPath As LPCWSTR) As BOOL
PathIsSameRoot(ByVal pszPath1 As LPCWSTR,ByVal pszPath2 As LPCWSTR) As BOOL
PathIsSystemFolder(ByVal pszPath As LPCWSTR,ByVal dwAttrb As DWORD) As BOOL
PathIsUNCServerShare(ByVal pszPath As LPCWSTR) As BOOL
PathIsUNCServer(ByVal pszPath As LPCWSTR) As BOOL
PathIsUNC(ByVal pszPath As LPCWSTR) As BOOL
PeekNamedPipe(ByVal hNamedPipe As HANDLE,ByVal lpBuffer As PVOID,ByVal nBufferSize As DWORD,ByVal lpBytesRead As PDWORD,ByVal lpTotalBytesAvail As PDWORD,ByVal lpBytesLeftThisMessage As PDWORD) As BOOL
PeekMessage(ByVal lpMsg As LPMSG,ByVal hwnd As HWND,ByVal wMsgFilterMin As UINT,ByVal wMsgFilterMax As UINT,ByVal wRemoveMsg As UINT) As BOOL
PeekConsoleInput(ByVal hConsoleInput As HANDLE,ByVal lpBuffer As PINPUT_RECORD,ByVal nLength As DWORD,ByVal lpNumberOfEventsRead As PDWORD) As BOOL
Pie(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer,ByVal X3 As Integer,ByVal Y3 As Integer,ByVal X4 As Integer,ByVal Y4 As Integer) As BOOL
PlayEnhMetaFileRecord(ByVal hdc As HDC,ByVal lpHandletable As LPHANDLETABLE,ByVal lpEnhMetaRecord As ENHMETARECORD PTR,ByVal nHandles As UINT) As BOOL
PlayMetaFileRecord(ByVal hdc As HDC,ByVal lpHandletable As LPHANDLETABLE,ByVal lpMetaRecord As LPMETARECORD,ByVal nHandles As UINT) As BOOL
PlayEnhMetaFile(ByVal hdc As HDC,ByVal hemf As HENHMETAFILE,ByVal lpRect As LPCRECT) As BOOL
PlaySound(ByVal lpszName As LPCSTR,ByVal hModule As HMODULE,ByVal dwFlags As DWORD) As BOOL
PlaySound(ByVal lpszName As LPCWSTR,ByVal hModule As HMODULE,ByVal dwFlags As DWORD) As BOOL
PlayMetaFile(ByVal hdc As HDC,ByVal hMF As HMETAFILE) As BOOL
PlgBlt(ByVal hdcDest As HDC,ByVal lpPoint As POINT PTR,ByVal hdcSrc As HDC,ByVal nXSrc As Integer,ByVal nYSrc As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal hbmMask As HBITMAP,ByVal xMask As Integer,ByVal yMask As Integer) As BOOL
Polygon(ByVal hdc As HDC,ByVal lpPoint As POINT PTR,ByVal nCount As Integer) As BOOL
PolyBezier(ByVal hdc As HDC,ByVal lppt As POINT PTR,ByVal cPoints As DWORD) As BOOL
PolyBezierTo(ByVal hdc As HDC,ByVal lppt As POINT PTR,ByVal cCount As DWORD) As BOOL
PolyTextOut(ByVal hdc As HDC,ByVal pptxt As POLYTEXTA PTR,ByVal cStrings As Integer) As BOOL
Polyline(ByVal hdc As HDC,ByVal lpPoint As POINT PTR,ByVal nCount As Integer) As BOOL
PolyPolyline(ByVal hdc As HDC,ByVal lppt As POINT PTR,ByVal lpdwPolyPoints As DWORD PTR,ByVal cCount As DWORD) As BOOL
PolyPolygon(ByVal hdc As HDC,ByVal lpPoint As POINT PTR,ByVal lpPolyCounts As INT_ PTR,ByVal nCount As Integer) As BOOL
PolyTextOut(ByVal hdc As HDC,ByVal pptxt As POLYTEXTW PTR,ByVal cStrings As Integer) As BOOL
PolyDraw(ByVal hdc As HDC,ByVal lppt As POINT PTR,ByVal lpbTypes As BYTE PTR,ByVal cCount As Integer) As BOOL
PolylineTo(ByVal hdc As HDC,ByVal lppt As POINT PTR,ByVal cCount As DWORD) As BOOL
PostQueuedCompletionStatus(ByVal CompletionPort As HANDLE,ByVal dwNumberOfBytesTransferred As DWORD,ByVal dwCompletionKey As DWORD,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
PostQuitMessage(ByVal nExitCode As Integer) 
PostThreadMessage(ByVal idThread As DWORD,ByVal msg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As BOOL
PostMessage(ByVal hwnd As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As BOOL
PrepareTape(ByVal hDevice As HANDLE,ByVal dwOperation As DWORD,ByVal bimmediate As BOOL) As DWORD
PrintWindow(ByVal hWnd As HWND,ByVal hdcBlt As HDC,ByVal nFlags As UINT) As BOOL
PrintDlg(ByVal pPrintdlg As LPPRINTDLGA) As BOOL
PrintDlg(ByVal pPrintdlg As LPPRINTDLGW) As BOOL
PrinterMessageBox(ByVal hPrinter As HANDLE,ByVal error As DWORD,ByVal hwnd As HWND,ByVal pText As LPSTR,ByVal pCaption As LPSTR,ByVal dwType As DWORD) As DWORD
PrinterMessageBox(ByVal hPrinter As HANDLE,ByVal error As DWORD,ByVal hwnd As HWND,ByVal pText As LPWSTR,ByVal pCaption As LPWSTR,ByVal dwType As DWORD) As DWORD
PrinterProperties(ByVal hwnd As HWND,ByVal hPrinter As HANDLE) As BOOL
PrivilegedServiceAuditAlarm(ByVal SubsystemName As LPCWSTR,ByVal ServiceName As LPCWSTR,ByVal ClientToken As HANDLE,ByVal Privileges As PPRIVILEGE_SET,ByVal AccessGranted As BOOL) As BOOL
PrivilegedServiceAuditAlarm(ByVal SubsystemName As LPCSTR,ByVal ServiceName As LPCSTR,ByVal ClientToken As HANDLE,ByVal Privileges As PPRIVILEGE_SET,ByVal AccessGranted As BOOL) As BOOL
PrivilegeCheck(ByVal ClientToken As HANDLE,ByVal RequiredPrivileges As PPRIVILEGE_SET,ByVal pfResult As PBOOL) As BOOL
Process32First(ByVal hSnapshot As HANDLE,ByVal lppe As LPPROCESSENTRY32W) As BOOL
ProcessIdToSessionId(ByVal dwProcessId As DWORD,ByVal pSessionId As DWORD PTR) As BOOL
Process32Next(ByVal hSnapshot As HANDLE,ByVal lppe As LPPROCESSENTRY32W) As BOOL
Process32First(ByVal hSnapshot As HANDLE,ByVal lppe As LPPROCESSENTRY32) As BOOL
Process32Next(ByVal hSnapshot As HANDLE,ByVal lppe As LPPROCESSENTRY32) As BOOL
ProgIDFromCLSID(ByVal clsid As CLSID PTR,ByVal lplpszProgID As LPOLESTR PTR) As HRESULT
PropertySheet(ByVal lpcpropsheetheadera As LPCPROPSHEETHEADERA) As Integer
PropertySheet(ByVal lpcpropsheetheadera As LPCPROPSHEETHEADERW) As Integer
PtInRegion(ByVal hRgn As HRGN,ByVal x As Integer,ByVal y As Integer) As BOOL
PtInRect(ByVal lpRect As LPCRECT,ByVal x As POINT) As BOOL
PtVisible(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer) As BOOL
PulseEvent(ByVal hEvent As HANDLE) As BOOL
PurgeComm(ByVal hFile As HANDLE,ByVal dwFlags As DWORD) As BOOL
QueryPerformanceFrequency(ByVal lpFrequency As PLARGE_INTEGER) As BOOL
QueryDosDevice(ByVal lpDeviceName As LPCSTR,ByVal lpTargetPath As LPSTR,ByVal ucchMax As DWORD) As DWORD
QueryWorkingSet(ByVal hProcess As HANDLE,ByVal pv As PVOID,ByVal cb As DWORD) As BOOL
QueryPathOfRegTypeLib(ByVal guid As GUID PTR,ByVal wMaj As ushort,ByVal wMin As ushort,ByVal lcid As LCID,ByVal lpbstrPathName As LPBSTR) As HRESULT
QueryContextAttributes(ByVal phContext As PCtxtHandle,ByVal ulAttribute As ULONG,ByVal pBuffer As PVOID) As SECURITY_STATUS
QueryPerformanceCounter(ByVal lpPerformanceCount As PLARGE_INTEGER) As BOOL
QueryDosDevice(ByVal lpDeviceName As LPCWSTR,ByVal lpTargetPath As LPWSTR,ByVal ucchMax As DWORD) As DWORD
QueryServiceConfig2(ByVal hService As SC_HANDLE,ByVal dwInfoLevel As DWORD,ByVal lpBuffer As LPBYTE,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As LPDWORD) As BOOL
QueryServiceStatus(ByVal hService As SC_HANDLE,ByVal lpServiceStatus As LPSERVICE_STATUS) As BOOL
QueryServiceLockStatus(ByVal hSCManager As SC_HANDLE,ByVal lpLockStatus As LPQUERY_SERVICE_LOCK_STATUSW,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As PDWORD) As BOOL
QueryServiceConfig(ByVal hService As SC_HANDLE,ByVal lpServiceConfig As LPQUERY_SERVICE_CONFIGW,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As PDWORD) As BOOL
QueryServiceConfig(ByVal hService As SC_HANDLE,ByVal lpServiceConfig As LPQUERY_SERVICE_CONFIGA,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As PDWORD) As BOOL
QueryServiceConfig2(ByVal hService As SC_HANDLE,ByVal dwInfoLevel As DWORD,ByVal lpBuffer As LPBYTE,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As LPDWORD) As BOOL
QueryServiceLockStatus(ByVal hSCManager As SC_HANDLE,ByVal lpLockStatus As LPQUERY_SERVICE_LOCK_STATUSA,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As PDWORD) As BOOL
QueryActCtx(ByVal As DWORD,ByVal As HANDLE,ByVal As PVOID,ByVal As ULONG,ByVal As PVOID,ByVal As SIZE_T,ByVal As SIZE_T PTR) As BOOL
QueryMemoryResourceNotification(ByVal As HANDLE,ByVal As PBOOL) As BOOL
QueryServiceStatusEx(ByVal hService As SC_HANDLE,ByVal InfoLevel As SC_STATUS_TYPE,ByVal lpBuffer As LPBYTE,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As LPDWORD) As BOOL
QueryServiceObjectSecurity(ByVal hService As SC_HANDLE,ByVal dwSecurityInformation As SECURITY_INFORMATION,ByVal lpSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal cbBufSize As DWORD,ByVal pcbBytesNeeded As LPDWORD) As BOOL
QuerySecurityPackageInfo(ByVal pszPackageName As SEC_CHAR PTR,ByVal ppPackageInfo As PSecPkgInfoA PTR) As SECURITY_STATUS
QueryCredentialsAttributes(ByVal phCredential As PCredHandle,ByVal ulAttribute As ULONG,ByVal pBuffer As PVOID) As SECURITY_STATUS
QueryContextAttributes(ByVal phContext As PCtxtHandle,ByVal ulAttribute As ULONG,ByVal pBuffer As PVOID) As SECURITY_STATUS
QuerySecurityPackageInfo(ByVal pszPackageName As SEC_WCHAR PTR,ByVal ppPackageInfo As PSecPkgInfoW PTR) As SECURITY_STATUS
QueryCredentialsAttributes(ByVal phCredential As PCredHandle,ByVal ulAttribute As ULONG,ByVal pBuffer As PVOID) As SECURITY_STATUS
QueueUserWorkItem(ByVal lFunction As LPTHREAD_START_ROUTINE,ByVal Context As PVOID,ByVal Flags As ULONG) As BOOL
QueueUserAPC(ByVal pfnAPC As PAPCFUNC,ByVal hThread As HANDLE,ByVal dwData As DWORD) As DWORD
RaiseException(ByVal dwExceptionCode As DWORD,ByVal dwExceptionFlags As DWORD,ByVal nNumberOfArguments As DWORD,ByVal lpArguments As DWORD PTR) 
RasAdminUserGetInfo(ByVal lpszUserAccountServer As WCHAR PTR,ByVal lpszUser As WCHAR PTR,ByVal pRasUser0 As PRAS_USER_0) As DWORD
RasAdminServerGetInfo(ByVal lpszServer As WCHAR PTR,ByVal pRasServer0 As PRAS_SERVER_0) As DWORD
RasAdminPortClearStatistics(ByVal lpszServer As WCHAR PTR,ByVal lpszPort As WCHAR PTR) As DWORD
RasAdminConnectionHangupNotification(ByVal As RAS_PORT_1 PTR,ByVal As RAS_PORT_STATISTICS PTR,ByVal As RAS_PARAMETERS PTR) 
RasAdminGetUserParms(ByVal lpszParms As WCHAR PTR,ByVal pRasUser0 As PRAS_USER_0) As DWORD
RasAdminReleaseIpAddress(ByVal As WCHAR PTR,ByVal As WCHAR PTR,ByVal As IPADDR PTR) 
RasAdminUserSetInfo(ByVal lpszUserAccountServer As WCHAR PTR,ByVal lpszUser As WCHAR PTR,ByVal pRasUser0 As PRAS_USER_0) As DWORD
RasAdminPortEnum(ByVal lpszServer As WCHAR PTR,ByVal ppRasPort0 As PRAS_PORT_0 PTR,ByVal pcEntriesRead As WORD PTR) As DWORD
RasAdminSetUserParms(ByVal lpszParms As WCHAR PTR,ByVal cchNewParms As DWORD,ByVal pRasUser0 As PRAS_USER_0) As DWORD
RasAdminPortDisconnect(ByVal lpszServer As WCHAR PTR,ByVal lpszPort As WCHAR PTR) As DWORD
RasAdminGetIpAddressForUser(ByVal As WCHAR PTR,ByVal As WCHAR PTR,ByVal As IPADDR PTR,ByVal As BOOL PTR) As DWORD
RasAdminAcceptNewConnection(ByVal As RAS_PORT_1 PTR,ByVal As RAS_PORT_STATISTICS PTR,ByVal As RAS_PARAMETERS PTR) As BOOL
RasAdminGetErrorString(ByVal ResourceId As UINT,ByVal lpszString As WCHAR PTR,ByVal InBufSize As DWORD) As DWORD
RasAdminFreeBuffer(ByVal Pointer As PVOID) As DWORD
RasAdminPortGetInfo(ByVal lpszServer As WCHAR PTR,ByVal lpszPort As WCHAR PTR,ByVal pRasPort1 As RAS_PORT_1 PTR,ByVal pRasStats As RAS_PORT_STATISTICS PTR,ByVal ppRasParams As RAS_PARAMETERS PTR PTR) As DWORD
RasAdminGetUserAccountServer(ByVal lpszDomain As WCHAR PTR,ByVal lpszServer As WCHAR PTR,ByVal lpszUserAccountServer As LPWSTR) As DWORD
RasCreatePhonebookEntry(ByVal hwnd As HWND,ByVal lpcstr As LPCWSTR) As DWORD
RasCreatePhonebookEntry(ByVal hwnd As HWND,ByVal lpcstr As LPCSTR) As DWORD
RasDial(ByVal lprasdialextensions As LPRASDIALEXTENSIONS,ByVal lpcstr As LPCSTR,ByVal lprasdialparamsa As LPRASDIALPARAMSA,ByVal dword As DWORD,ByVal lpvoid As LPVOID,ByVal lphrasconn As LPHRASCONN) As DWORD
RasDialDlg(ByVal lpszPhonebook As LPSTR,ByVal lpszEntry As LPSTR,ByVal lpszPhoneNumber As LPSTR,ByVal lpInfo As LPRASDIALDLG) As BOOL
RasDialDlg(ByVal lpszPhonebook As LPWSTR,ByVal lpszEntry As LPWSTR,ByVal lpszPhoneNumber As LPWSTR,ByVal lpInfo As LPRASDIALDLG) As BOOL
RasDeleteEntry(ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR) As DWORD
RasDeleteEntry(ByVal lpcstr As LPCWSTR,ByVal lpcstr As LPCWSTR) As DWORD
RasDial(ByVal lprasdialextensions As LPRASDIALEXTENSIONS,ByVal lpcstr As LPCWSTR,ByVal lprasdialparamsa As LPRASDIALPARAMSW,ByVal dword As DWORD,ByVal lpvoid As LPVOID,ByVal lphrasconn As LPHRASCONN) As DWORD
RasEnumEntries(ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR,ByVal lprasentrynamea As LPRASENTRYNAMEA,ByVal lpdword As LPDWORD,ByVal lpdword As LPDWORD) As DWORD
RasEnumDevices(ByVal TLPRASDEVINFOA As LPRASDEVINFOA,ByVal lpdword As LPDWORD,ByVal lpdword As LPDWORD) As DWORD
RasEditPhonebookEntry(ByVal hwnd As HWND,ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR) As DWORD
RasEnumConnections(ByVal lprasconna As LPRASCONNA,ByVal lpdword As LPDWORD,ByVal lpdword As LPDWORD) As DWORD
RasEntryDlg(ByVal lpszPhonebook As LPWSTR,ByVal lpszEntry As LPWSTR,ByVal lpInfo As LPRASENTRYDLGW) As BOOL
RasEditPhonebookEntry(ByVal hwnd As HWND,ByVal lpcstr As LPCWSTR,ByVal lpcstr As LPCWSTR) As DWORD
RasEnumConnections(ByVal lprasconna As LPRASCONNW,ByVal lpdword As LPDWORD,ByVal lpdword As LPDWORD) As DWORD
RasEnumEntries(ByVal lpcstr As LPCWSTR,ByVal lpcstr As LPCWSTR,ByVal lprasentrynamea As LPRASENTRYNAMEW,ByVal lpdword As LPDWORD,ByVal lpdword As LPDWORD) As DWORD
RasEnumDevices(ByVal TLPRASDEVINFOA As LPRASDEVINFOW,ByVal lpdword As LPDWORD,ByVal lpdword As LPDWORD) As DWORD
RasEntryDlg(ByVal lpszPhonebook As LPSTR,ByVal lpszEntry As LPSTR,ByVal lpInfo As LPRASENTRYDLGA) As BOOL
RasGetEntryProperties(ByVal lpcstr As LPCWSTR,ByVal lpcstr As LPCWSTR,ByVal TLPRASENTRYA As LPRASENTRYW,ByVal lpdword As LPDWORD,ByVal lpbyte As LPBYTE,ByVal lpdword As LPDWORD) As DWORD
RasGetProjectionInfo(ByVal hrasconn As HRASCONN,ByVal pRasprojection As RASPROJECTION,ByVal lpvoid As LPVOID,ByVal lpdword As LPDWORD) As DWORD
RasGetConnectStatus(ByVal hrasconn As HRASCONN,ByVal lprasconnstatusa As LPRASCONNSTATUSW) As DWORD
RasGetProjectionInfo(ByVal hrasconn As HRASCONN,ByVal pRasprojection As RASPROJECTION,ByVal lpvoid As LPVOID,ByVal lpdword As LPDWORD) As DWORD
RasGetEntryProperties(ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR,ByVal TLPRASENTRYA As LPRASENTRYA,ByVal lpdword As LPDWORD,ByVal lpbyte As LPBYTE,ByVal lpdword As LPDWORD) As DWORD
RasGetCountryInfo(ByVal TLPRASCTRYINFOA As LPRASCTRYINFOA,ByVal lpdword As LPDWORD) As DWORD
RasGetErrorString(ByVal uint As UINT,ByVal lpstr As LPSTR,ByVal dword As DWORD) As DWORD
RasGetConnectStatus(ByVal hrasconn As HRASCONN,ByVal lprasconnstatusa As LPRASCONNSTATUSA) As DWORD
RasGetEntryDialParams(ByVal lpcstr As LPCWSTR,ByVal lprasdialparamsa As LPRASDIALPARAMSW,ByVal lpbool As LPBOOL) As DWORD
RasGetEntryDialParams(ByVal lpcstr As LPCSTR,ByVal lprasdialparamsa As LPRASDIALPARAMSA,ByVal lpbool As LPBOOL) As DWORD
RasGetCountryInfo(ByVal TLPRASCTRYINFOA As LPRASCTRYINFOW,ByVal lpdword As LPDWORD) As DWORD
RasGetErrorString(ByVal uint As UINT,ByVal lpstr As LPWSTR,ByVal dword As DWORD) As DWORD
RasHangUp(ByVal hrasconn As HRASCONN) As DWORD
RasPhonebookDlg(ByVal lpszPhonebook As LPWSTR,ByVal lpszEntry As LPWSTR,ByVal lpInfo As LPRASPBDLGW) As BOOL
RasPhonebookDlg(ByVal lpszPhonebook As LPSTR,ByVal lpszEntry As LPSTR,ByVal lpInfo As LPRASPBDLGA) As BOOL
RasRenameEntry(ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR) As DWORD
RasRenameEntry(ByVal lpcstr As LPCWSTR,ByVal lpcstr As LPCWSTR,ByVal lpcstr As LPCWSTR) As DWORD
RasSetEntryProperties(ByVal lpcstr As LPCWSTR,ByVal lpcstr As LPCWSTR,ByVal TLPRASENTRYA As LPRASENTRYW,ByVal dword As DWORD,ByVal lpbyte As LPBYTE,ByVal dword As DWORD) As DWORD
RasSetEntryDialParams(ByVal lpcstr As LPCWSTR,ByVal lprasdialparamsa As LPRASDIALPARAMSW,ByVal bool As BOOL) As DWORD
RasSetEntryDialParams(ByVal lpcstr As LPCSTR,ByVal lprasdialparamsa As LPRASDIALPARAMSA,ByVal bool As BOOL) As DWORD
RasSetEntryProperties(ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR,ByVal TLPRASENTRYA As LPRASENTRYA,ByVal dword As DWORD,ByVal lpbyte As LPBYTE,ByVal dword As DWORD) As DWORD
RasValidateEntryName(ByVal lpcstr As LPCSTR,ByVal lpcstr As LPCSTR) As DWORD
RasValidateEntryName(ByVal lpcstr As LPCWSTR,ByVal lpcstr As LPCWSTR) As DWORD
ReadProcessorPwrScheme(ByVal As UINT,ByVal As PMACHINE_PROCESSOR_POWER_POLICY) As BOOLEAN
ReadConsoleOutput(ByVal hConsoleOutput As HANDLE,ByVal lpBuffer As PCHAR_INFO,ByVal dwBufferSize As COORD,ByVal dwBufferCoord As COORD,ByVal lpReadRegion As PSMALL_RECT) As BOOL
ReadConsoleOutputCharacter(ByVal hConsoleOutput As HANDLE,ByVal lpCharacter As LPSTR,ByVal nLength As DWORD,ByVal dwReadCoord As COORD,ByVal lpNumberOfCharsRead As PDWORD) As BOOL
ReadPwrScheme(ByVal As UINT,ByVal As PPOWER_POLICY) As BOOLEAN
ReadProcessMemory(ByVal hProcess As HANDLE,ByVal lpBaseAddress As PCVOID,ByVal lpBuffer As PVOID,ByVal nSize As DWORD,ByVal lpNumberOfBytesWritten As PDWORD) As BOOL
ReadUrlCacheEntryStream(ByVal hUrlCacheStream As HANDLE,ByVal dwLocation As DWORD,ByVal lpBuffer As PVOID,ByVal lpdwLen As PDWORD,ByVal Reserved As DWORD) As BOOL
ReadEventLog(ByVal hEventLog As HANDLE,ByVal dwReadFlags As DWORD,ByVal dwRecordOffset As DWORD,ByVal lpBuffer As PVOID,ByVal nNumberOfBytesToRead As DWORD,ByVal pnBytesRead As DWORD PTR,ByVal pnMinNumberOfBytesNeeded As DWORD PTR) As BOOL
ReadDirectoryChanges(ByVal As HANDLE,ByVal As PVOID,ByVal As DWORD,ByVal As BOOL,ByVal As DWORD,ByVal As PDWORD,ByVal As LPOVERLAPPED,ByVal As LPOVERLAPPED_COMPLETION_ROUTINE) As BOOL
ReadConsoleInput(ByVal hConsoleInput As HANDLE,ByVal lpBuffer As PINPUT_RECORD,ByVal nLength As DWORD,ByVal lpNumberOfEventsRead As PDWORD) As BOOL
ReadClassStg(ByVal pStg As LPSTORAGE,ByVal pclsid As CLSID PTR) As HRESULT
ReadGlobalPwrPolicy(ByVal As PGLOBAL_POWER_POLICY) As BOOLEAN
ReadFileScatter(ByVal hFile As HANDLE,ByVal aSegmentArray As FILE_SEGMENT_ELEMENT PTR,ByVal nNumberOfBytesToRead As DWORD,ByVal lpReserved As LPDWORD,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
ReadClassStm(ByVal pStm As LPSTREAM,ByVal pclsid As CLSID PTR) As HRESULT
ReadFileEx(ByVal hFile As HANDLE,ByVal lpBuffer As PVOID,ByVal nNumberOfBytesToRead As DWORD,ByVal lpOverlapped As LPOVERLAPPED,ByVal lpCompletionRoutine As LPOVERLAPPED_COMPLETION_ROUTINE) As BOOL
ReadFmtUserTypeStg(ByVal pstg As LPSTORAGE,ByVal pcf As CLIPFORMAT PTR,ByVal lplpszUserType As LPOLESTR PTR) As HRESULT
ReadConsole(ByVal hConsoleInput As HANDLE,ByVal lpBuffer As PVOID,ByVal nNumberOfCharsToRead As DWORD,ByVal lpNumberOfCharsRead As PDWORD,ByVal lpReserved As PVOID) As BOOL
ReadPrinter(ByVal hPrinter As HANDLE,ByVal pBuf As PVOID,ByVal cdBuf As DWORD,ByVal pNoBytesRead As PDWORD) As BOOL
ReadFile(ByVal hFile As HANDLE,ByVal lpBuffer As PVOID,ByVal nNumberOfBytesToRead As DWORD,ByVal lpNumberOfBytesRead As PDWORD,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
ReadEventLog(ByVal hEventLog As HANDLE,ByVal dwReadFlags As DWORD,ByVal dwRecordOffset As DWORD,ByVal lpBuffer As PVOID,ByVal nNumberOfBytesToRead As DWORD,ByVal pnBytesRead As DWORD PTR,ByVal pnMinNumberOfBytesNeeded As DWORD PTR) As BOOL
ReadConsole(ByVal hConsoleInput As HANDLE,ByVal lpBuffer As PVOID,ByVal nNumberOfCharsToRead As DWORD,ByVal lpNumberOfCharsRead As PDWORD,ByVal lpReserved As PVOID) As BOOL
ReadConsoleOutputCharacter(ByVal hConsoleOutput As HANDLE,ByVal lpCharacter As LPWSTR,ByVal nLength As DWORD,ByVal dwReadCoord As COORD,ByVal lpNumberOfCharsRead As PDWORD) As BOOL
ReadConsoleOutput(ByVal hConsoleOutput As HANDLE,ByVal lpBuffer As PCHAR_INFO,ByVal dwBufferSize As COORD,ByVal dwBufferCoord As COORD,ByVal lpReadRegion As PSMALL_RECT) As BOOL
ReadConsoleOutputAttribute(ByVal hConsoleOutput As HANDLE,ByVal lpAttribute As LPWORD,ByVal nLength As DWORD,ByVal dwReadCoord As COORD,ByVal lpNumberOfAttrsRead As LPDWORD) As BOOL
ReadConsoleInput(ByVal hConsoleInput As HANDLE,ByVal lpBuffer As PINPUT_RECORD,ByVal nLength As DWORD,ByVal lpNumberOfEventsRead As PDWORD) As BOOL
RealGetWindowClass(ByVal hwnd As HWND,ByVal pszType As LPSTR,ByVal cchType As UINT) As UINT
RealizePalette(ByVal hdc As HDC) As UINT
RealChildWindowFromPoint(ByVal hwndParent As HWND,ByVal ptParentClientCoords As POINT) As HWND
RealGetWindowClass(ByVal hwnd As HWND,ByVal pszType As LPWSTR,ByVal cchType As UINT) As UINT
ReBaseImage(ByVal CurrentImageName As LPSTR,ByVal SymbolPath As LPSTR,ByVal fReBase As BOOL,ByVal fRebaseSysfileOk As BOOL,ByVal fGoingDown As BOOL,ByVal CheckImageSize As ULONG,ByVal OldImageSize As ULONG PTR,ByVal OldImageBase As ULONG PTR,ByVal NewImageSize As ULONG PTR,ByVal NewImageBase As ULONG PTR,ByVal TimeStamp As ULONG) As BOOL
RectVisible(ByVal hdc As HDC,ByVal lpRect As LPCRECT) As BOOL
RectInRegion(ByVal hRgn As HRGN,ByVal lpRect As LPCRECT) As BOOL
Rectangle(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer) As BOOL
recvfrom(ByVal s As SOCKET,ByVal buf As zstring PTR,ByVal lLen As Integer,ByVal flags As Integer,ByVal from As sockaddr PTR,ByVal fromlen As Integer PTR) As Integer
recv(ByVal s As SOCKET,ByVal buf As zstring PTR,ByVal lLen As Integer,ByVal flags As Integer) As Integer
RedrawWindow(ByVal hwnd As HWND,ByVal lprcUpdate As LPCRECT,ByVal hrgnUpdate As HRGN,ByVal fuRedraw As UINT) As BOOL
RegCloseKey(ByVal hKey As HKEY) As LONG
RegCreateKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR,ByVal phkResult As PHKEY) As LONG
RegConnectRegistry(ByVal lpMachineName As LPCSTR,ByVal hKey As HKEY,ByVal phkResult As PHKEY) As LONG
RegConnectRegistry(ByVal lpMachineName As LPCWSTR,ByVal hKey As HKEY,ByVal phkResult As PHKEY) As LONG
RegCreateKeyEx(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR,ByVal Reserved As DWORD,ByVal lpClass As LPSTR,ByVal dwOptions As DWORD,ByVal samDesired As REGSAM,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES,ByVal phkResult As PHKEY,ByVal lpdwDisposition As PDWORD) As LONG
RegCreateKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR,ByVal phkResult As PHKEY) As LONG
RegCreateKeyEx(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR,ByVal Reserved As DWORD,ByVal lpClass As LPWSTR,ByVal dwOptions As DWORD,ByVal samDesired As REGSAM,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES,ByVal phkResult As PHKEY,ByVal lpdwDisposition As PDWORD) As LONG
RegDeleteKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR) As LONG
RegDeleteValue(ByVal hKey As HKEY,ByVal lpValueName As LPCWSTR) As LONG
RegDeleteValue(ByVal hKey As HKEY,ByVal lpValueName As LPCSTR) As LONG
RegDeleteKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR) As LONG
RegEnumValue(ByVal hKey As HKEY,ByVal dwIndex As DWORD,ByVal lpValueName As LPSTR,ByVal lpcbValueName As PDWORD,ByVal lpReserved As PDWORD,ByVal lpType As PDWORD,ByVal lpData As LPBYTE,ByVal lpcbData As PDWORD) As LONG
RegEnumKeyEx(ByVal hKey As HKEY,ByVal dwIndex As DWORD,ByVal lpName As LPSTR,ByVal lpcbName As PDWORD,ByVal lpReserved As PDWORD,ByVal lpClass As LPSTR,ByVal lpcbClass As PDWORD,ByVal lpftLastWriteTime As PFILETIME) As LONG
RegEnumKey(ByVal hKey As HKEY,ByVal dwIndex As DWORD,ByVal lpName As LPWSTR,ByVal cbName As DWORD) As LONG
RegEnumValue(ByVal hKey As HKEY,ByVal dwIndex As DWORD,ByVal lpValueName As LPWSTR,ByVal lpcbValueName As PDWORD,ByVal lpReserved As PDWORD,ByVal lpType As PDWORD,ByVal lpData As LPBYTE,ByVal lpcbData As PDWORD) As LONG
RegEnumKey(ByVal hKey As HKEY,ByVal dwIndex As DWORD,ByVal lpName As LPSTR,ByVal cbName As DWORD) As LONG
RegEnumKeyEx(ByVal hKey As HKEY,ByVal dwIndex As DWORD,ByVal lpName As LPWSTR,ByVal lpcbName As PDWORD,ByVal lpReserved As PDWORD,ByVal lpClass As LPWSTR,ByVal lpcbClass As PDWORD,ByVal lpftLastWriteTime As PFILETIME) As LONG
RegFlushKey(ByVal hKey As HKEY) As LONG
RegGetKeySecurity(ByVal hKey As HKEY,ByVal SecurityInformation As SECURITY_INFORMATION,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal lpcbSecurityDescriptor As PDWORD) As LONG
RegisterClipboardFormat(ByVal lpString As LPCSTR) As UINT
RegisterClass(ByVal Class As WNDCLASSW PTR) As ATOM
RegisterClassEx(ByVal pcWndClassEx As WNDCLASSEXA PTR) As ATOM
RegisterEventSource(ByVal lpUNCServerName As LPCWSTR,ByVal lpSourceName As LPCWSTR) As HANDLE
RegisterWindowMessage(ByVal lpString As LPCSTR) As UINT
RegisterHotKey(ByVal hwnd As HWND,ByVal id As Integer,ByVal fsModifiers As UINT,ByVal vk As UINT) As BOOL
RegisterWaitForSingleObject(ByVal phNewWaitObject As PHANDLE,ByVal hObject As HANDLE,ByVal Callback As WAITORTIMERCALLBACKFUNC,ByVal Context As PVOID,ByVal dwMilliseconds As ULONG,ByVal dwFlags As ULONG) As BOOL
RegisterServiceCtrlHandlerEx(ByVal lpServiceName As LPCSTR,ByVal lpHandlerProc As LPHANDLER_FUNCTION_EX,ByVal lpContext As LPVOID) As SERVICE_STATUS_HANDLE
RegisterRawInputDevices(ByVal As PCRAWINPUTDEVICE,ByVal As UINT,ByVal As UINT) As BOOL
RegisterServiceCtrlHandlerEx(ByVal lpServiceName As LPCWSTR,ByVal lpHandlerProc As LPHANDLER_FUNCTION_EX,ByVal lpContext As LPVOID) As SERVICE_STATUS_HANDLE
RegisterServiceCtrlHandler(ByVal lpServiceName As LPCWSTR,ByVal lpHandlerProc As LPHANDLER_FUNCTION) As SERVICE_STATUS_HANDLE
RegisterEventSource(ByVal lpUNCServerName As LPCSTR,ByVal lpSourceName As LPCSTR) As HANDLE
RegisterServiceCtrlHandler(ByVal lpServiceName As LPCSTR,ByVal lpHandlerProc As LPHANDLER_FUNCTION) As SERVICE_STATUS_HANDLE
RegisterDragDrop(ByVal hwnd As HWND,ByVal pDropTarget As LPDROPTARGET) As HRESULT
RegisterClassEx(ByVal pcWndClassEx As WNDCLASSEXW PTR) As ATOM
RegisterClipboardFormat(ByVal lpString As LPCWSTR) As UINT
RegisterDialogClasses(ByVal As HANDLE) As BOOL
RegisterClass(ByVal Class As WNDCLASSA PTR) As ATOM
RegisterWindowMessage(ByVal lpString As LPCWSTR) As UINT
RegisterWaitForSingleObjectEx(ByVal hObject As HANDLE,ByVal Callback As WAITORTIMERCALLBACKFUNC,ByVal Context As PVOID,ByVal dwMilliseconds As ULONG,ByVal dwFlags As ULONG) As HANDLE
RegisterTypeLib(ByVal ptlib As LPTYPELIB,ByVal szFullPath As OLECHAR PTR,ByVal szHelpDir As OLECHAR PTR) As HRESULT
RegisterActiveObject(ByVal punk As IUnknown PTR,ByVal rclsid As CLSID PTR,ByVal dwFlags As DWORD,ByVal pdwRegister As DWORD PTR) As HRESULT
RegLoadKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR,ByVal lpFile As LPCSTR) As LONG
RegLoadKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR,ByVal lpFile As LPCWSTR) As LONG
RegNotifyChangeKeyValue(ByVal hKey As HKEY,ByVal bWatchSubtree As BOOL,ByVal dwNotifyFilter As DWORD,ByVal hEvent As HANDLE,ByVal fAsynchronus As BOOL) As LONG
RegOpenKeyEx(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR,ByVal ulOptions As DWORD,ByVal samDesired As REGSAM,ByVal phkResult As PHKEY) As LONG
RegOpenKeyEx(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR,ByVal ulOptions As DWORD,ByVal samDesired As REGSAM,ByVal phkResult As PHKEY) As LONG
RegOpenKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR,ByVal phkResult As PHKEY) As LONG
RegOpenKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR,ByVal phkResult As PHKEY) As LONG
RegQueryInfoKey(ByVal hKey As HKEY,ByVal lpClass As LPWSTR,ByVal lpcbClass As PDWORD,ByVal lpReserved As PDWORD,ByVal lpcSubKeys As PDWORD,ByVal lpcbMaxSubKeyLen As PDWORD,ByVal lpcbMaxClassLen As PDWORD,ByVal lpcValues As PDWORD,ByVal lpcbMaxValueNameLen As PDWORD,ByVal lpcbMaxValueLen As PDWORD,ByVal lpcbSecurityDescriptor As PDWORD,ByVal lpftLastWriteTime As PFILETIME) As LONG
RegQueryValue(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR,ByVal lpValue As LPSTR,ByVal lpcbValue As PLONG) As LONG
RegQueryValueEx(ByVal hKey As HKEY,ByVal lpValueName As LPCWSTR,ByVal lpReserved As LPDWORD,ByVal lpType As LPDWORD,ByVal lpData As LPBYTE,ByVal lpcbData As LPDWORD) As LONG
RegQueryValue(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR,ByVal lpValue As LPWSTR,ByVal lpcbValue As PLONG) As LONG
RegQueryMultipleValues(ByVal hKey As HKEY,ByVal val_list As PVALENTA,ByVal num_vals As DWORD,ByVal lpValueBuf As LPSTR,ByVal ldwTotsize As LPDWORD) As LONG
RegQueryValueEx(ByVal hKey As HKEY,ByVal lpValueName As LPCSTR,ByVal lpReserved As LPDWORD,ByVal lpType As LPDWORD,ByVal lpData As LPBYTE,ByVal lpcbData As LPDWORD) As LONG
RegQueryInfoKey(ByVal hKey As HKEY,ByVal lpClass As LPSTR,ByVal lpcbClass As PDWORD,ByVal lpReserved As PDWORD,ByVal lpcSubKeys As PDWORD,ByVal lpcbMaxSubKeyLen As PDWORD,ByVal lpcbMaxClassLen As PDWORD,ByVal lpcValues As PDWORD,ByVal lpcbMaxValueNameLen As PDWORD,ByVal lpcbMaxValueLen As PDWORD,ByVal lpcbSecurityDescriptor As PDWORD,ByVal lpftLastWriteTime As PFILETIME) As LONG
RegQueryMultipleValues(ByVal hKey As HKEY,ByVal val_list As PVALENTW,ByVal num_vals As DWORD,ByVal lpValueBuf As LPWSTR,ByVal ldwTotsize As LPDWORD) As LONG
RegRestoreKey(ByVal hKey As HKEY,ByVal lpFile As LPCSTR,ByVal dwFlags As DWORD) As LONG
RegReplaceKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR,ByVal lpNewFile As LPCSTR,ByVal lpOldFile As LPCSTR) As LONG
RegReplaceKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR,ByVal lpNewFile As LPCWSTR,ByVal lpOldFile As LPCWSTR) As LONG
RegRestoreKey(ByVal hKey As HKEY,ByVal lpFile As LPCWSTR,ByVal dwFlags As DWORD) As LONG
RegSetKeySecurity(ByVal hKey As HKEY,ByVal SecurityInformation As SECURITY_INFORMATION,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR) As LONG
RegSaveKey(ByVal hKey As HKEY,ByVal lpFile As LPCWSTR,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As LONG
RegSetValueEx(ByVal hKey As HKEY,ByVal lpValueName As LPCWSTR,ByVal Reserved As DWORD,ByVal dwType As DWORD,ByVal lpData As BYTE PTR,ByVal cbData As DWORD) As LONG
RegSetValue(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR,ByVal dwType As DWORD,ByVal lpData As LPCSTR,ByVal cbData As DWORD) As LONG
RegSetValueEx(ByVal hKey As HKEY,ByVal lpValueName As LPCSTR,ByVal Reserved As DWORD,ByVal dwType As DWORD,ByVal lpData As BYTE PTR,ByVal cbData As DWORD) As LONG
RegSaveKey(ByVal hKey As HKEY,ByVal lpFile As LPCSTR,ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As LONG
RegSetValue(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR,ByVal dwType As DWORD,ByVal lpData As LPCWSTR,ByVal cbData As DWORD) As LONG
RegUnLoadKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCWSTR) As LONG
RegUnLoadKey(ByVal hKey As HKEY,ByVal lpSubKey As LPCSTR) As LONG
ReleaseCapture() As BOOL
ReleaseSemaphore(ByVal hSemaphore As HANDLE,ByVal lReleaseCount As LONG,ByVal lpPreviousCount As LPLONG) As BOOL
ReleaseDC(ByVal hwnd As HWND,ByVal hdc As HDC) As Integer
ReleaseActCtx(ByVal As HANDLE) 
ReleaseMutex(ByVal hMutex As HANDLE) As BOOL
ReleaseStgMedium(ByVal lpstgmedium As LPSTGMEDIUM) 
RemoveDirectory(ByVal lpPathName As LPCWSTR) As BOOL
RemoveFontResourceEx(ByVal lpcstr As LPCWSTR,ByVal dword As DWORD,ByVal DESIGNVECTOR As PVOID) As BOOL
RemoveDirectory(ByVal lpPathName As LPCSTR) As BOOL
RemoveFontMemResourceEx(ByVal handle As HANDLE) As BOOL
RemoveRelocations(ByVal As PCHAR) 
RemoveVectoredExceptionHandler(ByVal As PVOID) As ULONG
RemovePrivateCvSymbolicEx(ByVal As PCHAR,ByVal As ULONG,ByVal As PCHAR PTR,ByVal As ULONG PTR) As BOOL
RemoveProp(ByVal hwnd As HWND,ByVal lpString As LPCSTR) As HANDLE
RemoveProp(ByVal hwnd As HWND,ByVal lpString As LPCWSTR) As HANDLE
RemovePrivateCvSymbolic(ByVal As PCHAR,ByVal As PCHAR PTR,ByVal As ULONG PTR) As BOOL
RemoveFontResource(ByVal lpFileName As LPCSTR) As BOOL
RemoveFontResourceEx(ByVal lpcstr As LPCSTR,ByVal dword As DWORD,ByVal DESIGNVECTOR As PVOID) As BOOL
RemoveFontResource(ByVal lpFileName As LPCWSTR) As BOOL
RemoveMenu(ByVal hMenu As HMENU,ByVal nPosition As UINT,ByVal wFlags As UINT) As BOOL
ReplaceText(ByVal pFindreplace As LPFINDREPLACEA) As HWND
ReplaceText(ByVal pFindreplace As LPFINDREPLACEW) As HWND
ReplyMessage(ByVal lReply As LRESULT) As BOOL
ReportEvent(ByVal hEventLog As HANDLE,ByVal wType As WORD,ByVal wCategory As WORD,ByVal dwEventID As DWORD,ByVal lpUserSid As PSID,ByVal wNumStrings As WORD,ByVal dwDataSize As DWORD,ByVal lpStrings As LPCSTR PTR,ByVal lpRawData As PVOID) As BOOL
ReportEvent(ByVal hEventLog As HANDLE,ByVal wType As WORD,ByVal wCategory As WORD,ByVal dwEventID As DWORD,ByVal lpUserSid As PSID,ByVal wNumStrings As WORD,ByVal dwDataSize As DWORD,ByVal lpStrings As LPCWSTR PTR,ByVal lpRawData As PVOID) As BOOL
ResetWriteWatch(ByVal lpBaseAddress As LPVOID,ByVal dwRegionSize As SIZE_T) As UINT
ResetDC(ByVal hdc As HDC,ByVal lpInitData As DEVMODEW PTR) As HDC
ResetDC(ByVal hdc As HDC,ByVal lpInitData As DEVMODEA PTR) As HDC
ResetEvent(ByVal hEvent As HANDLE) As BOOL
ResetPrinter(ByVal hPrinter As HANDLE,ByVal pDefault As LPPRINTER_DEFAULTSW) As BOOL
ResetPrinter(ByVal hPrinter As HANDLE,ByVal pDefault As LPPRINTER_DEFAULTSA) As BOOL
ResizePalette(ByVal hPalette As HPALETTE,ByVal nNumEntries As UINT) As BOOL
RestoreLastError(ByVal As DWORD) 
RestoreDC(ByVal hdc As HDC,ByVal nSavedDC As Integer) As BOOL
ResumeThread(ByVal hThread As HANDLE) As DWORD
RetrieveUrlCacheEntryStream(ByVal lpszUrlName As LPCSTR,ByVal lpCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOA,ByVal lpdwCacheEntryInfoBufferSize As PDWORD,ByVal fRandomRead As BOOL,ByVal dwReserved As DWORD) As HANDLE
RetrieveUrlCacheEntryFile(ByVal lpszUrlName As LPCSTR,ByVal lpCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOW,ByVal lpdwCacheEntryInfoBufferSize As PDWORD,ByVal dwReserved As DWORD) As BOOL
RetrieveUrlCacheEntryStream(ByVal lpszUrlName As LPCSTR,ByVal lpCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOW,ByVal lpdwCacheEntryInfoBufferSize As PDWORD,ByVal fRandomRead As BOOL,ByVal dwReserved As DWORD) As HANDLE
RetrieveUrlCacheEntryFile(ByVal lpszUrlName As LPCSTR,ByVal lpCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOA,ByVal lpdwCacheEntryInfoBufferSize As PDWORD,ByVal dwReserved As DWORD) As BOOL
ReuseDDElParam(ByVal lParam As LPARAM,ByVal msgIn As UINT,ByVal msgOut As UINT,ByVal uiLo As UINT_PTR,ByVal uiHi As UINT_PTR) As LPARAM
RevertToSelf() As BOOL
RevertSecurityContext(ByVal phContext As PCtxtHandle) As SECURITY_STATUS
RevokeActiveObject(ByVal dwRegister As DWORD,ByVal pvReserved As any PTR) As HRESULT
RevokeDragDrop(ByVal hwnd As HWND) As HRESULT
RoundRect(ByVal hdc As HDC,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer,ByVal X3 As Integer,ByVal Y3 As Integer) As BOOL
RpcBindingInqObject(ByVal Binding As RPC_BINDING_HANDLE,ByVal ObjectUuid As UUID PTR) As RPC_STATUS
RpcBindingVectorFree(ByVal BindingVector As RPC_BINDING_VECTOR PTR PTR) As RPC_STATUS
RpcBindingSetObject(ByVal Binding As RPC_BINDING_HANDLE,ByVal ObjectUuid As UUID PTR) As RPC_STATUS
RpcBindingInqAuthClient(ByVal ClientBinding As RPC_BINDING_HANDLE,ByVal Privs As RPC_AUTHZ_HANDLE PTR,ByVal ServerPrincName As ubyte PTR PTR,ByVal AuthnLevel As uinteger PTR,ByVal AuthnSvc As uinteger PTR,ByVal AuthzSvc As uinteger PTR) As RPC_STATUS
RpcBindingInqAuthClient(ByVal ClientBinding As RPC_BINDING_HANDLE,ByVal Privs As RPC_AUTHZ_HANDLE PTR,ByVal ServerPrincName As ushort PTR PTR,ByVal AuthnLevel As uinteger PTR,ByVal AuthnSvc As uinteger PTR,ByVal AuthzSvc As uinteger PTR) As RPC_STATUS
RpcBindingReset(ByVal Binding As RPC_BINDING_HANDLE) As RPC_STATUS
RpcBindingFromStringBinding(ByVal StringBinding As ubyte PTR,ByVal Binding As RPC_BINDING_HANDLE PTR) As RPC_STATUS
RpcBindingToStringBinding(ByVal Binding As RPC_BINDING_HANDLE,ByVal StringBinding As ubyte PTR PTR) As RPC_STATUS
RpcBindingInqAuthInfoEx(ByVal Binding As RPC_BINDING_HANDLE,ByVal ServerPrincName As ushort PTR PTR,ByVal AuthnLevel As uinteger PTR,ByVal AuthnSvc As uinteger PTR,ByVal AuthIdentity As RPC_AUTH_IDENTITY_HANDLE PTR,ByVal AuthzSvc As uinteger PTR,ByVal RpcQosVersion As uinteger,ByVal SecurityQOS As RPC_SECURITY_QOS PTR) As RPC_STATUS
RpcBindingFree(ByVal Binding As RPC_BINDING_HANDLE PTR) As RPC_STATUS
RpcBindingCopy(ByVal SourceBinding As RPC_BINDING_HANDLE,ByVal DestinationBinding As RPC_BINDING_HANDLE PTR) As RPC_STATUS
RpcBindingInqAuthInfoEx(ByVal Binding As RPC_BINDING_HANDLE,ByVal ServerPrincName As ubyte PTR PTR,ByVal AuthnLevel As uinteger PTR,ByVal AuthnSvc As uinteger PTR,ByVal AuthIdentity As RPC_AUTH_IDENTITY_HANDLE PTR,ByVal AuthzSvc As uinteger PTR,ByVal RpcQosVersion As uinteger,ByVal SecurityQOS As RPC_SECURITY_QOS PTR) As RPC_STATUS
RpcBindingSetAuthInfoEx(ByVal Binding As RPC_BINDING_HANDLE,ByVal ServerPrincName As ubyte PTR,ByVal AuthnLevel As uinteger,ByVal AuthnSvc As uinteger,ByVal AuthIdentity As RPC_AUTH_IDENTITY_HANDLE,ByVal AuthzSvc As uinteger,ByVal SecurityQos As RPC_SECURITY_QOS PTR) As RPC_STATUS
RpcBindingSetAuthInfo(ByVal Binding As RPC_BINDING_HANDLE,ByVal ServerPrincName As ubyte PTR,ByVal AuthnLevel As uinteger,ByVal AuthnSvc As uinteger,ByVal AuthIdentity As RPC_AUTH_IDENTITY_HANDLE,ByVal AuthzSvc As uinteger) As RPC_STATUS
RpcBindingInqAuthInfo(ByVal Binding As RPC_BINDING_HANDLE,ByVal ServerPrincName As ubyte PTR PTR,ByVal AuthnLevel As uinteger PTR,ByVal AuthnSvc As uinteger PTR,ByVal AuthIdentity As RPC_AUTH_IDENTITY_HANDLE PTR,ByVal AuthzSvc As uinteger PTR) As RPC_STATUS
RpcBindingInqAuthClient(ByVal ClientBinding As RPC_BINDING_HANDLE,ByVal Privs As RPC_AUTHZ_HANDLE PTR,ByVal ServerPrincName As ubyte PTR PTR,ByVal AuthnLevel As uinteger PTR,ByVal AuthnSvc As uinteger PTR,ByVal AuthzSvc As uinteger PTR) As RPC_STATUS
RpcBindingSetAuthInfoEx(ByVal Binding As RPC_BINDING_HANDLE,ByVal ServerPrincName As ushort PTR,ByVal AuthnLevel As uinteger,ByVal AuthnSvc As uinteger,ByVal AuthIdentity As RPC_AUTH_IDENTITY_HANDLE,ByVal AuthzSvc As uinteger,ByVal SecurityQos As RPC_SECURITY_QOS PTR) As RPC_STATUS
RpcBindingServerFromClient(ByVal ClientBinding As RPC_BINDING_HANDLE,ByVal ServerBinding As RPC_BINDING_HANDLE PTR) As RPC_STATUS
RpcBindingSetAuthInfo(ByVal Binding As RPC_BINDING_HANDLE,ByVal ServerPrincName As ushort PTR,ByVal AuthnLevel As uinteger,ByVal AuthnSvc As uinteger,ByVal AuthIdentity As RPC_AUTH_IDENTITY_HANDLE,ByVal AuthzSvc As uinteger) As RPC_STATUS
RpcBindingInqAuthInfo(ByVal Binding As RPC_BINDING_HANDLE,ByVal ServerPrincName As ushort PTR PTR,ByVal AuthnLevel As uinteger PTR,ByVal AuthnSvc As uinteger PTR,ByVal AuthIdentity As RPC_AUTH_IDENTITY_HANDLE PTR,ByVal AuthzSvc As uinteger PTR) As RPC_STATUS
RpcBindingInqAuthClient(ByVal ClientBinding As RPC_BINDING_HANDLE,ByVal Privs As RPC_AUTHZ_HANDLE PTR,ByVal ServerPrincName As ushort PTR PTR,ByVal AuthnLevel As uinteger PTR,ByVal AuthnSvc As uinteger PTR,ByVal AuthzSvc As uinteger PTR) As RPC_STATUS
RpcBindingFromStringBinding(ByVal StringBinding As ushort PTR,ByVal Binding As RPC_BINDING_HANDLE PTR) As RPC_STATUS
RpcBindingToStringBinding(ByVal Binding As RPC_BINDING_HANDLE,ByVal StringBinding As ushort PTR PTR) As RPC_STATUS
RpcCancelThread(ByVal Thread As any PTR) As RPC_STATUS
RpcEpUnregister(ByVal IfSpec As RPC_IF_HANDLE,ByVal BindingVector As RPC_BINDING_VECTOR PTR,ByVal UuidVector As UUID_VECTOR PTR) As RPC_STATUS
RpcEpRegisterNoReplace(ByVal IfSpec As RPC_IF_HANDLE,ByVal BindingVector As RPC_BINDING_VECTOR PTR,ByVal UuidVector As UUID_VECTOR PTR,ByVal Annotation As ushort PTR) As RPC_STATUS
RpcEpResolveBinding(ByVal Binding As RPC_BINDING_HANDLE,ByVal IfSpec As RPC_IF_HANDLE) As RPC_STATUS
RpcEpRegisterNoReplace(ByVal IfSpec As RPC_IF_HANDLE,ByVal BindingVector As RPC_BINDING_VECTOR PTR,ByVal UuidVector As UUID_VECTOR PTR,ByVal Annotation As ubyte PTR) As RPC_STATUS
RpcEpRegister(ByVal IfSpec As RPC_IF_HANDLE,ByVal BindingVector As RPC_BINDING_VECTOR PTR,ByVal UuidVector As UUID_VECTOR PTR,ByVal Annotation As ushort PTR) As RPC_STATUS
RpcEpRegister(ByVal IfSpec As RPC_IF_HANDLE,ByVal BindingVector As RPC_BINDING_VECTOR PTR,ByVal UuidVector As UUID_VECTOR PTR,ByVal Annotation As ubyte PTR) As RPC_STATUS
RpcIfIdVectorFree(ByVal IfIdVector As RPC_IF_ID_VECTOR PTR PTR) As RPC_STATUS
RpcImpersonateClient(ByVal BindingHandle As RPC_BINDING_HANDLE) As RPC_STATUS
RpcIfInqId(ByVal RpcIfHandle As RPC_IF_HANDLE,ByVal RpcIfId As RPC_IF_ID PTR) As RPC_STATUS
RpcMgmtBindingSetParameter(ByVal As RPC_BINDING_HANDLE,ByVal As uinteger,ByVal As uinteger) As RPC_STATUS
RpcMgmtBindingInqParameter(ByVal As RPC_BINDING_HANDLE,ByVal As uinteger,ByVal As uinteger PTR) As RPC_STATUS
RpcMgmtInqStats(ByVal Binding As RPC_BINDING_HANDLE,ByVal Statistics As RPC_STATS_VECTOR PTR PTR) As RPC_STATUS
RpcMgmtSetCancelTimeout(ByVal Timeout As Integer) As RPC_STATUS
RpcMgmtEpEltInqDone(ByVal ByRefquiryContext As RPC_EP_INQ_HANDLE PTR) As RPC_STATUS
RpcMgmtIsServerListening(ByVal Binding As RPC_BINDING_HANDLE) As RPC_STATUS
RpcMgmtEpUnregister(ByVal EpBinding As RPC_BINDING_HANDLE,ByVal IfId As RPC_IF_ID PTR,ByVal Binding As RPC_BINDING_HANDLE,ByVal ObjectUuid As UUID PTR) As RPC_STATUS
RpcMgmtInqComTimeout(ByVal Binding As RPC_BINDING_HANDLE,ByVal Timeout As uinteger PTR) As RPC_STATUS
RpcMgmtSetServerStackSize(ByVal ThreadStackSize As uinteger) As RPC_STATUS
RpcMgmtWaitServerListen() As RPC_STATUS
RpcMgmtEpEltInqBegin(ByVal EpBinding As RPC_BINDING_HANDLE,ByVal inquiryType As uinteger,ByVal IfId As RPC_IF_ID PTR,ByVal VersOption As uinteger,ByVal ObjectUuid As UUID PTR,ByVal inquiryContext As RPC_EP_INQ_HANDLE PTR) As RPC_STATUS
RpcMgmtStopServerListening(ByVal Binding As RPC_BINDING_HANDLE) As RPC_STATUS
RpcMgmtInqDefaultProtectLevel(ByVal AuthnSvc As uinteger,ByVal AuthnLevel As uinteger PTR) As RPC_STATUS
RpcMgmtEnableIdleCleanup() As RPC_STATUS
RpcMgmtInqServerPrincName(ByVal Binding As RPC_BINDING_HANDLE,ByVal AuthnSvc As uinteger,ByVal ServerPrincName As ushort PTR PTR) As RPC_STATUS
RpcMgmtSetComTimeout(ByVal Binding As RPC_BINDING_HANDLE,ByVal Timeout As uinteger) As RPC_STATUS
RpcMgmtEpEltInqNext(ByVal ByValquiryContext As RPC_EP_INQ_HANDLE,ByVal IfId As RPC_IF_ID PTR,ByVal Binding As RPC_BINDING_HANDLE PTR,ByVal ObjectUuid As UUID PTR,ByVal Annotation As ushort PTR PTR) As RPC_STATUS
RpcMgmtSetAuthorizationFn(ByVal AuthorizationFn As RPC_MGMT_AUTHORIZATION_FN) As RPC_STATUS
RpcMgmtInqIfIds(ByVal Binding As RPC_BINDING_HANDLE,ByVal IfIdVector As RPC_IF_ID_VECTOR PTR PTR) As RPC_STATUS
RpcMgmtEpEltInqNext(ByVal ByValquiryContext As RPC_EP_INQ_HANDLE,ByVal IfId As RPC_IF_ID PTR,ByVal Binding As RPC_BINDING_HANDLE PTR,ByVal ObjectUuid As UUID PTR,ByVal Annotation As ubyte PTR PTR) As RPC_STATUS
RpcMgmtInqParameter(ByVal As uinteger,ByVal As uinteger PTR) As RPC_STATUS
RpcMgmtSetParameter(ByVal As uinteger,ByVal As uinteger) As RPC_STATUS
RpcMgmtInqServerPrincName(ByVal Binding As RPC_BINDING_HANDLE,ByVal AuthnSvc As uinteger,ByVal ServerPrincName As ubyte PTR PTR) As RPC_STATUS
RpcMgmtStatsVectorFree(ByVal StatsVector As RPC_STATS_VECTOR PTR PTR) As RPC_STATUS
RpcNsBindingLookupDone(ByVal LookupContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsBindingLookupBegin(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR,ByVal IfSpec As RPC_IF_HANDLE,ByVal ObjUuid As UUID PTR,ByVal BindingMaxCount As uinteger,ByVal LookupContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsBindingLookupNext(ByVal LookupContext As RPC_NS_HANDLE,ByVal BindingVec As RPC_BINDING_VECTOR PTR PTR) As RPC_STATUS
RpcNsMgmtEntryCreate(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR) As RPC_STATUS
RpcNsEntryObjectInqBegin(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR,ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsProfileEltInqBegin(ByVal ProfileNameSyntax As uinteger,ByVal ProfileName As ubyte PTR,ByVal ByValquiryType As uinteger,ByVal IfId As RPC_IF_ID PTR,ByVal VersOption As uinteger,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ubyte PTR,ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsMgmtEntryInqIfIds(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort,ByVal IfIdVec As RPC_IF_ID_VECTOR PTR PTR) As RPC_STATUS
RpcNetworkInqProtseqs(ByVal ProtseqVector As RPC_PROTSEQ_VECTORA PTR PTR) As RPC_STATUS
RpcNsMgmtEntryInqIfIds(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR,ByVal IfIdVec As RPC_IF_ID_VECTOR PTR PTR) As RPC_STATUS
RpcNsMgmtEntryDelete(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR) As RPC_STATUS
RpcNetworkIsProtseqValid(ByVal Protseq As ubyte PTR) As RPC_STATUS
RpcNsBindingImportBegin(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR,ByVal IfSpec As RPC_IF_HANDLE,ByVal ObjUuid As UUID PTR,ByVal ImportContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsMgmtBindingUnexport(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR,ByVal IfId As RPC_IF_ID PTR,ByVal VersOption As uinteger,ByVal ObjectUuidVec As UUID_VECTOR PTR) As RPC_STATUS
RpcNsEntryExpandName(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR,ByVal ExpandedName As ushort PTR PTR) As RPC_STATUS
RpcNsBindingImportBegin(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR,ByVal IfSpec As RPC_IF_HANDLE,ByVal ObjUuid As UUID PTR,ByVal ImportContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsEntryObjectInqBegin(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR,ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsBindingExport(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR,ByVal IfSpec As RPC_IF_HANDLE,ByVal BindingVec As RPC_BINDING_VECTOR PTR,ByVal ObjectUuidVec As UUID_VECTOR PTR) As RPC_STATUS
RpcNsBindingInqEntryName(ByVal Binding As RPC_BINDING_HANDLE,ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR PTR) As RPC_STATUS
RpcNsProfileEltInqNext(ByVal ByValquiryContext As RPC_NS_HANDLE,ByVal IfId As RPC_IF_ID PTR,ByVal MemberName As ushort PTR PTR,ByVal Priority As uinteger PTR,ByVal Annotation As ushort PTR PTR) As RPC_STATUS
RpcNsBindingUnexport(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR,ByVal IfSpec As RPC_IF_HANDLE,ByVal ObjectUuidVec As UUID_VECTOR PTR) As RPC_STATUS
RpcNsGroupMbrInqDone(ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsGroupDelete(ByVal GroupNameSyntax As uinteger,ByVal GroupName As ubyte PTR) As RPC_STATUS
RpcNsGroupMbrAdd(ByVal GroupNameSyntax As uinteger,ByVal GroupName As ubyte PTR,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ubyte PTR) As RPC_STATUS
RpcNsProfileEltInqBegin(ByVal ProfileNameSyntax As uinteger,ByVal ProfileName As ushort PTR,ByVal ByValquiryType As uinteger,ByVal IfId As RPC_IF_ID PTR,ByVal VersOption As uinteger,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ushort PTR,ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsProfileEltRemove(ByVal ProfileNameSyntax As uinteger,ByVal ProfileName As ushort PTR,ByVal IfId As RPC_IF_ID PTR,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ushort PTR) As RPC_STATUS
RpcNsMgmtEntryCreate(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR) As RPC_STATUS
RpcNsProfileEltAdd(ByVal ProfileNameSyntax As uinteger,ByVal ProfileName As ushort PTR,ByVal IfId As RPC_IF_ID PTR,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ushort PTR,ByVal Priority As uinteger,ByVal Annotation As ushort PTR) As RPC_STATUS
RpcNsProfileDelete(ByVal ProfileNameSyntax As uinteger,ByVal ProfileName As ushort PTR) As RPC_STATUS
RpcNsMgmtBindingUnexport(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR,ByVal IfId As RPC_IF_ID PTR,ByVal VersOption As uinteger,ByVal ObjectUuidVec As UUID_VECTOR PTR) As RPC_STATUS
RpcNsEntryExpandName(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR,ByVal ExpandedName As ubyte PTR PTR) As RPC_STATUS
RpcNsProfileEltInqNext(ByVal ByValquiryContext As RPC_NS_HANDLE,ByVal IfId As RPC_IF_ID PTR,ByVal MemberName As ubyte PTR PTR,ByVal Priority As uinteger PTR,ByVal Annotation As ubyte PTR PTR) As RPC_STATUS
RpcNsGroupMbrInqNext(ByVal ByValquiryContext As RPC_NS_HANDLE,ByVal MemberName As ushort PTR PTR) As RPC_STATUS
RpcNsGroupMbrRemove(ByVal GroupNameSyntax As uinteger,ByVal GroupName As ubyte PTR,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ubyte PTR) As RPC_STATUS
RpcNsGroupMbrInqBegin(ByVal GroupNameSyntax As uinteger,ByVal GroupName As ubyte PTR,ByVal MemberNameSyntax As uinteger,ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsGroupMbrInqNext(ByVal ByValquiryContext As RPC_NS_HANDLE,ByVal MemberName As ubyte PTR PTR) As RPC_STATUS
RpcNetworkIsProtseqValid(ByVal Protseq As ushort PTR) As RPC_STATUS
RpcNsGroupMbrInqBegin(ByVal GroupNameSyntax As uinteger,ByVal GroupName As ushort PTR,ByVal MemberNameSyntax As uinteger,ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsGroupMbrRemove(ByVal GroupNameSyntax As uinteger,ByVal GroupName As ushort PTR,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ushort PTR) As RPC_STATUS
RpcNsGroupMbrAdd(ByVal GroupNameSyntax As uinteger,ByVal GroupName As ushort PTR,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ushort PTR) As RPC_STATUS
RpcNsGroupDelete(ByVal GroupNameSyntax As uinteger,ByVal GroupName As ushort PTR) As RPC_STATUS
RpcNetworkInqProtseqs(ByVal ProtseqVector As RPC_PROTSEQ_VECTORW PTR PTR) As RPC_STATUS
RpcNsBindingLookupBegin(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR,ByVal IfSpec As RPC_IF_HANDLE,ByVal ObjUuid As UUID PTR,ByVal BindingMaxCount As uinteger,ByVal LookupContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsProfileDelete(ByVal ProfileNameSyntax As uinteger,ByVal ProfileName As ubyte PTR) As RPC_STATUS
RpcNsProfileEltRemove(ByVal ProfileNameSyntax As uinteger,ByVal ProfileName As ubyte PTR,ByVal IfId As RPC_IF_ID PTR,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ubyte PTR) As RPC_STATUS
RpcNsProfileEltAdd(ByVal ProfileNameSyntax As uinteger,ByVal ProfileName As ubyte PTR,ByVal IfId As RPC_IF_ID PTR,ByVal MemberNameSyntax As uinteger,ByVal MemberName As ubyte PTR,ByVal Priority As uinteger,ByVal Annotation As ubyte PTR) As RPC_STATUS
RpcNsBindingInqEntryName(ByVal Binding As RPC_BINDING_HANDLE,ByVal EntryNameSyntax As uinteger,ByVal EntryName As ubyte PTR PTR) As RPC_STATUS
RpcNsMgmtEntryDelete(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR) As RPC_STATUS
RpcNsBindingUnexport(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR,ByVal IfSpec As RPC_IF_HANDLE,ByVal ObjectUuidVec As UUID_VECTOR PTR) As RPC_STATUS
RpcNsBindingExport(ByVal EntryNameSyntax As uinteger,ByVal EntryName As ushort PTR,ByVal IfSpec As RPC_IF_HANDLE,ByVal BindingVec As RPC_BINDING_VECTOR PTR,ByVal ObjectUuidVec As UUID_VECTOR PTR) As RPC_STATUS
RpcNsBindingSelect(ByVal BindingVec As RPC_BINDING_VECTOR PTR,ByVal Binding As RPC_BINDING_HANDLE PTR) As RPC_STATUS
RpcNsBindingImportDone(ByVal ImportContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsBindingImportNext(ByVal ImportContext As RPC_NS_HANDLE,ByVal Binding As RPC_BINDING_HANDLE PTR) As RPC_STATUS
RpcNsMgmtSetExpAge(ByVal ExpirationAge As uinteger) As RPC_STATUS
RpcNsMgmtInqExpAge(ByVal ExpirationAge As uinteger PTR) As RPC_STATUS
RpcNsMgmtHandleSetExpAge(ByVal NsHandle As RPC_NS_HANDLE,ByVal ExpirationAge As uinteger) As RPC_STATUS
RpcNsEntryObjectInqDone(ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcNsEntryObjectInqNext(ByVal ByValquiryContext As RPC_NS_HANDLE,ByVal ObjUuid As UUID PTR) As RPC_STATUS
RpcNsProfileEltInqDone(ByVal ByRefquiryContext As RPC_NS_HANDLE PTR) As RPC_STATUS
RpcObjectSetType(ByVal ObjUuid As UUID PTR,ByVal TypeUuid As UUID PTR) As RPC_STATUS
RpcObjectSetInqFn(ByVal ByValquiryFn As RPC_OBJECT_INQ_FN PTR) As RPC_STATUS
RpcObjectInqType(ByVal ObjUuid As UUID PTR,ByVal TypeUuid As UUID PTR) As RPC_STATUS
RpcProtseqVectorFree(ByVal ProtseqVector As RPC_PROTSEQ_VECTORW PTR PTR) As RPC_STATUS
RpcProtseqVectorFree(ByVal ProtseqVector As RPC_PROTSEQ_VECTORA PTR PTR) As RPC_STATUS
RpcRaiseException(ByVal exception As RPC_STATUS) 
RpcRevertToSelf() As RPC_STATUS
RpcServerUseProtseqEx(ByVal Protseq As ushort PTR,ByVal MaxCalls As uinteger,ByVal SecurityDescriptor As any PTR,ByVal Policy As PRPC_POLICY) As RPC_STATUS
RpcServerUseProtseqEp(ByVal Protseq As ushort PTR,ByVal MaxCalls As uinteger,ByVal Endpoint As ushort PTR,ByVal SecurityDescriptor As any PTR) As RPC_STATUS
RpcServerUseProtseqIfEx(ByVal Protseq As ushort PTR,ByVal MaxCalls As uinteger,ByVal IfSpec As RPC_IF_HANDLE,ByVal SecurityDescriptor As any PTR,ByVal Policy As PRPC_POLICY) As RPC_STATUS
RpcSmDestroyClientContext(ByVal ContextHandle As any PTR PTR) As RPC_STATUS
RpcSmClientFree(ByVal pNodeToFree As any PTR) As RPC_STATUS
RpcSmAllocate(ByVal Size As uinteger,ByVal pStatus As RPC_STATUS PTR) As any PTR
RpcSsGetThreadHandle() As RPC_SS_THREAD_HANDLE
RpcSsAllocate(ByVal Size As uinteger) As any PTR
RpcServerListen(ByVal MinimumCallThreads As uinteger,ByVal MaxCalls As uinteger,ByVal DontWait As uinteger) As RPC_STATUS
RpcServerInqIf(ByVal IfSpec As RPC_IF_HANDLE,ByVal MgrTypeUuid As UUID PTR,ByVal MgrEpv As any PTR PTR) As RPC_STATUS
RpcSmDisableAllocate() As RPC_STATUS
RpcSmEnableAllocate() As RPC_STATUS
RpcSmFree(ByVal NodeToFree As any PTR) As RPC_STATUS
RpcSsDisableAllocate() 
RpcSsEnableAllocate() 
RpcSsFree(ByVal NodeToFree As any PTR) 
RpcSsSetClientAllocFree(ByVal ClientAlloc As RPC_CLIENT_ALLOC PTR,ByVal ClientFree As RPC_CLIENT_FREE PTR) 
RpcSsSetThreadHandle(ByVal Id As RPC_SS_THREAD_HANDLE) 
RpcServerInqDefaultPrincName(ByVal AuthnSvc As uinteger,ByVal PrincName As ushort PTR PTR) As RPC_STATUS
RpcStringBindingCompose(ByVal ObjUuid As ubyte PTR,ByVal Protseq As ubyte PTR,ByVal NetworkAddr As ubyte PTR,ByVal Endpoint As ubyte PTR,ByVal Options As ubyte PTR,ByVal StringBinding As ubyte PTR PTR) As RPC_STATUS
RpcServerRegisterAuthInfo(ByVal ServerPrincName As ubyte PTR,ByVal AuthnSvc As uinteger,ByVal GetKeyFn As RPC_AUTH_KEY_RETRIEVAL_FN,ByVal Arg As any PTR) As RPC_STATUS
RpcSmGetThreadHandle(ByVal pStatus As RPC_STATUS PTR) As RPC_SS_THREAD_HANDLE
RpcServerUseProtseqIf(ByVal Protseq As ushort PTR,ByVal MaxCalls As uinteger,ByVal IfSpec As RPC_IF_HANDLE,ByVal SecurityDescriptor As any PTR) As RPC_STATUS
RpcServerUseProtseqEpEx(ByVal Protseq As ushort PTR,ByVal MaxCalls As uinteger,ByVal Endpoint As ushort PTR,ByVal SecurityDescriptor As any PTR,ByVal Policy As PRPC_POLICY) As RPC_STATUS
RpcSmSwapClientAllocFree(ByVal ClientAlloc As RPC_CLIENT_ALLOC PTR,ByVal ClientFree As RPC_CLIENT_FREE PTR,ByVal OldClientAlloc As RPC_CLIENT_ALLOC PTR PTR,ByVal OldClientFree As RPC_CLIENT_FREE PTR PTR) As RPC_STATUS
RpcServerUseAllProtseqsIf(ByVal MaxCalls As uinteger,ByVal IfSpec As RPC_IF_HANDLE,ByVal SecurityDescriptor As any PTR) As RPC_STATUS
RpcSsSwapClientAllocFree(ByVal ClientAlloc As RPC_CLIENT_ALLOC PTR,ByVal ClientFree As RPC_CLIENT_FREE PTR,ByVal OldClientAlloc As RPC_CLIENT_ALLOC PTR PTR,ByVal OldClientFree As RPC_CLIENT_FREE PTR PTR) 
RpcServerInqDefaultPrincName(ByVal AuthnSvc As uinteger,ByVal PrincName As ubyte PTR PTR) As RPC_STATUS
RpcServerUseProtseqIfEx(ByVal Protseq As ubyte PTR,ByVal MaxCalls As uinteger,ByVal IfSpec As RPC_IF_HANDLE,ByVal SecurityDescriptor As any PTR,ByVal Policy As PRPC_POLICY) As RPC_STATUS
RpcServerUseProtseqIf(ByVal Protseq As ubyte PTR,ByVal MaxCalls As uinteger,ByVal IfSpec As RPC_IF_HANDLE,ByVal SecurityDescriptor As any PTR) As RPC_STATUS
RpcSmSetClientAllocFree(ByVal ClientAlloc As RPC_CLIENT_ALLOC PTR,ByVal ClientFree As RPC_CLIENT_FREE PTR) As RPC_STATUS
RpcSsDontSerializeContext() 
RpcServerRegisterAuthInfo(ByVal ServerPrincName As ushort PTR,ByVal AuthnSvc As uinteger,ByVal GetKeyFn As RPC_AUTH_KEY_RETRIEVAL_FN,ByVal Arg As any PTR) As RPC_STATUS
RpcServerUseProtseqEpEx(ByVal Protseq As ubyte PTR,ByVal MaxCalls As uinteger,ByVal Endpoint As ubyte PTR,ByVal SecurityDescriptor As any PTR,ByVal Policy As PRPC_POLICY) As RPC_STATUS
RpcServerUseProtseqEp(ByVal Protseq As ubyte PTR,ByVal MaxCalls As uinteger,ByVal Endpoint As ubyte PTR,ByVal SecurityDescriptor As any PTR) As RPC_STATUS
RpcServerUseProtseqEx(ByVal Protseq As ubyte PTR,ByVal MaxCalls As uinteger,ByVal SecurityDescriptor As any PTR,ByVal Policy As PRPC_POLICY) As RPC_STATUS
RpcServerUseProtseq(ByVal Protseq As ubyte PTR,ByVal MaxCalls As uinteger,ByVal SecurityDescriptor As any PTR) As RPC_STATUS
RpcSmSetThreadHandle(ByVal Id As RPC_SS_THREAD_HANDLE) As RPC_STATUS
RpcStringFree(ByVal sString As ubyte PTR PTR) As RPC_STATUS
RpcSsDestroyClientContext(ByVal ContextHandle As any PTR PTR) 
RpcServerUseAllProtseqsEx(ByVal MaxCalls As uinteger,ByVal SecurityDescriptor As any PTR,ByVal Policy As PRPC_POLICY) As RPC_STATUS
RpcServerUseAllProtseqs(ByVal MaxCalls As uinteger,ByVal SecurityDescriptor As any PTR) As RPC_STATUS
RpcServerUnregisterIf(ByVal IfSpec As RPC_IF_HANDLE,ByVal MgrTypeUuid As UUID PTR,ByVal WaitForCallsToComplete As uinteger) As RPC_STATUS
RpcStringBindingCompose(ByVal ObjUuid As ushort PTR,ByVal Protseq As ushort PTR,ByVal NetworkAddr As ushort PTR,ByVal Endpoint As ushort PTR,ByVal Options As ushort PTR,ByVal StringBinding As ushort PTR PTR) As RPC_STATUS
RpcServerRegisterIfEx(ByVal IfSpec As RPC_IF_HANDLE,ByVal MgrTypeUuid As UUID PTR,ByVal MgrEpv As any PTR,ByVal Flags As uinteger,ByVal MaxCalls As uinteger,ByVal IfCallback As RPC_IF_CALLBACK_FN PTR) As RPC_STATUS
RpcServerUseAllProtseqsIfEx(ByVal MaxCalls As uinteger,ByVal IfSpec As RPC_IF_HANDLE,ByVal SecurityDescriptor As any PTR,ByVal Policy As PRPC_POLICY) As RPC_STATUS
RpcStringBindingParse(ByVal StringBinding As ubyte PTR,ByVal ObjUuid As ubyte PTR PTR,ByVal Protseq As ubyte PTR PTR,ByVal NetworkAddr As ubyte PTR PTR,ByVal Endpoint As ubyte PTR PTR,ByVal NetworkOptions As ubyte PTR PTR) As RPC_STATUS
RpcServerRegisterIf(ByVal IfSpec As RPC_IF_HANDLE,ByVal MgrTypeUuid As UUID PTR,ByVal MgrEpv As any PTR) As RPC_STATUS
RpcStringBindingParse(ByVal StringBinding As ushort PTR,ByVal ObjUuid As ushort PTR PTR,ByVal Protseq As ushort PTR PTR,ByVal NetworkAddr As ushort PTR PTR,ByVal Endpoint As ushort PTR PTR,ByVal NetworkOptions As ushort PTR PTR) As RPC_STATUS
RpcStringFree(ByVal sString As ushort PTR PTR) As RPC_STATUS
RpcServerUseProtseq(ByVal Protseq As ushort PTR,ByVal MaxCalls As uinteger,ByVal SecurityDescriptor As any PTR) As RPC_STATUS
RpcTestCancel() As RPC_STATUS
SafeArrayAllocDescriptorEx(ByVal vt As VARTYPE,ByVal cDims As UINT,ByVal ppsaOut As SAFEARRAY PTR PTR) As HRESULT
SafeArrayRedim(ByVal psa As SAFEARRAY PTR,ByVal psaboundNew As SAFEARRAYBOUND PTR) As HRESULT
SafeArrayCreateVectorEx(ByVal vt As VARTYPE,ByVal lLbound As LONG,ByVal cElements As ULONG,ByVal pvExtra As LPVOID) As SAFEARRAY PTR
SafeArrayAllocData(ByVal psa As SAFEARRAY PTR) As HRESULT
SafeArrayCreate(ByVal vt As VARTYPE,ByVal cDims As uinteger,ByVal rgsabound As SAFEARRAYBOUND PTR) As SAFEARRAY PTR
SafeArrayDestroyDescriptor(ByVal psa As SAFEARRAY PTR) As HRESULT
SafeArrayDestroyData(ByVal psa As SAFEARRAY PTR) As HRESULT
SafeArrayDestroy(ByVal psa As SAFEARRAY PTR) As HRESULT
SafeArrayCreateVector(ByVal vt As VARTYPE,ByVal lLbound As LONG,ByVal cElements As ULONG) As SAFEARRAY PTR
SafeArrayGetDim(ByVal psa As SAFEARRAY PTR) As uinteger
SafeArrayGetElemsize(ByVal psa As SAFEARRAY PTR) As uinteger
SafeArrayAllocDescriptor(ByVal cDims As uinteger,ByVal ppsaOut As SAFEARRAY PTR PTR) As HRESULT
SafeArrayGetLBound(ByVal psa As SAFEARRAY PTR,ByVal nDim As uinteger,ByVal plLbound As Integer PTR) As HRESULT
SafeArrayLock(ByVal psa As SAFEARRAY PTR) As HRESULT
SafeArrayUnlock(ByVal psa As SAFEARRAY PTR) As HRESULT
SafeArrayAccessData(ByVal psa As SAFEARRAY PTR,ByVal ppvData As any PTR PTR) As HRESULT
SafeArrayUnaccessData(ByVal psa As SAFEARRAY PTR) As HRESULT
SafeArrayGetElement(ByVal psa As SAFEARRAY PTR,ByVal rgIndices As Integer PTR,ByVal pv As any PTR) As HRESULT
SafeArrayPutElement(ByVal psa As SAFEARRAY PTR,ByVal rgIndices As Integer PTR,ByVal pv As any PTR) As HRESULT
SafeArrayCopy(ByVal psa As SAFEARRAY PTR,ByVal ppsaOut As SAFEARRAY PTR PTR) As HRESULT
SafeArrayGetIID(ByVal psa As SAFEARRAY PTR,ByVal pguid As GUID PTR) As HRESULT
SafeArrayGetUBound(ByVal psa As SAFEARRAY PTR,ByVal nDim As uinteger,ByVal plUbound As Integer PTR) As HRESULT
SafeArraySetIID(ByVal psa As SAFEARRAY PTR,ByVal guid As GUID PTR) As HRESULT
SafeArrayGetRecordInfo(ByVal psa As SAFEARRAY PTR,ByVal prinfo As IRecordInfo PTR PTR) As HRESULT
SafeArraySetRecordInfo(ByVal psa As SAFEARRAY PTR,ByVal prinfo As IRecordInfo PTR) As HRESULT
SafeArrayGetVartype(ByVal psa As SAFEARRAY PTR,ByVal pvt As VARTYPE PTR) As HRESULT
SafeArrayPtrOfIndex(ByVal psa As SAFEARRAY PTR,ByVal rgIndices As Integer PTR,ByVal ppvData As any PTR PTR) As HRESULT
SaveDC(ByVal hdc As HDC) As Integer
ScaleWindowExtEx(ByVal hdc As HDC,ByVal nXnum As Integer,ByVal nXdenom As Integer,ByVal nYnum As Integer,ByVal nYdenom As Integer,ByVal lpSize As LPSIZE) As BOOL
ScaleViewportExtEx(ByVal hdc As HDC,ByVal nXnum As Integer,ByVal nXdenom As Integer,ByVal nYnum As Integer,ByVal nYdenom As Integer,ByVal lpSize As LPSIZE) As BOOL
ScheduleJob(ByVal hPrinter As HANDLE,ByVal JobId As DWORD) As BOOL
ScreenSaverChangePassword(ByVal As HWND) 
ScreenSaverConfigureDialog(ByVal As HWND,ByVal As UINT,ByVal As WPARAM,ByVal As LPARAM) As BOOL
ScreenSaverProc(ByVal As HWND,ByVal As UINT,ByVal As WPARAM,ByVal As LPARAM) As LONG
ScreenToClient(ByVal hwnd As HWND,ByVal lpPoint As LPPOINT) As BOOL
ScrollDC(ByVal hdc As HDC,ByVal dx As Integer,ByVal dy As Integer,ByVal lprcScroll As LPCRECT,ByVal lprcClip As LPCRECT,ByVal hrgnUpdate As HRGN,ByVal lprcUpdate As LPRECT) As BOOL
ScrollWindow(ByVal hWnd As HWND,ByVal XAmount As Integer,ByVal YAmount As Integer,ByVal lpRect As LPCRECT,ByVal lpClipRect As LPCRECT) As BOOL
ScrollConsoleScreenBuffer(ByVal hConsoleOutput As HANDLE,ByVal lpScrollRectangle As SMALL_RECT PTR,ByVal lpClipRectangle As SMALL_RECT PTR,ByVal dwDestinationOrigin As COORD,ByVal lpFill As CHAR_INFO PTR) As BOOL
ScrollWindowEx(ByVal hwnd As HWND,ByVal dx As Integer,ByVal dy As Integer,ByVal lprcScroll As LPCRECT,ByVal lprcClip As LPCRECT,ByVal hrgnUpdate As HRGN,ByVal lprcUpdate As LPRECT,ByVal fuScroll As UINT) As Integer
SearchTreeForFile(ByVal RootPath As LPSTR,ByVal ByValputPathName As LPSTR,ByVal ByValputPathBuffer As LPSTR) As BOOL
SearchPath(ByVal lpPath As LPCSTR,ByVal lpFileName As LPCSTR,ByVal lpExtension As LPCSTR,ByVal nBufferLength As DWORD,ByVal lpBuffer As LPSTR,ByVal lpFilePart As LPSTR PTR) As DWORD
SearchPath(ByVal lpPath As LPCWSTR,ByVal lpFileName As LPCWSTR,ByVal lpExtension As LPCWSTR,ByVal nBufferLength As DWORD,ByVal lpBuffer As LPWSTR,ByVal lpFilePart As LPWSTR PTR) As DWORD
SelectClipRgn(ByVal hdc As HDC,ByVal hRgn As HRGN) As Integer
SelectObject(ByVal hdc As HDC,ByVal hObject As HGDIOBJ) As HGDIOBJ
SelectPalette(ByVal hdc As HDC,ByVal hPalette As HPALETTE,ByVal bForceBackground As BOOL) As HPALETTE
SelectClipPath(ByVal hdc As HDC,ByVal iMode As Integer) As BOOL
select_(ByVal nfds As Integer,ByVal As fd_set PTR,ByVal As fd_set PTR,ByVal As fd_set PTR,ByVal As timeval PTR) As Integer
SendInput(ByVal cInputs As UINT,ByVal pInputs As LPINPUT,ByVal cbSize As Integer) As UINT
SendMessageCallback(ByVal hwnd As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM,ByVal lpResultCallBack As SENDASYNCPROC,ByVal dwData As DWORD) As BOOL
SendNotifyMessage(ByVal hwnd As HWND,ByVal msg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As BOOL
SendDlgItemMessage(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LONG
SendARP(ByVal DestIP As IPAddr,ByVal SrcIP As IPAddr,ByVal pMacAddr As PULONG,ByVal PhyAddrLen As PULONG) As DWORD
SendMessageTimeout(ByVal hwnd As HWND,ByVal msg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM,ByVal fuFlags As UINT,ByVal uTimeout As UINT,ByVal lpdwResult As PDWORD) As LRESULT
SendDlgItemMessage(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LONG
SendMessage(ByVal hwnd As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
SendDriverMessage(ByVal hDriver As HDRVR,ByVal message As UINT,ByVal lParam1 As LONG,ByVal lParam2 As LONG) As LRESULT
SendMessage(ByVal hwnd As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As LRESULT
SendMessageTimeout(ByVal hwnd As HWND,ByVal msg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM,ByVal fuFlags As UINT,ByVal uTimeout As UINT,ByVal lpdwResult As PDWORD) As LRESULT
SendMessageCallback(ByVal hwnd As HWND,ByVal wMsg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM,ByVal lpResultCallBack As SENDASYNCPROC,ByVal dwData As DWORD) As BOOL
SendNotifyMessage(ByVal hwnd As HWND,ByVal msg As UINT,ByVal wParam As WPARAM,ByVal lParam As LPARAM) As BOOL
send(ByVal s As SOCKET,ByVal buf As zstring PTR,ByVal lLen As Integer,ByVal flags As Integer) As Integer
sendto(ByVal s As SOCKET,ByVal buf As zstring PTR,ByVal lLen As Integer,ByVal flags As Integer,ByVal to As sockaddr PTR,ByVal tolen As Integer) As Integer
SetActivePwrScheme(ByVal As UINT,ByVal As PGLOBAL_POWER_POLICY,ByVal As PPOWER_POLICY) As BOOLEAN
SetAclInformation(ByVal pAcl As PACL,ByVal pAclInformation As PVOID,ByVal nAclInformationLength As DWORD,ByVal dwAclInformationClass As ACL_INFORMATION_CLASS) As BOOL
SetArcDirection(ByVal hdc As HDC,ByVal ArcDirection As Integer) As Integer
SetAbortProc(ByVal hDC As HDC,ByVal lpAbortProc As ABORTPROC) As Integer
SetActiveWindow(ByVal hwnd As HWND) As HWND
SetBitmapBits(ByVal hBitmap As HBITMAP,ByVal dwCount As DWORD,ByVal lpBits As PCVOID) As LONG
SetBitmapDimensionEx(ByVal hbm As HBITMAP,ByVal nX As Integer,ByVal nY As Integer,ByVal lpSize As LPSIZE) As BOOL
SetBkMode(ByVal hdc As HDC,ByVal nBkMode As Integer) As Integer
SetBkColor(ByVal hdc As HDC,ByVal crColor As COLORREF) As COLORREF
SetBoundsRect(ByVal hdc As HDC,ByVal lprcBounds As LPCRECT,ByVal flags As UINT) As UINT
SetBrushOrgEx(ByVal hdc As HDC,ByVal nXOrg As Integer,ByVal nYOrg As Integer,ByVal lppt As LPPOINT) As BOOL
SetCursorPos(ByVal x As Integer,ByVal y As Integer) As BOOL
SetCapture(ByVal hWnd As HWND) As HWND
SetColorAdjustment(ByVal hdc As HDC,ByVal lpca As COLORADJUSTMENT PTR) As BOOL
SetCriticalSectionSpinCount(ByVal lpCriticalSection As LPCRITICAL_SECTION,ByVal dwSpinCount As DWORD) As DWORD
SetConsoleTitle(ByVal lpConsoleTitle As LPCSTR) As BOOL
SetCommBreak(ByVal nCid As HANDLE) As BOOL
SetComputerName(ByVal lpComputerName As LPCSTR) As BOOL
SetConvertStg(ByVal pStg As LPSTORAGE,ByVal fConvert As BOOL) As HRESULT
SetColorSpace(ByVal hdc As HDC,ByVal hcolorspace As HCOLORSPACE) As BOOL
SetCommMask(ByVal hFile As HANDLE,ByVal dwEvtMask As DWORD) As BOOL
SetCommConfig(ByVal hCommDev As HANDLE,ByVal lpCC As LPCOMMCONFIG,ByVal dwSize As DWORD) As BOOL
SetComputerNameEx(ByVal NameType As COMPUTER_NAME_FORMAT,ByVal lpBuffer As LPCSTR) As BOOL
SetCurrentDirectory(ByVal lpPathName As LPCSTR) As BOOL
SetConsoleWindowInfo(ByVal hConsoleOutput As HANDLE,ByVal bAbsolute As BOOL,ByVal lpConsoleWindow As SMALL_RECT PTR) As BOOL
SetConsoleTextAttribute(ByVal hConsoleOutput As HANDLE,ByVal wAttributes As WORD) As BOOL
SetConsoleScreenBufferSize(ByVal hConsoleOutput As HANDLE,ByVal dwSize As COORD) As BOOL
SetConsoleOutputCP(ByVal wCodePageID As UINT) As BOOL
SetConsoleTitle(ByVal lpConsoleTitle As LPCWSTR) As BOOL
SetClassLong(ByVal hwnd As HWND,ByVal nIndex As Integer,ByVal dwNewLong As LONG) As DWORD
SetComputerName(ByVal lpComputerName As LPCWSTR) As BOOL
SetCurrentDirectory(ByVal lpPathName As LPCWSTR) As BOOL
SetConsoleMode(ByVal hConsoleHandle As HANDLE,ByVal dwMode As DWORD) As BOOL
SetCaretBlinkTime(ByVal wMSeconds As UINT) As BOOL
SetConsoleDisplayMode(ByVal As HANDLE,ByVal As DWORD,ByVal As COORD PTR) As BOOL
SetConsoleCursorPosition(ByVal hConsoleOutput As HANDLE,ByVal dwCursorPosition As COORD) As BOOL
SetConsoleCursorInfo(ByVal hConsoleOutput As HANDLE,ByVal lpConsoleCursorInfo As CONSOLE_CURSOR_INFO PTR) As BOOL
SetConsoleCtrlHandler(ByVal HandlerRoutine As PHANDLER_ROUTINE,ByVal Add As BOOL) As BOOL
SetConsoleCP(ByVal wCodePageID As UINT) As BOOL
SetConsoleActiveScreenBuffer(ByVal hConsoleOutput As HANDLE) As BOOL
SetCaretPos(ByVal x As Integer,ByVal y As Integer) As BOOL
SetClassLong(ByVal hwnd As HWND,ByVal nIndex As Integer,ByVal dwNewLong As LONG) As DWORD
SetCommState(ByVal hCommDev As HANDLE,ByVal lpDCB As LPDCB) As BOOL
SetClassWord(ByVal hwnd As HWND,ByVal nIndex As Integer,ByVal wNewWord As WORD) As WORD
SetClipboardData(ByVal uFormat As UINT,ByVal hMem As HANDLE) As HANDLE
SetClipboardViewer(ByVal hwnd As HWND) As HWND
SetCommTimeouts(ByVal hFile As HANDLE,ByVal lpCommTimeouts As LPCOMMTIMEOUTS) As BOOL
SetCursor(ByVal hCursor As HCURSOR) As HCURSOR
SetComputerNameEx(ByVal NameType As COMPUTER_NAME_FORMAT,ByVal lpBuffer As LPCWSTR) As BOOL
SetDeviceGammaRamp(ByVal hdc As HDC,ByVal lpv As PVOID) As BOOL
SetDIBitsToDevice(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal dx As DWORD,ByVal dy As DWORD,ByVal SrcX As Integer,ByVal SrcY As Integer,ByVal Scan As UINT,ByVal NumScans As UINT,ByVal Bits As PCVOID,ByVal BitsInfo As BITMAPINFO PTR,ByVal wUsage As UINT) As Integer
SetDIBits(ByVal hdc As HDC,ByVal hBitmap As HBITMAP,ByVal nStartScan As UINT,ByVal nNumScans As UINT,ByVal lpBits As PCVOID,ByVal lpBI As BITMAPINFO PTR,ByVal wUsage As UINT) As Integer
SetDebugErrorLevel(ByVal dwLevel As DWORD) 
SetDlgItemText(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer,ByVal lpString As LPCWSTR) As BOOL
SetDefaultCommConfig(ByVal lpszName As LPCWSTR,ByVal lpCC As LPCOMMCONFIG,ByVal dwSize As DWORD) As BOOL
SetDlgItemInt(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer,ByVal wValue As UINT,ByVal bSigned As BOOL) As BOOL
SetDoubleClickTime(ByVal wCount As UINT) As BOOL
SetDefaultCommConfig(ByVal lpszName As LPCSTR,ByVal lpCC As LPCOMMCONFIG,ByVal dwSize As DWORD) As BOOL
SetDllDirectory(ByVal As LPCSTR) As BOOL
SetDllDirectory(ByVal As LPCWSTR) As BOOL
SetDCBrushColor(ByVal hdc As HDC,ByVal colorref As COLORREF) As COLORREF
SetDCPenColor(ByVal hdc As HDC,ByVal colorref As COLORREF) As COLORREF
SetDIBColorTable(ByVal hDC As HDC,ByVal un1 As UINT,ByVal un2 As UINT,ByVal pcRGBQuad As RGBQUAD PTR) As UINT
SetDlgItemText(ByVal hDlg As HWND,ByVal nIDDlgItem As Integer,ByVal lpString As LPCSTR) As BOOL
SetEndOfFile(ByVal hFile As HANDLE) As BOOL
SetEnhMetaFileBits(ByVal cbBuffer As UINT,ByVal lpData As BYTE PTR) As HENHMETAFILE
SetEntriesInAcl(ByVal cCountOfExplicitEntries As ULONG,ByVal pListOfExplicitEntries As PEXPLICIT_ACCESS_W,ByVal OldAcl As PACL,ByVal NewAcl As PACL PTR) As DWORD
SetEntriesInAcl(ByVal cCountOfExplicitEntries As ULONG,ByVal pListOfExplicitEntries As PEXPLICIT_ACCESS_A,ByVal OldAcl As PACL,ByVal NewAcl As PACL PTR) As DWORD
SetEnvironmentVariable(ByVal lpName As LPCWSTR,ByVal lpValue As LPCWSTR) As BOOL
SetEvent(ByVal hEvent As HANDLE) As BOOL
SetErrorInfo(ByVal dwReserved As uinteger,ByVal perrinfo As LPERRORINFO) As HRESULT
SetErrorMode(ByVal wMode As UINT) As UINT
SetEnvironmentVariable(ByVal lpName As LPCSTR,ByVal lpValue As LPCSTR) As BOOL
SetFileSecurity(ByVal lpFileName As LPCSTR,ByVal SecurityInformation As SECURITY_INFORMATION,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR) As BOOL
SetFocus(ByVal hwnd As HWND) As HWND
SetFileShortName(ByVal As HANDLE,ByVal As LPCWSTR) As BOOL
SetFileShortName(ByVal As HANDLE,ByVal As LPCSTR) As BOOL
SetFileAttributes(ByVal lpFileName As LPCSTR,ByVal dwFileAttributes As DWORD) As BOOL
SetFileValidData(ByVal As HANDLE,ByVal As LONGLONG) As BOOL
SetFirmwareEnvironmentVariable(ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As PVOID,ByVal As DWORD) As BOOL
SetFileTime(ByVal hFile As HANDLE,ByVal lpCreationTime As FILETIME PTR,ByVal lpLastAccessTime As FILETIME PTR,ByVal lpLastWriteTime As FILETIME PTR) As BOOL
SetFirmwareEnvironmentVariable(ByVal As LPCSTR,ByVal As LPCSTR,ByVal As PVOID,ByVal As DWORD) As BOOL
SetFileApisToOEM() 
SetFilePointer(ByVal hFile As HANDLE,ByVal lDistanceToMove As LONG,ByVal lpDistanceToMoveHigh As PLONG,ByVal dwMoveMethod As DWORD) As DWORD
SetForm(ByVal hPrinter As HANDLE,ByVal pFormName As LPWSTR,ByVal Level As DWORD,ByVal pForm As PBYTE) As BOOL
SetFilePointerEx(ByVal hFile As HANDLE,ByVal liDistanceToMove As LARGE_INTEGER,ByVal lpNewFilePointer As PLARGE_INTEGER,ByVal dwMoveMethod As DWORD) As BOOL
SetForm(ByVal hPrinter As HANDLE,ByVal pFormName As LPSTR,ByVal Level As DWORD,ByVal pForm As PBYTE) As BOOL
SetFileApisToANSI() 
SetFileAttributes(ByVal lpFileName As LPCWSTR,ByVal dwFileAttributes As DWORD) As BOOL
SetForegroundWindow(ByVal hwnd As HWND) As BOOL
SetFileSecurity(ByVal lpFileName As LPCWSTR,ByVal SecurityInformation As SECURITY_INFORMATION,ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR) As BOOL
SetGraphicsMode(ByVal hdc As HDC,ByVal iMode As Integer) As Integer
SetHandleCount(ByVal wNumber As UINT) As UINT
SetHandleInformation(ByVal hObject As HANDLE,ByVal dwMask As DWORD,ByVal dwFlags As DWORD) As BOOL
SetICMProfile(ByVal hdc As HDC,ByVal lpStr As LPWSTR) As BOOL
SetIpForwardEntry(ByVal pRoute As PMIB_IPFORWARDROW) As DWORD
SetIpTTL(ByVal nTTL As UINT) As DWORD
SetICMProfile(ByVal hdc As HDC,ByVal lpStr As LPSTR) As BOOL
SetIfEntry(ByVal pIfRow As PMIB_IFROW) As DWORD
SetImageConfigInformation(ByVal LoadedImage As PLOADED_IMAGE,ByVal ImageConfigInformation As PIMAGE_LOAD_CONFIG_DIRECTORY) As BOOL
SetIpNetEntry(ByVal pArpEntry As PMIB_IPNETROW) As DWORD
SetIpStatistics(ByVal pIpStats As PMIB_IPSTATS) As DWORD
SetICMMode(ByVal hdc As HDC,ByVal n As Integer) As Integer
SetJob(ByVal hPrinter As HANDLE,ByVal JobId As DWORD,ByVal Level As DWORD,ByVal pJob As PBYTE,ByVal Command As DWORD) As BOOL
SetKeyboardState(ByVal lppbKeyState As PBYTE) As BOOL
SetKernelObjectSecurity(ByVal Handle As HANDLE,ByVal SecurityInformation As SECURITY_INFORMATION,ByVal SecurityDescriptor As PSECURITY_DESCRIPTOR) As BOOL
SetLocalTime(ByVal lpSystemTime As SYSTEMTIME PTR) As BOOL
SetLocaleInfo(ByVal Locale As LCID,ByVal LCType As LCTYPE,ByVal lpLCData As LPCSTR) As BOOL
SetLastErrorEx(ByVal dwErrCode As DWORD,ByVal dwType As DWORD) 
SetLastError(ByVal dwErrCode As DWORD) 
SetLocaleInfo(ByVal Locale As LCID,ByVal LCType As LCTYPE,ByVal lpLCData As LPCWSTR) As BOOL
SetLayeredWindowAttributes(ByVal hwnd As HWND,ByVal crKey As COLORREF,ByVal bAlpha As BYTE,ByVal dwFlags As DWORD) As BOOL
SetMessageQueue(ByVal cMessagesMax As Integer) As BOOL
SetMenuItemBitmaps(ByVal hMenu As HMENU,ByVal nPosition As UINT,ByVal wFlags As UINT,ByVal hBitmapUnchecked As HBITMAP,ByVal hBitmapChecked As HBITMAP) As BOOL
SetMenuItemInfo(ByVal hMenu As HMENU,ByVal un As UINT,ByVal fBoolean As BOOL,ByVal lpcMenuItemInfo As LPCMENUITEMINFOW) As BOOL
SetMenuDefaultItem(ByVal hMenu As HMENU,ByVal uItem As UINT,ByVal fByPos As UINT) As BOOL
SetMailslotInfo(ByVal hMailslot As HANDLE,ByVal lReadTimeout As DWORD) As BOOL
SetMenu(ByVal hwnd As HWND,ByVal hMenu As HMENU) As BOOL
SetMenuContextHelpId(ByVal hMenu As HMENU,ByVal dw As DWORD) As BOOL
SetMapMode(ByVal hdc As HDC,ByVal nMapMode As Integer) As Integer
SetMapperFlags(ByVal hdc As HDC,ByVal dwFlag As DWORD) As DWORD
SetMetaFileBitsEx(ByVal nSize As UINT,ByVal lpData As BYTE PTR) As HMETAFILE
SetMenuItemInfo(ByVal hMenu As HMENU,ByVal un As UINT,ByVal fBoolean As BOOL,ByVal lpcMenuItemInfo As LPCMENUITEMINFOA) As BOOL
SetMetaRgn(ByVal hdc As HDC) As Integer
SetMiterLimit(ByVal hdc As HDC,ByVal eNewLimit As FLOAT,ByVal peOldLimit As PFLOAT) As BOOL
SetMessageExtraInfo(ByVal lParam As LPARAM) As LPARAM
SetMenuInfo(ByVal hmenu As HMENU,ByVal LPCMENUINFO As LPCMENUINFO) As BOOL
SetNamedSecurityInfo(ByVal pObjectName As LPWSTR,ByVal ObjectType As SE_OBJECT_TYPE,ByVal SecurityInfo As SECURITY_INFORMATION,ByVal psidOwner As PSID,ByVal psidGroup As PSID,ByVal pDacl As PACL,ByVal pSacl As PACL) As DWORD
SetNamedPipeHandleState(ByVal hNamedPipe As HANDLE,ByVal lpMode As PDWORD,ByVal lpMaxCollectionCount As PDWORD,ByVal lpCollectDataTimeout As PDWORD) As BOOL
SetNamedSecurityInfo(ByVal pObjectName As LPSTR,ByVal ObjectType As SE_OBJECT_TYPE,ByVal SecurityInfo As SECURITY_INFORMATION,ByVal psidOwner As PSID,ByVal psidGroup As PSID,ByVal pDacl As PACL,ByVal pSacl As PACL) As DWORD
SetPrinterData(ByVal hPrinter As HANDLE,ByVal pValueName As LPSTR,ByVal dwType As DWORD,ByVal pData As PBYTE,ByVal cbData As DWORD) As BOOL
SetProcessWindowStation(ByVal hWinSta As HWINSTA) As BOOL
SetPixel(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal crColor As COLORREF) As COLORREF
SetProcessDefaultLayout(ByVal dwDefaultLayout As DWORD) As BOOL
SetPaletteEntries(ByVal hPalette As HPALETTE,ByVal wStartIndex As UINT,ByVal wNumEntries As UINT,ByVal lpPaletteEntries As PALETTEENTRY PTR) As UINT
SetPixelFormat(ByVal hDC As HDC,ByVal n As Integer,ByVal pcPixelFormatDescriptor As PIXELFORMATDESCRIPTOR PTR) As BOOL
SetPriorityClass(ByVal hProcess As HANDLE,ByVal dwPriorityClass As DWORD) As BOOL
SetPixelV(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal crColor As COLORREF) As BOOL
SetPrivateObjectSecurity(ByVal SecurityInformation As SECURITY_INFORMATION,ByVal ModificationDescriptor As PSECURITY_DESCRIPTOR,ByVal ObjectsSecurityDescriptor As PSECURITY_DESCRIPTOR PTR,ByVal GenericMapping As PGENERIC_MAPPING,ByVal Token As HANDLE) As BOOL
SetPrinter(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pPrinter As PBYTE,ByVal Command As DWORD) As BOOL
SetPrinterData(ByVal hPrinter As HANDLE,ByVal pValueName As LPWSTR,ByVal dwType As DWORD,ByVal pData As PBYTE,ByVal cbData As DWORD) As BOOL
SetProp(ByVal hwnd As HWND,ByVal lpString As LPCWSTR,ByVal hData As HANDLE) As BOOL
SetPolyFillMode(ByVal hdc As HDC,ByVal nPolyFillMode As Integer) As Integer
SetProcessWorkingSetSize(ByVal hProcess As HANDLE,ByVal dwMinimumWorkingSetSize As DWORD,ByVal dwMaximumWorkingSetSize As DWORD) As BOOL
SetParent(ByVal hWndChild As HWND,ByVal hWndNewParent As HWND) As HWND
SetProp(ByVal hwnd As HWND,ByVal lpString As LPCSTR,ByVal hData As HANDLE) As BOOL
SetProcessShutdownParameters(ByVal dwLevel As DWORD,ByVal dwFlags As DWORD) As BOOL
SetProcessPriorityBoost(ByVal hProcess As HANDLE,ByVal bDisablePriorityBoost As BOOL) As BOOL
SetProcessAffinityMask(ByVal hProcess As HANDLE,ByVal dwProcessAffinityMask As DWORD) As BOOL
SetPrinter(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pPrinter As PBYTE,ByVal Command As DWORD) As BOOL
SetRectRgn(ByVal hRgn As HRGN,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer) As BOOL
SetROP2(ByVal hdc As HDC,ByVal nDrawMode As Integer) As Integer
SetRectEmpty(ByVal lpRect As LPRECT) As BOOL
SetRect(ByVal lpRect As LPRECT,ByVal X1 As Integer,ByVal Y1 As Integer,ByVal X2 As Integer,ByVal Y2 As Integer) As BOOL
SetService(ByVal dwNameSpace As DWORD,ByVal dwOperation As DWORD,ByVal dwFlags As DWORD,ByVal lpServiceInfo As LPSERVICE_INFOA,ByVal lpServiceAsyncInfo As LPSERVICE_ASYNC_INFO,ByVal lpdwStatusFlags As LPDWORD) As INT_
SetSuspendState(ByVal As BOOLEAN,ByVal As BOOLEAN,ByVal As BOOLEAN) As BOOLEAN
SetSecurityDescriptorControl(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal ControlBitsOfInterest As SECURITY_DESCRIPTOR_CONTROL,ByVal ControlBitsToSet As SECURITY_DESCRIPTOR_CONTROL) As BOOL
SetSystemPowerState(ByVal fSuspend As BOOL,ByVal fForce As BOOL) As BOOL
SetStdHandle(ByVal nStdHandle As DWORD,ByVal nHandle As HANDLE) As BOOL
SetSecurityDescriptorSacl(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal bSaclPresent As BOOL,ByVal pSacl As PACL,ByVal bSaclDefaulted As BOOL) As BOOL
SetScrollInfo(ByVal hWnd As HWND,ByVal n As Integer,ByVal lpcScrollInfo As LPCSCROLLINFO,ByVal bool As BOOL) As Integer
SetScrollPos(ByVal hwnd As HWND,ByVal nBar As Integer,ByVal nPos As Integer,ByVal fBoolean As BOOL) As Integer
SetServiceStatus(ByVal hServiceStatus As SERVICE_STATUS_HANDLE,ByVal lpServiceStatus As LPSERVICE_STATUS) As BOOL
SetSecurityDescriptorGroup(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal pGroup As PSID,ByVal bGroupDefaulted As BOOL) As BOOL
SetScrollRange(ByVal hwnd As HWND,ByVal nBar As Integer,ByVal nMinPos As Integer,ByVal nMaxPos As Integer,ByVal bRedraw As BOOL) As BOOL
SetSysColors(ByVal nChanges As Integer,ByVal lpSysColor As INT_ PTR,ByVal lpColorValues As COLORREF PTR) As BOOL
SetSystemCursor(ByVal hcur As HCURSOR,ByVal id As DWORD) As BOOL
SetSystemPaletteUse(ByVal hdc As HDC,ByVal wUsage As UINT) As UINT
SetStretchBltMode(ByVal hdc As HDC,ByVal nStretchMode As Integer) As Integer
SetServiceObjectSecurity(ByVal hService As SC_HANDLE,ByVal dwSecurityInformation As SECURITY_INFORMATION,ByVal lpSecurityDescriptor As PSECURITY_DESCRIPTOR) As BOOL
SetSecurityDescriptorOwner(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal pOwner As PSID,ByVal bOwnerDefaulted As BOOL) As BOOL
SetSystemTime(ByVal lpSystemTime As SYSTEMTIME PTR) As BOOL
SetSecurityInfo(ByVal handle As HANDLE,ByVal ObjectType As SE_OBJECT_TYPE,ByVal SecurityInfo As SECURITY_INFORMATION,ByVal psidOwner As PSID,ByVal psidGroup As PSID,ByVal pDacl As PACL,ByVal pSacl As PACL) As DWORD
SetSecurityDescriptorDacl(ByVal pSecurityDescriptor As PSECURITY_DESCRIPTOR,ByVal bDaclPresent As BOOL,ByVal pDacl As PACL,ByVal bDaclDefaulted As BOOL) As BOOL
SetSystemTimeAdjustment(ByVal dwTimeAdjustment As DWORD,ByVal bTimeAdjustmentDisabled As BOOL) As BOOL
SetService(ByVal dwNameSpace As DWORD,ByVal dwOperation As DWORD,ByVal dwFlags As DWORD,ByVal lpServiceInfo As LPSERVICE_INFOW,ByVal lpServiceAsyncInfo As LPSERVICE_ASYNC_INFO,ByVal lpdwStatusFlags As LPDWORD) As INT_
setsockopt(ByVal s As SOCKET,ByVal level As Integer,ByVal optname As Integer,ByVal optval As zstring PTR,ByVal optlen As Integer) As Integer
SetTapeParameters(ByVal hDevice As HANDLE,ByVal dwOperation As DWORD,ByVal lpTapeInformation As PVOID) As DWORD
SetTextAlign(ByVal hdc As HDC,ByVal fMode As UINT) As UINT
SetThemeAppProperties(ByVal As DWORD) 
SetTextJustification(ByVal hdc As HDC,ByVal nBreakExtra As Integer,ByVal nBreakCount As Integer) As BOOL
SetTextColor(ByVal hdc As HDC,ByVal crColor As COLORREF) As COLORREF
SetTextCharacterExtra(ByVal hdc As HDC,ByVal nCharExtra As Integer) As Integer
SetThreadLocale(ByVal Locale As LCID) As BOOL
SetTokenInformation(ByVal TokenHandle As HANDLE,ByVal TokenInformationClass As TOKEN_INFORMATION_CLASS,ByVal TokenInformation As PVOID,ByVal TokenInformationLength As DWORD) As BOOL
SetTimeZoneInformation(ByVal lpTimeZoneInformation As TIME_ZONE_INFORMATION PTR) As BOOL
SetThreadToken(ByVal Thread As PHANDLE,ByVal Token As HANDLE) As BOOL
SetThreadPriorityBoost(ByVal hThread As HANDLE,ByVal bDisablePriorityBoost As BOOL) As BOOL
SetThreadPriority(ByVal hThread As HANDLE,ByVal nPriority As Integer) As BOOL
SetThreadIdealProcessor(ByVal hThread As HANDLE,ByVal dwIdealProcessor As DWORD) As DWORD
SetThreadExecutionState(ByVal esFlags As EXECUTION_STATE) As EXECUTION_STATE
SetTcpEntry(ByVal pTcpRow As PMIB_TCPROW) As DWORD
SetThreadContext(ByVal hThread As HANDLE,ByVal lpContext As CONTEXT PTR) As BOOL
SetThreadAffinityMask(ByVal hThread As HANDLE,ByVal dwThreadAffinityMask As DWORD) As DWORD
SetThreadDesktop(ByVal hDesktop As HDESK) As BOOL
SetTimer(ByVal hWnd As HWND,ByVal nIDEvent As UINT,ByVal uElapse As UINT,ByVal lpTimerFunc As TIMERPROC) As UINT
SetTapePosition(ByVal hDevice As HANDLE,ByVal dwPositionMethod As DWORD,ByVal dwPartition As DWORD,ByVal dwOffsetLow As DWORD,ByVal dwOffsetHigh As DWORD,ByVal bimmediate As BOOL) As DWORD
SetUserObjectInformation(ByVal hObj As HANDLE,ByVal nIndex As Integer,ByVal pvInfo As PVOID,ByVal nLength As DWORD) As BOOL
SetUrlCacheGroupAttribute(ByVal gid As GROUPID,ByVal dwFlags As DWORD,ByVal dwAttributes As DWORD,ByVal lpGroupInfo As LPINTERNET_CACHE_GROUP_INFOA,ByVal lpReserved As LPVOID) As BOOL
SetUrlCacheEntryInfo(ByVal lpszUrlName As LPCSTR,ByVal lpCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOA,ByVal dwFieldControl As DWORD) As BOOL
SetUrlCacheGroupAttribute(ByVal gid As GROUPID,ByVal dwFlags As DWORD,ByVal dwAttributes As DWORD,ByVal lpGroupInfo As LPINTERNET_CACHE_GROUP_INFOW,ByVal lpReserved As LPVOID) As BOOL
SetUrlCacheEntryInfo(ByVal lpszUrlName As LPCSTR,ByVal lpCacheEntryInfo As LPINTERNET_CACHE_ENTRY_INFOW,ByVal dwFieldControl As DWORD) As BOOL
SetUserObjectSecurity(ByVal hObj As HANDLE,ByVal pSIRequested As PSECURITY_INFORMATION,ByVal pSd As PSECURITY_DESCRIPTOR) As BOOL
SetUserGeoID(ByVal As GEOID) As BOOL
SetUnhandledExceptionFilter(ByVal lpTopLevelExceptionFilter As LPTOP_LEVEL_EXCEPTION_FILTER) As LPTOP_LEVEL_EXCEPTION_FILTER
SetupScanFileQueue(ByVal FileQueue As HSPFILEQ,ByVal Flags As DWORD,ByVal Window As HWND,ByVal CallbackRoutine As PSP_FILE_CALLBACK_W,ByVal CallbackContext As PVOID,ByVal Result As PDWORD) As BOOL
SetupDiDeleteDevRegKey(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Scope As DWORD,ByVal HwProfile As DWORD,ByVal KeyType As DWORD) As BOOL
SetupOpenAppendInfFile(ByVal FileName As PCWSTR,ByVal ByReffHandle As HINF,ByVal ErrorLine As PUINT) As BOOL
SetupDiGetINFClass(ByVal ByValfName As PCWSTR,ByVal ClassGuid As LPGUID,ByVal ClassName As PWSTR,ByVal ClassNameSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetSelectedDriver(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_W) As BOOL
SetupDiInstallClass(ByVal hwndParent As HWND,ByVal ByValfFileName As PCWSTR,ByVal Flags As DWORD,ByVal FileQueue As HSPFILEQ) As BOOL
SetupDiInstallClassEx(ByVal hwndParent As HWND,ByVal ByValfFileName As PCWSTR,ByVal Flags As DWORD,ByVal FileQueue As HSPFILEQ,ByVal ByRefterfaceClassGuid As GUID PTR,ByVal Reserved1 As PVOID,ByVal Reserved2 As PVOID) As BOOL
SetupDiOpenClassRegKeyEx(ByVal ClassGuid As GUID PTR,ByVal samDesired As REGSAM,ByVal Flags As DWORD,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As HKEY
SetupDiOpenDeviceInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInstanceId As PCWSTR,ByVal hwndParent As HWND,ByVal OpenFlags As DWORD,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupQueueRenameSection(ByVal QueueHandle As HSPFILEQ,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal Section As PCWSTR) As BOOL
SetupRemoveFileLogEntry(ByVal FileLogHandle As HSPFILELOG,ByVal LogSectionName As PCWSTR,ByVal TargetFilename As PCWSTR) As BOOL
SetupRemoveFromDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal TargetFilespec As PCWSTR,ByVal Operation As UINT,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupRemoveFromSourceList(ByVal Flags As DWORD,ByVal Source As PCWSTR) As BOOL
SetupGetLineByIndex(ByVal ByReffHandle As HINF,ByVal Section As PCSTR,ByVal ByValdex As DWORD,ByVal Context As PINFCONTEXT) As BOOL
SetupLogFile(ByVal FileLogHandle As HSPFILELOG,ByVal LogSectionName As PCWSTR,ByVal SourceFilename As PCWSTR,ByVal TargetFilename As PCWSTR,ByVal Checksum As DWORD,ByVal DiskTagfile As PCWSTR,ByVal DiskDescription As PCWSTR,ByVal OtherInfo As PCWSTR,ByVal Flags As DWORD) As BOOL
SetupDiDeleteDeviceInterfaceRegKey(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA,ByVal Reserved As DWORD) As BOOL
SetupDiDeleteDeviceInterfaceData(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA) As BOOL
SetupDiDeleteDeviceInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiCreateDeviceInfoList(ByVal ClassGuid As GUID PTR,ByVal hwndParent As HWND) As HDEVINFO
SetupDiChangeState(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiCancelDriverInfoSearch(ByVal DeviceInfoSet As HDEVINFO) As BOOL
SetupDiCallClassInstaller(ByVal ByRefstallFunction As DI_FUNCTION,ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiBuildDriverInfoList(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverType As DWORD) As BOOL
SetupDiBuildClassInfoList(ByVal Flags As DWORD,ByVal ClassGuidList As LPGUID,ByVal ClassGuidListSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiAskForOEMDisk(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDestroyDiskSpaceList(ByVal DiskSpace As HDSKSPC) As BOOL
SetupCloseFileQueue(ByVal QueueHandle As HSPFILEQ) As BOOL
SetupCancelTemporary() As BOOL
SetupGetInfInformation(ByVal fSpec As LPCVOID,ByVal SearchControl As DWORD,ByVal ReturnBuffer As PSP_INF_INFORMATION,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetDeviceInfoListDetail(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoSetDetailData As PSP_DEVINFO_LIST_DETAIL_DATA_W) As BOOL
SetupDiGetClassRegistryProperty(ByVal As LPGUID,ByVal As DWORD,ByVal As PDWORD,ByVal As PBYTE,ByVal As DWORD,ByVal As PDWORD,ByVal As PCWSTR,ByVal As PVOID) As BOOL
SetupDiGetClassInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal ClassInstallParams As PSP_CLASSINSTALL_HEADER,ByVal ClassInstallParamsSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetClassImageListEx(ByVal ClassImageListData As PSP_CLASSIMAGELIST_DATA,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As BOOL
SetupDiGetClassDevsEx(ByVal ClassGuid As GUID PTR,ByVal Enumerator As PCWSTR,ByVal hwndParent As HWND,ByVal Flags As DWORD,ByVal DeviceInfoSet As HDEVINFO,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As HDEVINFO
SetupDiGetClassDevs(ByVal ClassGuid As GUID PTR,ByVal Enumerator As PCWSTR,ByVal hwndParent As HWND,ByVal Flags As DWORD) As HDEVINFO
SetupDiGetClassDevPropertySheets(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal PropertySheetHeader As LPPROPSHEETHEADERW,ByVal PropertySheetHeaderPageListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal PropertySheetType As DWORD) As BOOL
SetupRemoveInstallSectionFromDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ByReffHandle As HINF,ByVal LayoutInfHandle As HINF,ByVal SectionName As PCWSTR,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupDiGetClassDescriptionEx(ByVal ClassGuid As GUID PTR,ByVal ClassDescription As PWSTR,ByVal ClassDescriptionSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As BOOL
SetupDiGetClassDescription(ByVal ClassGuid As GUID PTR,ByVal ClassDescription As PWSTR,ByVal ClassDescriptionSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetActualSectionToInstall(ByVal ByReffHandle As HINF,ByVal ByValfSectionName As PCWSTR,ByVal ByValfSectionWithExt As PWSTR,ByVal ByValfSectionWithExtSize As DWORD,ByVal RequiredSize As PDWORD,ByVal Extension As PWSTR PTR) As BOOL
SetupDiEnumDriverInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverType As DWORD,ByVal MemberIndex As DWORD,ByVal DriverInfoData As PSP_DRVINFO_DATA_W) As BOOL
SetupDiCreateDevRegKey(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Scope As DWORD,ByVal HwProfile As DWORD,ByVal KeyType As DWORD,ByVal ByReffHandle As HINF,ByVal ByValfSectionName As PCWSTR) As HKEY
SetupDiCreateDeviceInterfaceRegKey(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA,ByVal Reserved As DWORD,ByVal samDesired As REGSAM,ByVal ByReffHandle As HINF,ByVal ByValfSectionName As PCWSTR) As HKEY
SetupDiCreateDeviceInterface(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal ByRefterfaceClassGuid As GUID PTR,ByVal ReferenceString As PCWSTR,ByVal CreationFlags As DWORD,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA) As BOOL
SetupDiCreateDeviceInfoListEx(ByVal ClassGuid As GUID PTR,ByVal hwndParent As HWND,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As HDEVINFO
SetupDiCreateDeviceInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceName As PCWSTR,ByVal ClassGuid As GUID PTR,ByVal DeviceDescription As PCWSTR,ByVal hwndParent As HWND,ByVal CreationFlags As DWORD,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiClassNameFromGuidEx(ByVal ClassGuid As GUID PTR,ByVal ClassName As PWSTR,ByVal ClassNameSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As BOOL
SetupDiClassNameFromGuid(ByVal ClassGuid As GUID PTR,ByVal ClassName As PWSTR,ByVal ClassNameSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiClassGuidsFromNameEx(ByVal ClassName As PCWSTR,ByVal ClassGuidList As LPGUID,ByVal ClassGuidListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As BOOL
SetupDiDestroyClassImageList(ByVal ClassImageListData As PSP_CLASSIMAGELIST_DATA) As BOOL
SetupDiClassGuidsFromName(ByVal ClassName As PCWSTR,ByVal ClassGuidList As LPGUID,ByVal ClassGuidListSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiBuildClassInfoListEx(ByVal Flags As DWORD,ByVal ClassGuidList As LPGUID,ByVal ClassGuidListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As BOOL
SetupDeleteError(ByVal hwndParent As HWND,ByVal DialogTitle As PCWSTR,ByVal File As PCWSTR,ByVal Win32ErrorCode As UINT,ByVal Style As DWORD) As UINT
SetupGetLineCount(ByVal ByReffHandle As HINF,ByVal Section As PCSTR) As LONG
SetupQueryInfVersionInformation(ByVal ByReffInformation As PSP_INF_INFORMATION,ByVal ByValfIndex As UINT,ByVal Key As PCWSTR,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDefaultQueueCallback(ByVal Context As PVOID,ByVal Notification As UINT,ByVal Param1 As UINT_PTR,ByVal Param2 As UINT_PTR) As UINT
SetupDecompressOrCopyFile(ByVal SourceFileName As PCWSTR,ByVal TargetFileName As PCWSTR,ByVal CompressionType As PUINT) As DWORD
SetupDiGetHwProfileListEx(ByVal HwProfileList As PDWORD,ByVal HwProfileListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal CurrentlyActiveIndex As PDWORD,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As BOOL
SetupCreateDiskSpaceList(ByVal Reserved1 As PVOID,ByVal Reserved2 As DWORD,ByVal Flags As UINT) As HDSKSPC
SetupCopyOEMInf(ByVal SourceInfFileName As PCWSTR,ByVal OEMSourceMediaLocation As PCWSTR,ByVal OEMSourceMediaType As DWORD,ByVal CopyStyle As DWORD,ByVal DestinationInfFileName As PWSTR,ByVal DestinationInfFileNameSize As DWORD,ByVal RequiredSize As PDWORD,ByVal DestinationInfFileNameComponent As PWSTR PTR) As BOOL
SetupCopyError(ByVal hwndParent As HWND,ByVal DialogTitle As PCWSTR,ByVal DiskName As PCWSTR,ByVal PathToSource As PCWSTR,ByVal SourceFile As PCWSTR,ByVal TargetPathFile As PCWSTR,ByVal Win32ErrorCode As UINT,ByVal Style As DWORD,ByVal PathBuffer As PWSTR,ByVal PathBufferSize As DWORD,ByVal PathRequiredSize As PDWORD) As UINT
SetupCommitFileQueue(ByVal Owner As HWND,ByVal QueueHandle As HSPFILEQ,ByVal MsgHandler As PSP_FILE_CALLBACK_W,ByVal Context As PVOID) As BOOL
SetupBackupError(ByVal hwndParent As HWND,ByVal DialogTitle As PCWSTR,ByVal BackupFile As PCWSTR,ByVal TargetFile As PCWSTR,ByVal Win32ErrorCode As UINT,ByVal Style As DWORD) As UINT
SetupAdjustDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal DriveRoot As LPCWSTR,ByVal Amount As LONGLONG,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupAddToSourceList(ByVal Flags As DWORD,ByVal Source As PCWSTR) As BOOL
SetupAddToDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal TargetFilespec As PCWSTR,ByVal FileSize As LONGLONG,ByVal Operation As UINT,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupAddSectionToDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal SectionName As PCWSTR,ByVal Operation As UINT,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupAddInstallSectionToDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ByReffHandle As HINF,ByVal LayoutInfHandle As HINF,ByVal SectionName As PCWSTR,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupGetInfFileList(ByVal DirectoryPath As PCSTR,ByVal ByValfStyle As DWORD,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetFileCompressionInfo(ByVal SourceFileName As PCSTR,ByVal ActualSourceFileName As PSTR PTR,ByVal SourceFileSize As PDWORD,ByVal TargetFileSize As PDWORD,ByVal CompressionType As PUINT) As DWORD
SetupGetBackupInformation(ByVal QueueHandle As HSPFILEQ,ByVal BackupParams As PSP_BACKUP_QUEUE_PARAMS_A) As BOOL
SetupFree(ByVal As PCSTR PTR PTR,ByVal As UINT) As BOOL
SetupTerminateFileLog(ByVal FileLogHandle As HSPFILELOG) As BOOL
SetupFindNextMatchLine(ByVal ContextIn As PINFCONTEXT,ByVal Key As PCSTR,ByVal ContextOut As PINFCONTEXT) As BOOL
SetupFindFirstLine(ByVal ByReffHandle As HINF,ByVal Section As PCSTR,ByVal Key As PCSTR,ByVal Context As PINFCONTEXT) As BOOL
SetupDuplicateDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal Reserved1 As PVOID,ByVal Reserved2 As DWORD,ByVal Flags As UINT) As HDSKSPC
SetupDiSetSelectedDriver(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_A) As BOOL
SetupDiSetDriverInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_A,ByVal DriverInstallParams As PSP_DRVINSTALL_PARAMS) As BOOL
SetupDiSetDeviceRegistryProperty(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Property As DWORD,ByVal PropertyBuffer As BYTE PTR,ByVal PropertyBufferSize As DWORD) As BOOL
SetupDiOpenDeviceInterface(ByVal DeviceInfoSet As HDEVINFO,ByVal DevicePath As PCWSTR,ByVal OpenFlags As DWORD,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA) As BOOL
SetupDiSetClassInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal ClassInstallParams As PSP_CLASSINSTALL_HEADER,ByVal ClassInstallParamsSize As DWORD) As BOOL
SetupDiSetClassRegistryProperty(ByVal As LPGUID,ByVal As DWORD,ByVal As BYTE PTR,ByVal As DWORD,ByVal As PCWSTR,ByVal As PVOID) As BOOL
SetupDiSetDeviceInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DeviceInstallParams As PSP_DEVINSTALL_PARAMS_W) As BOOL
SetupDiSetDeviceRegistryProperty(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Property As DWORD,ByVal PropertyBuffer As BYTE PTR,ByVal PropertyBufferSize As DWORD) As BOOL
SetupDiSetDriverInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_W,ByVal DriverInstallParams As PSP_DRVINSTALL_PARAMS) As BOOL
SetupDiSetSelectedDriver(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_W) As BOOL
SetupDuplicateDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal Reserved1 As PVOID,ByVal Reserved2 As DWORD,ByVal Flags As UINT) As HDSKSPC
SetupFindFirstLine(ByVal ByReffHandle As HINF,ByVal Section As PCWSTR,ByVal Key As PCWSTR,ByVal Context As PINFCONTEXT) As BOOL
SetupFindNextMatchLine(ByVal ContextIn As PINFCONTEXT,ByVal Key As PCWSTR,ByVal ContextOut As PINFCONTEXT) As BOOL
SetupFree(ByVal As PCWSTR PTR PTR,ByVal As UINT) As BOOL
SetupGetBackupInformation(ByVal QueueHandle As HSPFILEQ,ByVal BackupParams As PSP_BACKUP_QUEUE_PARAMS_W) As BOOL
SetupGetFileCompressionInfo(ByVal SourceFileName As PCWSTR,ByVal ActualSourceFileName As PWSTR PTR,ByVal SourceFileSize As PDWORD,ByVal TargetFileSize As PDWORD,ByVal CompressionType As PUINT) As DWORD
SetupGetInfFileList(ByVal DirectoryPath As PCWSTR,ByVal ByValfStyle As DWORD,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiSetDeviceInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DeviceInstallParams As PSP_DEVINSTALL_PARAMS_A) As BOOL
SetupRemoveSectionFromDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal SectionName As PCWSTR,ByVal Operation As UINT,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupDiSetClassRegistryProperty(ByVal As LPGUID,ByVal As DWORD,ByVal As BYTE PTR,ByVal As DWORD,ByVal As PCSTR,ByVal As PVOID) As BOOL
SetupDiSetClassInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal ClassInstallParams As PSP_CLASSINSTALL_HEADER,ByVal ClassInstallParamsSize As DWORD) As BOOL
SetupDiOpenDeviceInterface(ByVal DeviceInfoSet As HDEVINFO,ByVal DevicePath As PCSTR,ByVal OpenFlags As DWORD,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA) As BOOL
SetupDiOpenDeviceInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInstanceId As PCSTR,ByVal hwndParent As HWND,ByVal OpenFlags As DWORD,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiOpenClassRegKeyEx(ByVal ClassGuid As GUID PTR,ByVal samDesired As REGSAM,ByVal Flags As DWORD,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As HKEY
SetupDiInstallClassEx(ByVal hwndParent As HWND,ByVal ByValfFileName As PCSTR,ByVal Flags As DWORD,ByVal FileQueue As HSPFILEQ,ByVal ByRefterfaceClassGuid As GUID PTR,ByVal Reserved1 As PVOID,ByVal Reserved2 As PVOID) As BOOL
SetupDiInstallClass(ByVal hwndParent As HWND,ByVal ByValfFileName As PCSTR,ByVal Flags As DWORD,ByVal FileQueue As HSPFILEQ) As BOOL
SetupDiGetSelectedDriver(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_A) As BOOL
SetupQuerySpaceRequiredOnDrive(ByVal DiskSpace As HDSKSPC,ByVal DriveSpec As PCWSTR,ByVal SpaceRequired As LONGLONG PTR,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupPromptReboot(ByVal FileQueue As HSPFILEQ,ByVal Owner As HWND,ByVal ScanOnly As BOOL) As INT_
SetupDiDestroyDeviceInfoList(ByVal DeviceInfoSet As HDEVINFO) As BOOL
SetupOpenMasterInf() As HINF
SetupDiGetINFClass(ByVal ByValfName As PCSTR,ByVal ClassGuid As LPGUID,ByVal ClassName As PSTR,ByVal ClassNameSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetHwProfileListEx(ByVal HwProfileList As PDWORD,ByVal HwProfileListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal CurrentlyActiveIndex As PDWORD,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As BOOL
SetupRenameError(ByVal hwndParent As HWND,ByVal DialogTitle As PCWSTR,ByVal SourceFile As PCWSTR,ByVal TargetFile As PCWSTR,ByVal Win32ErrorCode As UINT,ByVal Style As DWORD) As UINT
SetupDiGetHwProfileFriendlyNameEx(ByVal HwProfile As DWORD,ByVal FriendlyName As PSTR,ByVal FriendlyNameSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As BOOL
SetupDiGetHwProfileFriendlyName(ByVal HwProfile As DWORD,ByVal FriendlyName As PSTR,ByVal FriendlyNameSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetDriverInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_A,ByVal DriverInstallParams As PSP_DRVINSTALL_PARAMS) As BOOL
SetupDiGetDriverInfoDetail(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_A,ByVal DriverInfoDetailData As PSP_DRVINFO_DETAIL_DATA_A,ByVal DriverInfoDetailDataSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetInfInformation(ByVal fSpec As LPCVOID,ByVal SearchControl As DWORD,ByVal ReturnBuffer As PSP_INF_INFORMATION,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetLineByIndex(ByVal ByReffHandle As HINF,ByVal Section As PCWSTR,ByVal ByValdex As DWORD,ByVal Context As PINFCONTEXT) As BOOL
SetupGetLineCount(ByVal ByReffHandle As HINF,ByVal Section As PCWSTR) As LONG
SetupDiGetDeviceRegistryProperty(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Property As DWORD,ByVal PropertyRegDataType As PDWORD,ByVal PropertyBuffer As PBYTE,ByVal PropertyBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupOpenLog(ByVal lErase As BOOL) As BOOL
SetupOpenFileQueue() As HSPFILEQ
SetupDiGetDeviceInterfaceDetail(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA,ByVal DeviceInterfaceDetailData As PSP_DEVICE_INTERFACE_DETAIL_DATA_A,ByVal DeviceInterfaceDetailDataSize As DWORD,ByVal RequiredSize As PDWORD,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiGetDeviceInstanceId(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DeviceInstanceId As PSTR,ByVal DeviceInstanceIdSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetDeviceInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DeviceInstallParams As PSP_DEVINSTALL_PARAMS_A) As BOOL
SetupDiGetDeviceInfoListDetail(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoSetDetailData As PSP_DEVINFO_LIST_DETAIL_DATA_A) As BOOL
SetupDiGetClassRegistryProperty(ByVal As LPGUID,ByVal As DWORD,ByVal As PDWORD,ByVal As PBYTE,ByVal As DWORD,ByVal As PDWORD,ByVal As PCSTR,ByVal As PVOID) As BOOL
SetupDiGetClassInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal ClassInstallParams As PSP_CLASSINSTALL_HEADER,ByVal ClassInstallParamsSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetClassImageListEx(ByVal ClassImageListData As PSP_CLASSIMAGELIST_DATA,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As BOOL
SetupDiGetClassDevsEx(ByVal ClassGuid As GUID PTR,ByVal Enumerator As PCSTR,ByVal hwndParent As HWND,ByVal Flags As DWORD,ByVal DeviceInfoSet As HDEVINFO,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As HDEVINFO
SetupDiGetClassDevs(ByVal ClassGuid As GUID PTR,ByVal Enumerator As PCSTR,ByVal hwndParent As HWND,ByVal Flags As DWORD) As HDEVINFO
SetupDiGetClassDevPropertySheets(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal PropertySheetHeader As LPPROPSHEETHEADERA,ByVal PropertySheetHeaderPageListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal PropertySheetType As DWORD) As BOOL
SetupInitDefaultQueueCallbackEx(ByVal OwnerWindow As HWND,ByVal AlternateProgressWindow As HWND,ByVal ProgressMessage As UINT,ByVal Reserved1 As DWORD,ByVal Reserved2 As PVOID) As PVOID
SetupQueryInfOriginalFileInformation(ByVal ByReffInformation As PSP_INF_INFORMATION,ByVal ByValfIndex As UINT,ByVal AlternatePlatformInfo As PSP_ALTPLATFORM_INFO,ByVal OriginalFileInfo As PSP_ORIGINAL_FILE_INFO_A) As BOOL
SetupInitDefaultQueueCallback(ByVal OwnerWindow As HWND) As PVOID
SetupDiGetDeviceInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DeviceInstallParams As PSP_DEVINSTALL_PARAMS_W) As BOOL
SetupGetIntField(ByVal Context As PINFCONTEXT,ByVal FieldIndex As DWORD,ByVal ByReftegerValue As PINT) As BOOL
SetupGetFieldCount(ByVal Context As PINFCONTEXT) As DWORD
SetupGetBinaryField(ByVal Context As PINFCONTEXT,ByVal FieldIndex As DWORD,ByVal ReturnBuffer As PBYTE,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As LPDWORD) As BOOL
SetupFindNextLine(ByVal ContextIn As PINFCONTEXT,ByVal ContextOut As PINFCONTEXT) As BOOL
SetupQuerySpaceRequiredOnDrive(ByVal DiskSpace As HDSKSPC,ByVal DriveSpec As PCSTR,ByVal SpaceRequired As LONGLONG PTR,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupQueueCopy(ByVal QueueHandle As HSPFILEQ,ByVal SourceRootPath As PCSTR,ByVal SourcePath As PCSTR,ByVal SourceFilename As PCSTR,ByVal SourceDescription As PCSTR,ByVal SourceTagfile As PCSTR,ByVal TargetDirectory As PCSTR,ByVal TargetFilename As PCSTR,ByVal CopyStyle As DWORD) As BOOL
SetupQueueCopyIndirect(ByVal CopyParams As PSP_FILE_COPY_PARAMS_A) As BOOL
SetupGetLineText(ByVal Context As PINFCONTEXT,ByVal ByReffHandle As HINF,ByVal Section As PCWSTR,ByVal Key As PCWSTR,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetMultiSzField(ByVal Context As PINFCONTEXT,ByVal FieldIndex As DWORD,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As LPDWORD) As BOOL
SetupDiUnremoveDevice(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiSetSelectedDevice(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiGetHwProfileFriendlyName(ByVal HwProfile As DWORD,ByVal FriendlyName As PWSTR,ByVal FriendlyNameSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiSelectOEMDrv(ByVal hwndParent As HWND,ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiGetClassDescriptionEx(ByVal ClassGuid As GUID PTR,ByVal ClassDescription As PSTR,ByVal ClassDescriptionSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As BOOL
SetupDiSelectDevice(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiSelectBestCompatDrv(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiRemoveDeviceInterface(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA) As BOOL
SetupDiRemoveDevice(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiRegisterDeviceInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Flags As DWORD,ByVal CompareProc As PSP_DETSIG_CMPPROC,ByVal CompareContext As PVOID,ByVal DupDeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiRegisterCoDeviceInstallers(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiOpenDevRegKey(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Scope As DWORD,ByVal HwProfile As DWORD,ByVal KeyType As DWORD,ByVal samDesired As REGSAM) As HKEY
SetupDiGetClassDescription(ByVal ClassGuid As GUID PTR,ByVal ClassDescription As PSTR,ByVal ClassDescriptionSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetActualSectionToInstall(ByVal ByReffHandle As HINF,ByVal ByValfSectionName As PCSTR,ByVal ByValfSectionWithExt As PSTR,ByVal ByValfSectionWithExtSize As DWORD,ByVal RequiredSize As PDWORD,ByVal Extension As PSTR PTR) As BOOL
SetupDiEnumDriverInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverType As DWORD,ByVal MemberIndex As DWORD,ByVal DriverInfoData As PSP_DRVINFO_DATA_A) As BOOL
SetupQueueCopySection(ByVal QueueHandle As HSPFILEQ,ByVal SourceRootPath As PCSTR,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal Section As PCSTR,ByVal CopyStyle As DWORD) As BOOL
SetupQueueDefaultCopy(ByVal QueueHandle As HSPFILEQ,ByVal ByReffHandle As HINF,ByVal SourceRootPath As PCSTR,ByVal SourceFilename As PCSTR,ByVal TargetFilename As PCSTR,ByVal CopyStyle As DWORD) As BOOL
SetupQueueDelete(ByVal QueueHandle As HSPFILEQ,ByVal PathPart1 As PCSTR,ByVal PathPart2 As PCSTR) As BOOL
SetupQueueDeleteSection(ByVal QueueHandle As HSPFILEQ,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal Section As PCSTR) As BOOL
SetupQueueRename(ByVal QueueHandle As HSPFILEQ,ByVal SourcePath As PCSTR,ByVal SourceFilename As PCSTR,ByVal TargetPath As PCSTR,ByVal TargetFilename As PCSTR) As BOOL
SetupQueueRenameSection(ByVal QueueHandle As HSPFILEQ,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal Section As PCSTR) As BOOL
SetupDiCreateDevRegKey(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Scope As DWORD,ByVal HwProfile As DWORD,ByVal KeyType As DWORD,ByVal ByReffHandle As HINF,ByVal ByValfSectionName As PCSTR) As HKEY
SetupDiCreateDeviceInterfaceRegKey(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA,ByVal Reserved As DWORD,ByVal samDesired As REGSAM,ByVal ByReffHandle As HINF,ByVal ByValfSectionName As PCSTR) As HKEY
SetupDiOpenDeviceInterfaceRegKey(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA,ByVal Reserved As DWORD,ByVal samDesired As REGSAM) As HKEY
SetupDiCreateDeviceInterface(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal ByRefterfaceClassGuid As GUID PTR,ByVal ReferenceString As PCSTR,ByVal CreationFlags As DWORD,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA) As BOOL
SetupDiCreateDeviceInfoListEx(ByVal ClassGuid As GUID PTR,ByVal hwndParent As HWND,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As HDEVINFO
SetupDiOpenClassRegKey(ByVal ClassGuid As GUID PTR,ByVal samDesired As REGSAM) As HKEY
SetupDiMoveDuplicateDevice(ByVal DeviceInfoSet As HDEVINFO,ByVal DestinationDeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupRemoveFileLogEntry(ByVal FileLogHandle As HSPFILELOG,ByVal LogSectionName As PCSTR,ByVal TargetFilename As PCSTR) As BOOL
SetupRemoveFromDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal TargetFilespec As PCSTR,ByVal Operation As UINT,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupRemoveFromSourceList(ByVal Flags As DWORD,ByVal Source As PCSTR) As BOOL
SetupRemoveInstallSectionFromDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ByReffHandle As HINF,ByVal LayoutInfHandle As HINF,ByVal SectionName As PCSTR,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupRemoveSectionFromDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal SectionName As PCSTR,ByVal Operation As UINT,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupRenameError(ByVal hwndParent As HWND,ByVal DialogTitle As PCSTR,ByVal SourceFile As PCSTR,ByVal TargetFile As PCSTR,ByVal Win32ErrorCode As UINT,ByVal Style As DWORD) As UINT
SetupScanFileQueue(ByVal FileQueue As HSPFILEQ,ByVal Flags As DWORD,ByVal Window As HWND,ByVal CallbackRoutine As PSP_FILE_CALLBACK_A,ByVal CallbackContext As PVOID,ByVal Result As PDWORD) As BOOL
SetupSetDirectoryId(ByVal ByReffHandle As HINF,ByVal Id As DWORD,ByVal Directory As PCSTR) As BOOL
SetupSetDirectoryIdEx(ByVal ByReffHandle As HINF,ByVal Id As DWORD,ByVal Directory As PCSTR,ByVal Flags As DWORD,ByVal Reserved1 As DWORD,ByVal Reserved2 As PVOID) As BOOL
SetupSetFileQueueAlternatePlatform(ByVal QueueHandle As HSPFILEQ,ByVal AlternatePlatformInfo As PSP_ALTPLATFORM_INFO,ByVal AlternateDefaultCatalogFile As PCSTR) As BOOL
SetupSetPlatformPathOverride(ByVal Override As PCSTR) As BOOL
SetupSetSourceList(ByVal Flags As DWORD,ByVal SourceList As PCSTR PTR,ByVal SourceCount As UINT) As BOOL
SetupDiLoadClassIcon(ByVal ClassGuid As GUID PTR,ByVal LargeIcon As HICON PTR,ByVal MiniIconIndex As PINT) As BOOL
SetupDiInstallDriverFiles(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiInstallDeviceInterfaces(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiInstallDevice(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiGetWizardage(ByVal As HDEVINFO,ByVal As PSP_DEVINFO_DATA,ByVal As PSP_INSTALLWIZARD_DATA,ByVal As DWORD,ByVal As DWORD) As HPROPSHEETPAGE
SetupDiGetSelectedDevice(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiGetHwProfileList(ByVal HwProfileList As PDWORD,ByVal HwProfileListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal CurrentlyActiveIndex As PDWORD) As BOOL
SetupGetSourceFileLocation(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal FileName As PCWSTR,ByVal SourceId As PUINT,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetSourceFileSize(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal FileName As PCWSTR,ByVal Section As PCWSTR,ByVal FileSize As PDWORD,ByVal RoundingFactor As UINT) As BOOL
SetupDiGetDeviceInterfaceAlias(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA,ByVal AliasInterfaceClassGuid As GUID PTR,ByVal AliasDeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA) As BOOL
SetupDiGetDeviceInfoListClass(ByVal DeviceInfoSet As HDEVINFO,ByVal ClassGuid As LPGUID) As BOOL
SetupDiGetClassImageList(ByVal ClassImageListData As PSP_CLASSIMAGELIST_DATA) As BOOL
SetupDiGetClassImageIndex(ByVal ClassImageListData As PSP_CLASSIMAGELIST_DATA,ByVal ClassGuid As GUID PTR,ByVal ImageIndex As PINT) As BOOL
SetupDiGetClassBitmapIndex(ByVal ClassGuid As GUID PTR,ByVal MiniIconIndex As PINT) As BOOL
SetupDiEnumDeviceInterfaces(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal ByRefterfaceClassGuid As GUID PTR,ByVal MemberIndex As DWORD,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA) As BOOL
SetupDiDestroyDriverInfoList(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverType As DWORD) As BOOL
SetupGetLineText(ByVal Context As PINFCONTEXT,ByVal ByReffHandle As HINF,ByVal Section As PCSTR,ByVal Key As PCSTR,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiDrawMiniIcon(ByVal hdc As HDC,ByVal rc As RECT,ByVal MiniIconIndex As INT_,ByVal Flags As DWORD) As INT_
SetupDiEnumDeviceInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal MemberIndex As DWORD,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupGetMultiSzField(ByVal Context As PINFCONTEXT,ByVal FieldIndex As DWORD,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As LPDWORD) As BOOL
SetupGetSourceFileLocation(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal FileName As PCSTR,ByVal SourceId As PUINT,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetSourceFileSize(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal FileName As PCSTR,ByVal Section As PCSTR,ByVal FileSize As PDWORD,ByVal RoundingFactor As UINT) As BOOL
SetupGetSourceInfo(ByVal ByReffHandle As HINF,ByVal SourceId As UINT,ByVal ByValfoDesired As UINT,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetStringField(ByVal Context As PINFCONTEXT,ByVal FieldIndex As DWORD,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetTargetPath(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal Section As PCSTR,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupInitializeFileLog(ByVal LogFileName As PCSTR,ByVal Flags As DWORD) As HSPFILELOG
SetupInstallFile(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal SourceFile As PCSTR,ByVal SourcePathRoot As PCSTR,ByVal DestinationName As PCSTR,ByVal CopyStyle As DWORD,ByVal CopyMsgHandler As PSP_FILE_CALLBACK_A,ByVal Context As PVOID) As BOOL
SetupInstallFileEx(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal SourceFile As PCSTR,ByVal SourcePathRoot As PCSTR,ByVal DestinationName As PCSTR,ByVal CopyStyle As DWORD,ByVal CopyMsgHandler As PSP_FILE_CALLBACK_A,ByVal Context As PVOID,ByVal FileWasInUse As PBOOL) As BOOL
SetupInstallFilesFromInfSection(ByVal ByReffHandle As HINF,ByVal LayoutInfHandle As HINF,ByVal FileQueue As HSPFILEQ,ByVal SectionName As PCSTR,ByVal SourceRootPath As PCSTR,ByVal CopyFlags As UINT) As BOOL
SetupDiCreateDeviceInfo(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceName As PCSTR,ByVal ClassGuid As GUID PTR,ByVal DeviceDescription As PCSTR,ByVal hwndParent As HWND,ByVal CreationFlags As DWORD,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupDiClassNameFromGuidEx(ByVal ClassGuid As GUID PTR,ByVal ClassName As PSTR,ByVal ClassNameSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As BOOL
SetupDiClassNameFromGuid(ByVal ClassGuid As GUID PTR,ByVal ClassName As PSTR,ByVal ClassNameSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupInstallFromInfSection(ByVal Owner As HWND,ByVal ByReffHandle As HINF,ByVal SectionName As PCSTR,ByVal Flags As UINT,ByVal RelativeKeyRoot As HKEY,ByVal SourceRootPath As PCSTR,ByVal CopyFlags As UINT,ByVal MsgHandler As PSP_FILE_CALLBACK_A,ByVal Context As PVOID,ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupInstallServicesFromInfSection(ByVal ByReffHandle As HINF,ByVal SectionName As PCSTR,ByVal Flags As DWORD) As BOOL
SetupInstallServicesFromInfSectionEx(ByVal ByReffHandle As HINF,ByVal SectionName As PCSTR,ByVal Flags As DWORD,ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Reserved1 As PVOID,ByVal Reserved2 As PVOID) As BOOL
SetupIterateCabinet(ByVal CabinetFile As PCSTR,ByVal Reserved As DWORD,ByVal MsgHandler As PSP_FILE_CALLBACK_A,ByVal Context As PVOID) As BOOL
SetupLogError(ByVal MessageString As LPCSTR,ByVal Severity As DWORD) As BOOL
SetupLogFile(ByVal FileLogHandle As HSPFILELOG,ByVal LogSectionName As PCSTR,ByVal SourceFilename As PCSTR,ByVal TargetFilename As PCSTR,ByVal Checksum As DWORD,ByVal DiskTagfile As PCSTR,ByVal DiskDescription As PCSTR,ByVal OtherInfo As PCSTR,ByVal Flags As DWORD) As BOOL
SetupQueryInfFileInformation(ByVal ByReffInformation As PSP_INF_INFORMATION,ByVal ByValfIndex As UINT,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupQueryFileLog(ByVal FileLogHandle As HSPFILELOG,ByVal LogSectionName As PCSTR,ByVal TargetFilename As PCSTR,ByVal DesiredInfo As SetupFileLogInfo,ByVal DataOut As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupQueryDrivesInDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupQuery(ByVal As DWORD,ByVal As PCSTR PTR PTR,ByVal As PUINT) As BOOL
SetupPromptForDisk(ByVal hwndParent As HWND,ByVal DialogTitle As PCSTR,ByVal DiskName As PCSTR,ByVal PathToSource As PCSTR,ByVal FileSought As PCSTR,ByVal TagFile As PCSTR,ByVal DiskPromptStyle As DWORD,ByVal PathBuffer As PSTR,ByVal PathBufferSize As DWORD,ByVal PathRequiredSize As PDWORD) As UINT
SetupOpenInfFile(ByVal FileName As PCSTR,ByVal ByValfClass As PCSTR,ByVal ByValfStyle As DWORD,ByVal ErrorLine As PUINT) As HINF
SetupQueueRename(ByVal QueueHandle As HSPFILEQ,ByVal SourcePath As PCWSTR,ByVal SourceFilename As PCWSTR,ByVal TargetPath As PCWSTR,ByVal TargetFilename As PCWSTR) As BOOL
SetupDiGetHwProfileFriendlyNameEx(ByVal HwProfile As DWORD,ByVal FriendlyName As PWSTR,ByVal FriendlyNameSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCWSTR,ByVal Reserved As PVOID) As BOOL
SetupComm(ByVal hFile As HANDLE,ByVal dwInQueue As DWORD,ByVal dwOutQueue As DWORD) As BOOL
SetupQueueDeleteSection(ByVal QueueHandle As HSPFILEQ,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal Section As PCWSTR) As BOOL
SetupQueueDelete(ByVal QueueHandle As HSPFILEQ,ByVal PathPart1 As PCWSTR,ByVal PathPart2 As PCWSTR) As BOOL
SetupDiGetDriverInstallParams(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_W,ByVal DriverInstallParams As PSP_DRVINSTALL_PARAMS) As BOOL
SetupOpenAppendInfFile(ByVal FileName As PCSTR,ByVal ByReffHandle As HINF,ByVal ErrorLine As PUINT) As BOOL
SetupDiClassGuidsFromNameEx(ByVal ClassName As PCSTR,ByVal ClassGuidList As LPGUID,ByVal ClassGuidListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As BOOL
SetupDiClassGuidsFromName(ByVal ClassName As PCSTR,ByVal ClassGuidList As LPGUID,ByVal ClassGuidListSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiBuildClassInfoListEx(ByVal Flags As DWORD,ByVal ClassGuidList As LPGUID,ByVal ClassGuidListSize As DWORD,ByVal RequiredSize As PDWORD,ByVal MachineName As PCSTR,ByVal Reserved As PVOID) As BOOL
SetupDeleteError(ByVal hwndParent As HWND,ByVal DialogTitle As PCSTR,ByVal File As PCSTR,ByVal Win32ErrorCode As UINT,ByVal Style As DWORD) As UINT
SetupDefaultQueueCallback(ByVal Context As PVOID,ByVal Notification As UINT,ByVal Param1 As UINT_PTR,ByVal Param2 As UINT_PTR) As UINT
SetupDecompressOrCopyFile(ByVal SourceFileName As PCSTR,ByVal TargetFileName As PCSTR,ByVal CompressionType As PUINT) As DWORD
SetupCreateDiskSpaceList(ByVal Reserved1 As PVOID,ByVal Reserved2 As DWORD,ByVal Flags As UINT) As HDSKSPC
SetupCopyOEMInf(ByVal SourceInfFileName As PCSTR,ByVal OEMSourceMediaLocation As PCSTR,ByVal OEMSourceMediaType As DWORD,ByVal CopyStyle As DWORD,ByVal DestinationInfFileName As PSTR,ByVal DestinationInfFileNameSize As DWORD,ByVal RequiredSize As PDWORD,ByVal DestinationInfFileNameComponent As PSTR PTR) As BOOL
SetupCopyError(ByVal hwndParent As HWND,ByVal DialogTitle As PCSTR,ByVal DiskName As PCSTR,ByVal PathToSource As PCSTR,ByVal SourceFile As PCSTR,ByVal TargetPathFile As PCSTR,ByVal Win32ErrorCode As UINT,ByVal Style As DWORD,ByVal PathBuffer As PSTR,ByVal PathBufferSize As DWORD,ByVal PathRequiredSize As PDWORD) As UINT
SetupCommitFileQueue(ByVal Owner As HWND,ByVal QueueHandle As HSPFILEQ,ByVal MsgHandler As PSP_FILE_CALLBACK_A,ByVal Context As PVOID) As BOOL
SetupBackupError(ByVal hwndParent As HWND,ByVal DialogTitle As PCSTR,ByVal BackupFile As PCSTR,ByVal TargetFile As PCSTR,ByVal Win32ErrorCode As UINT,ByVal Style As DWORD) As UINT
SetupGetSourceInfo(ByVal ByReffHandle As HINF,ByVal SourceId As UINT,ByVal ByValfoDesired As UINT,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetStringField(ByVal Context As PINFCONTEXT,ByVal FieldIndex As DWORD,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupGetTargetPath(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal Section As PCWSTR,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupInitializeFileLog(ByVal LogFileName As PCWSTR,ByVal Flags As DWORD) As HSPFILELOG
SetupAdjustDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal DriveRoot As LPCSTR,ByVal Amount As LONGLONG,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupCloseInfFile(ByVal ByReffHandle As HINF) 
SetupCloseLog() 
SetupTermDefaultQueueCallback(ByVal Context As PVOID) 
SetupAddToSourceList(ByVal Flags As DWORD,ByVal Source As PCSTR) As BOOL
SetupAddToDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal TargetFilespec As PCSTR,ByVal FileSize As LONGLONG,ByVal Operation As UINT,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupAddSectionToDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal SectionName As PCSTR,ByVal Operation As UINT,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupAddInstallSectionToDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ByReffHandle As HINF,ByVal LayoutInfHandle As HINF,ByVal SectionName As PCSTR,ByVal Reserved1 As PVOID,ByVal Reserved2 As UINT) As BOOL
SetupSetSourceList(ByVal Flags As DWORD,ByVal SourceList As PCWSTR PTR,ByVal SourceCount As UINT) As BOOL
SetupSetPlatformPathOverride(ByVal Override As PCWSTR) As BOOL
SetupSetFileQueueAlternatePlatform(ByVal QueueHandle As HSPFILEQ,ByVal AlternatePlatformInfo As PSP_ALTPLATFORM_INFO,ByVal AlternateDefaultCatalogFile As PCWSTR) As BOOL
SetupSetDirectoryIdEx(ByVal ByReffHandle As HINF,ByVal Id As DWORD,ByVal Directory As PCWSTR,ByVal Flags As DWORD,ByVal Reserved1 As DWORD,ByVal Reserved2 As PVOID) As BOOL
SetupDiGetDriverInfoDetail(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DriverInfoData As PSP_DRVINFO_DATA_W,ByVal DriverInfoDetailData As PSP_DRVINFO_DETAIL_DATA_W,ByVal DriverInfoDetailDataSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupInstallFile(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal SourceFile As PCWSTR,ByVal SourcePathRoot As PCWSTR,ByVal DestinationName As PCWSTR,ByVal CopyStyle As DWORD,ByVal CopyMsgHandler As PSP_FILE_CALLBACK_W,ByVal Context As PVOID) As BOOL
SetupDiGetDeviceRegistryProperty(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Property As DWORD,ByVal PropertyRegDataType As PDWORD,ByVal PropertyBuffer As PBYTE,ByVal PropertyBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupInstallFileEx(ByVal ByReffHandle As HINF,ByVal ByReffContext As PINFCONTEXT,ByVal SourceFile As PCWSTR,ByVal SourcePathRoot As PCWSTR,ByVal DestinationName As PCWSTR,ByVal CopyStyle As DWORD,ByVal CopyMsgHandler As PSP_FILE_CALLBACK_W,ByVal Context As PVOID,ByVal FileWasInUse As PBOOL) As BOOL
SetupInstallFilesFromInfSection(ByVal ByReffHandle As HINF,ByVal LayoutInfHandle As HINF,ByVal FileQueue As HSPFILEQ,ByVal SectionName As PCWSTR,ByVal SourceRootPath As PCWSTR,ByVal CopyFlags As UINT) As BOOL
SetupInstallFromInfSection(ByVal Owner As HWND,ByVal ByReffHandle As HINF,ByVal SectionName As PCWSTR,ByVal Flags As UINT,ByVal RelativeKeyRoot As HKEY,ByVal SourceRootPath As PCWSTR,ByVal CopyFlags As UINT,ByVal MsgHandler As PSP_FILE_CALLBACK_W,ByVal Context As PVOID,ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupInstallServicesFromInfSection(ByVal ByReffHandle As HINF,ByVal SectionName As PCWSTR,ByVal Flags As DWORD) As BOOL
SetupQueueCopy(ByVal QueueHandle As HSPFILEQ,ByVal SourceRootPath As PCWSTR,ByVal SourcePath As PCWSTR,ByVal SourceFilename As PCWSTR,ByVal SourceDescription As PCWSTR,ByVal SourceTagfile As PCWSTR,ByVal TargetDirectory As PCWSTR,ByVal TargetFilename As PCWSTR,ByVal CopyStyle As DWORD) As BOOL
SetupInstallServicesFromInfSectionEx(ByVal ByReffHandle As HINF,ByVal SectionName As PCWSTR,ByVal Flags As DWORD,ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal Reserved1 As PVOID,ByVal Reserved2 As PVOID) As BOOL
SetupDiGetDeviceInterfaceDetail(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInterfaceData As PSP_DEVICE_INTERFACE_DATA,ByVal DeviceInterfaceDetailData As PSP_DEVICE_INTERFACE_DETAIL_DATA_W,ByVal DeviceInterfaceDetailDataSize As DWORD,ByVal RequiredSize As PDWORD,ByVal DeviceInfoData As PSP_DEVINFO_DATA) As BOOL
SetupSetDirectoryId(ByVal ByReffHandle As HINF,ByVal Id As DWORD,ByVal Directory As PCWSTR) As BOOL
SetupQueryInfVersionInformation(ByVal ByReffInformation As PSP_INF_INFORMATION,ByVal ByValfIndex As UINT,ByVal Key As PSTR,ByVal ReturnBuffer As PSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupDiGetDeviceInstanceId(ByVal DeviceInfoSet As HDEVINFO,ByVal DeviceInfoData As PSP_DEVINFO_DATA,ByVal DeviceInstanceId As PWSTR,ByVal DeviceInstanceIdSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupQueueCopyIndirect(ByVal CopyParams As PSP_FILE_COPY_PARAMS_W) As BOOL
SetupQueueCopySection(ByVal QueueHandle As HSPFILEQ,ByVal SourceRootPath As PCWSTR,ByVal ByReffHandle As HINF,ByVal ListInfHandle As HINF,ByVal Section As PCWSTR,ByVal CopyStyle As DWORD) As BOOL
SetupQueueDefaultCopy(ByVal QueueHandle As HSPFILEQ,ByVal ByReffHandle As HINF,ByVal SourceRootPath As PCWSTR,ByVal SourceFilename As PCWSTR,ByVal TargetFilename As PCWSTR,ByVal CopyStyle As DWORD) As BOOL
SetupQueryInfOriginalFileInformation(ByVal ByReffInformation As PSP_INF_INFORMATION,ByVal ByValfIndex As UINT,ByVal AlternatePlatformInfo As PSP_ALTPLATFORM_INFO,ByVal OriginalFileInfo As PSP_ORIGINAL_FILE_INFO_W) As BOOL
SetupQueryInfFileInformation(ByVal ByReffInformation As PSP_INF_INFORMATION,ByVal ByValfIndex As UINT,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupQueryFileLog(ByVal FileLogHandle As HSPFILELOG,ByVal LogSectionName As PCWSTR,ByVal TargetFilename As PCWSTR,ByVal DesiredInfo As SetupFileLogInfo,ByVal DataOut As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupQueryDrivesInDiskSpaceList(ByVal DiskSpace As HDSKSPC,ByVal ReturnBuffer As PWSTR,ByVal ReturnBufferSize As DWORD,ByVal RequiredSize As PDWORD) As BOOL
SetupQuery(ByVal As DWORD,ByVal As PCWSTR PTR PTR,ByVal As PUINT) As BOOL
SetupPromptForDisk(ByVal hwndParent As HWND,ByVal DialogTitle As PCWSTR,ByVal DiskName As PCWSTR,ByVal PathToSource As PCWSTR,ByVal FileSought As PCWSTR,ByVal TagFile As PCWSTR,ByVal DiskPromptStyle As DWORD,ByVal PathBuffer As PWSTR,ByVal PathBufferSize As DWORD,ByVal PathRequiredSize As PDWORD) As UINT
SetupOpenInfFile(ByVal FileName As PCWSTR,ByVal ByValfClass As PCWSTR,ByVal ByValfStyle As DWORD,ByVal ErrorLine As PUINT) As HINF
SetupIterateCabinet(ByVal CabinetFile As PCWSTR,ByVal Reserved As DWORD,ByVal MsgHandler As PSP_FILE_CALLBACK_W,ByVal Context As PVOID) As BOOL
SetupLogError(ByVal MessageString As LPCWSTR,ByVal Severity As DWORD) As BOOL
SetVolumeLabel(ByVal lpRootPathName As LPCSTR,ByVal lpVolumeName As LPCSTR) As BOOL
SetViewportExtEx(ByVal hdc As HDC,ByVal nX As Integer,ByVal nY As Integer,ByVal lpSize As LPSIZE) As BOOL
SetViewportOrgEx(ByVal hdc As HDC,ByVal nX As Integer,ByVal nY As Integer,ByVal lpPoint As LPPOINT) As BOOL
SetVolumeMountPoint(ByVal lpszVolumeMountPoint As LPCSTR,ByVal lpszVolumeName As LPCSTR) As BOOL
SetVolumeLabel(ByVal lpRootPathName As LPCWSTR,ByVal lpVolumeName As LPCWSTR) As BOOL
SetVolumeMountPoint(ByVal lpszVolumeMountPoint As LPCWSTR,ByVal lpszVolumeName As LPCWSTR) As BOOL
SetWorldTransform(ByVal hdc As HDC,ByVal lpXform As XFORM PTR) As BOOL
SetWindowText(ByVal hwnd As HWND,ByVal lpString As LPCSTR) As BOOL
SetWindowTheme(ByVal As HWND,ByVal As LPCWSTR,ByVal As LPCWSTR) As HRESULT
SetWindowsHookEx(ByVal idHook As Integer,ByVal lpfn As HOOKPROC,ByVal hmod As HINSTANCE,ByVal dwThreadId As DWORD) As HHOOK
SetWindowText(ByVal hwnd As HWND,ByVal lpString As LPCWSTR) As BOOL
SetWindowLong(ByVal hwnd As HWND,ByVal nIndex As Integer,ByVal dwNewLong As LONG) As LONG
SetWaitableTimer(ByVal hTimer As HANDLE,ByVal lpDueTime As LARGE_INTEGER PTR,ByVal lPeriod As LONG,ByVal pfnCompletionRoutine As PTIMERAPCROUTINE,ByVal lpArgToCompletionRoutine As PVOID,ByVal fResume As BOOL) As BOOL
SetWindowExtEx(ByVal hdc As HDC,ByVal nX As Integer,ByVal nY As Integer,ByVal lpSize As LPSIZE) As BOOL
SetWindowOrgEx(ByVal hdc As HDC,ByVal nX As Integer,ByVal nY As Integer,ByVal lpPoint As LPPOINT) As BOOL
SetWinMetaFileBits(ByVal cbBuffer As UINT,ByVal lpbBuffer As BYTE PTR,ByVal hdcRef As HDC,ByVal lpmfp As METAFILEPICT PTR) As HENHMETAFILE
SetWindowContextHelpId(ByVal hWnd As HWND,ByVal dw As DWORD) As BOOL
SetWindowsHook(ByVal nFilterType As Integer,ByVal pfnFilterProc As HOOKPROC) As HHOOK
SetWindowsHookEx(ByVal idHook As Integer,ByVal lpfn As HOOKPROC,ByVal hmod As HINSTANCE,ByVal dwThreadId As DWORD) As HHOOK
SetWindowsHook(ByVal nFilterType As Integer,ByVal pfnFilterProc As HOOKPROC) As HHOOK
SetWindowLong(ByVal hwnd As HWND,ByVal nIndex As Integer,ByVal dwNewLong As LONG) As LONG
SetWindowWord(ByVal hwnd As HWND,ByVal nIndex As Integer,ByVal wNewWord As WORD) As WORD
SetWindowRgn(ByVal hWnd As HWND,ByVal hRgn As HRGN,ByVal bRedraw As BOOL) As Integer
SetWindowPos(ByVal hwnd As HWND,ByVal hWndInsertAfter As HWND,ByVal x As Integer,ByVal y As Integer,ByVal cx As Integer,ByVal cy As Integer,ByVal wFlags As UINT) As BOOL
SetWindowPlacement(ByVal hWnd As HWND,ByVal lpwndpl As WINDOWPLACEMENT PTR) As BOOL
SHAddToRecentDocs(ByVal uFlags As UINT,ByVal pv As PCVOID) 
SHAppBarMessage(ByVal dwMessage As DWORD,ByVal pData As PAPPBARDATA) As UINT
SHAutoComplete(ByVal hwndEdit As HWND,ByVal dwFlags As DWORD) As HRESULT
SHBindToParent(ByVal pidl As LPCITEMIDLIST,ByVal riid As IID PTR,ByVal ppv As any PTR PTR,ByVal ppidlLast As LPCITEMIDLIST PTR) As HRESULT
SHBrowseForFolder(ByVal lpbi As PBROWSEINFOA) As LPITEMIDLIST
SHBrowseForFolder(ByVal lpbi As PBROWSEINFOW) As LPITEMIDLIST
SHChangeNotify(ByVal wEventId As LONG,ByVal uFlags As UINT,ByVal dwItem1 As PCVOID,ByVal dwItem2 As PCVOID) 
SHCoCreateInstance(ByVal As LPCWSTR,ByVal As CLSID PTR,ByVal As IUnknown PTR,ByVal As IID PTR,ByVal As any PTR PTR) As HRESULT
SHCopyKey(ByVal hkeySrc As HKEY,ByVal szSrcSubKey As LPCSTR,ByVal hkeyDest As HKEY,ByVal fReserved As DWORD) As DWORD
SHCopyKey(ByVal hkeySrc As HKEY,ByVal szSrcSubKey As LPCWSTR,ByVal hkeyDest As HKEY,ByVal fReserved As DWORD) As DWORD
SHCreateStreamOnFile(ByVal pszFile As LPCWSTR,ByVal grfMode As DWORD,ByVal ppstm As IStream PTR PTR) As HRESULT
SHCreateDirectoryEx(ByVal hwnd As HWND,ByVal pszPath As LPCWSTR,ByVal psa As LPSECURITY_ATTRIBUTES) As INT_
SHCreateDirectoryEx(ByVal hwnd As HWND,ByVal pszPath As LPCSTR,ByVal psa As LPSECURITY_ATTRIBUTES) As INT_
SHCreateShellPalette(ByVal hdc As HDC) As HPALETTE
SHCreateStreamOnFile(ByVal pszFile As LPCSTR,ByVal grfMode As DWORD,ByVal ppstm As IStream PTR PTR) As HRESULT
SHCreateThread(ByVal pfnThreadProc As LPTHREAD_START_ROUTINE,ByVal pData As any PTR,ByVal dwFlags As DWORD,ByVal pfnCallback As LPTHREAD_START_ROUTINE) As BOOL
SHDeleteEmptyKey(ByVal hkey As HKEY,ByVal pszSubKey As LPCWSTR) As DWORD
SHDeleteValue(ByVal hkey As HKEY,ByVal pszSubKey As LPCSTR,ByVal pszValue As LPCSTR) As DWORD
SHDeleteEmptyKey(ByVal hkey As HKEY,ByVal pszSubKey As LPCSTR) As DWORD
SHDeleteValue(ByVal hkey As HKEY,ByVal pszSubKey As LPCWSTR,ByVal pszValue As LPCWSTR) As DWORD
SHDeleteKey(ByVal hkey As HKEY,ByVal pszSubKey As LPCWSTR) As DWORD
SHDeleteKey(ByVal hkey As HKEY,ByVal pszSubKey As LPCSTR) As DWORD
ShellAbout(ByVal hwnd As HWND,ByVal szApp As LPCWSTR,ByVal szOtherStuff As LPCWSTR,ByVal hIcon As HICON) As Integer
ShellExecuteEx(ByVal lpExecInfo As LPSHELLEXECUTEINFOA) As BOOL
ShellAbout(ByVal hwnd As HWND,ByVal szApp As LPCSTR,ByVal szOtherStuff As LPCSTR,ByVal hIcon As HICON) As Integer
ShellExecute(ByVal hwnd As HWND,ByVal lpOperation As LPCSTR,ByVal lpFile As LPCSTR,ByVal lpParameters As LPCSTR,ByVal lpDirectory As LPCSTR,ByVal nCmdShow As INT_) As HINSTANCE
Shell_NotifyIcon(ByVal dwMessage As DWORD,ByVal lpData As PNOTIFYICONDATAA) As BOOL
ShellExecuteEx(ByVal lpExecInfo As LPSHELLEXECUTEINFOW) As BOOL
ShellExecute(ByVal hwnd As HWND,ByVal lpOperation As LPCWSTR,ByVal lpFile As LPCWSTR,ByVal lpParameters As LPCWSTR,ByVal lpDirectory As LPCWSTR,ByVal nCmdShow As INT_) As HINSTANCE
Shell_NotifyIcon(ByVal dwMessage As DWORD,ByVal lpData As PNOTIFYICONDATAW) As BOOL
SHEmptyRecycleBin(ByVal hwnd As HWND,ByVal pszRootPath As LPCWSTR,ByVal dwFlags As DWORD) As HRESULT
SHEmptyRecycleBin(ByVal hwnd As HWND,ByVal pszRootPath As LPCSTR,ByVal dwFlags As DWORD) As HRESULT
SHEnumValue(ByVal hkey As HKEY,ByVal dwIndex As DWORD,ByVal pszValueName As LPWSTR,ByVal pcchValueName As LPDWORD,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD) As DWORD
SHEnumKeyEx(ByVal hkey As HKEY,ByVal dwIndex As DWORD,ByVal pszName As LPSTR,ByVal pcchName As LPDWORD) As DWORD
SHEnumValue(ByVal hkey As HKEY,ByVal dwIndex As DWORD,ByVal pszValueName As LPSTR,ByVal pcchValueName As LPDWORD,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD) As DWORD
SHEnumKeyEx(ByVal hkey As HKEY,ByVal dwIndex As DWORD,ByVal pszName As LPWSTR,ByVal pcchName As LPDWORD) As DWORD
SHFileOperation(ByVal lpFileOp As LPSHFILEOPSTRUCTW) As Integer
SHFileOperation(ByVal lpFileOp As LPSHFILEOPSTRUCTA) As Integer
SHFormatDrive(ByVal As HWND,ByVal As UINT,ByVal As UINT,ByVal As UINT) As DWORD
SHFreeNameMappings(ByVal hNameMappings As HANDLE) 
SHGetFolderPath(ByVal hwnd As HWND,ByVal csidl As Integer,ByVal hToken As HANDLE,ByVal dwFlags As DWORD,ByVal pszPath As LPWSTR) As HRESULT
SHGetSpecialFolderLocation(ByVal hwnd As HWND,ByVal csidl As Integer,ByVal ppidl As LPITEMIDLIST PTR) As HRESULT
SHGetSpecialFolderPath(ByVal hwnd As HWND,ByVal pszPath As LPWSTR,ByVal csidl As Integer,ByVal fCreate As BOOL) As BOOL
SHGetMalloc(ByVal ppMalloc As LPMALLOC PTR) As HRESULT
SHGetThreadRef(ByVal ppunk As IUnknown PTR PTR) As HRESULT
SHGetSpecialFolderPath(ByVal hwnd As HWND,ByVal pszPath As LPSTR,ByVal csidl As Integer,ByVal fCreate As BOOL) As BOOL
SHGetDesktopFolder(ByVal ppshf As LPSHELLFOLDER PTR) As HRESULT
SHGetPathFromIDList(ByVal pidl As LPCITEMIDLIST,ByVal pszPath As LPSTR) As BOOL
SHGetInstanceExplorer(ByVal ppunk As IUnknown PTR PTR) As HRESULT
SHGetDataFromIDList(ByVal psf As LPSHELLFOLDER,ByVal pidl As LPCITEMIDLIST,ByVal nFormat As Integer,ByVal pv As PVOID,ByVal cb As Integer) As HRESULT
SHGetValue(ByVal hkey As HKEY,ByVal pszSubKey As LPCWSTR,ByVal pszValue As LPCWSTR,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD) As DWORD
SHGetFolderPath(ByVal hwnd As HWND,ByVal csidl As Integer,ByVal hToken As HANDLE,ByVal dwFlags As DWORD,ByVal pszPath As LPSTR) As HRESULT
SHGetFolderPathAndSubDir(ByVal As HWND,ByVal As Integer,ByVal As HANDLE,ByVal As DWORD,ByVal As LPCSTR,ByVal As LPSTR) As HRESULT
SHGetPathFromIDList(ByVal pidl As LPCITEMIDLIST,ByVal pszPath As LPWSTR) As BOOL
SHGetFileInfo(ByVal pszPath As LPCSTR,ByVal dwFileAttributes As DWORD,ByVal psfi As SHFILEINFOA PTR,ByVal cbFileInfo As UINT,ByVal uFlags As UINT) As DWORD
SHGetValue(ByVal hkey As HKEY,ByVal pszSubKey As LPCSTR,ByVal pszValue As LPCSTR,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD) As DWORD
SHGetFileInfo(ByVal pszPath As LPCWSTR,ByVal dwFileAttributes As DWORD,ByVal psfi As SHFILEINFOW PTR,ByVal cbFileInfo As UINT,ByVal uFlags As UINT) As DWORD
SHGetSettings(ByVal lpsfs As LPSHELLFLAGSTATE,ByVal dwMask As DWORD) 
SHGetSetSettings(ByVal As LPSHELLSTATE,ByVal As DWORD,ByVal As BOOL) 
SHGetFolderLocation(ByVal hwnd As HWND,ByVal csidl As Integer,ByVal hToken As HANDLE,ByVal dwFlags As DWORD,ByVal ppidl As LPITEMIDLIST PTR) As HRESULT
SHGetFolderPathAndSubDir(ByVal As HWND,ByVal As Integer,ByVal As HANDLE,ByVal As DWORD,ByVal As LPCWSTR,ByVal As LPWSTR) As HRESULT
SHGetDataFromIDList(ByVal psf As LPSHELLFOLDER,ByVal pidl As LPCITEMIDLIST,ByVal nFormat As Integer,ByVal pv As PVOID,ByVal cb As Integer) As HRESULT
SHLoadInProc(ByVal rclsid As CLSID PTR) As HRESULT
SHOpenRegStream2(ByVal hkey As HKEY,ByVal pszSubkey As LPCWSTR,ByVal pszValue As LPCWSTR,ByVal grfMode As DWORD) As IStream PTR
SHOpenRegStream(ByVal hkey As HKEY,ByVal pszSubkey As LPCSTR,ByVal pszValue As LPCSTR,ByVal grfMode As DWORD) As IStream PTR
SHOpenRegStream2(ByVal hkey As HKEY,ByVal pszSubkey As LPCSTR,ByVal pszValue As LPCSTR,ByVal grfMode As DWORD) As IStream PTR
SHOpenRegStream(ByVal hkey As HKEY,ByVal pszSubkey As LPCWSTR,ByVal pszValue As LPCWSTR,ByVal grfMode As DWORD) As IStream PTR
short_array_from_ndr(ByVal SourceMessage As PRPC_MESSAGE,ByVal LowerIndex As uinteger,ByVal UpperIndex As uinteger,ByVal Target As ushort PTR) 
short_from_ndr_temp(ByVal source As ubyte PTR PTR,ByVal target As ushort PTR,ByVal format As uinteger) 
short_from_ndr(ByVal source As PRPC_MESSAGE,ByVal target As ushort PTR) 
ShowHideMenuCtl(ByVal hWnd As HWND,ByVal uFlags As UINT,ByVal lpInfo As PINT) As BOOL
ShowOwnedPopups(ByVal hwnd As HWND,ByVal fBoolean As BOOL) As BOOL
ShowCaret(ByVal hwnd As HWND) As BOOL
ShowScrollBar(ByVal hwnd As HWND,ByVal wBar As Integer,ByVal bShow As BOOL) As BOOL
ShowWindowAsync(ByVal hWnd As HWND,ByVal nCmdShow As Integer) As BOOL
ShowWindow(ByVal hwnd As HWND,ByVal nCmdShow As Integer) As BOOL
ShowCursor(ByVal bShow As BOOL) As Integer
SHQueryRecycleBin(ByVal pszRootPath As LPCSTR,ByVal pSHQueryRBInfo As LPSHQUERYRBINFO) As HRESULT
SHQueryValueEx(ByVal hkey As HKEY,ByVal pszValue As LPCWSTR,ByVal pdwReserved As LPDWORD,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD) As DWORD
SHQueryInfoKey(ByVal hkey As HKEY,ByVal pcSubKeys As LPDWORD,ByVal pcchMaxSubKeyLen As LPDWORD,ByVal pcValues As LPDWORD,ByVal pcchMaxValueNameLen As LPDWORD) As DWORD
SHQueryRecycleBin(ByVal pszRootPath As LPCWSTR,ByVal pSHQueryRBInfo As LPSHQUERYRBINFO) As HRESULT
SHQueryValueEx(ByVal hkey As HKEY,ByVal pszValue As LPCSTR,ByVal pdwReserved As LPDWORD,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD) As DWORD
SHRegQueryInfoUSKey(ByVal hUSKey As HUSKEY,ByVal pcSubKeys As LPDWORD,ByVal pcchMaxSubKeyLen As LPDWORD,ByVal pcValues As LPDWORD,ByVal pcchMaxValueNameLen As LPDWORD) As DWORD
SHRegCreateUSKey(ByVal pszPath As LPCWSTR,ByVal samDesired As REGSAM,ByVal hRelativeUSKey As HUSKEY,ByVal phNewUSKey As PHUSKEY,ByVal dwFlags As DWORD) As LONG
SHRegOpenUSKey(ByVal pszPath As LPCWSTR,ByVal samDesired As REGSAM,ByVal hRelativeUSKey As HUSKEY,ByVal phNewUSKey As PHUSKEY,ByVal fIgnoreHKCU As BOOL) As LONG
SHRegGetUSValue(ByVal pszSubKey As LPCSTR,ByVal pszValue As LPCSTR,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD,ByVal fIgnoreHKCU As BOOL,ByVal pvDefaultData As LPVOID,ByVal dwDefaultDataSize As DWORD) As LONG
SHRegCreateUSKey(ByVal pszPath As LPCSTR,ByVal samDesired As REGSAM,ByVal hRelativeUSKey As HUSKEY,ByVal phNewUSKey As PHUSKEY,ByVal dwFlags As DWORD) As LONG
SHRegOpenUSKey(ByVal pszPath As LPCSTR,ByVal samDesired As REGSAM,ByVal hRelativeUSKey As HUSKEY,ByVal phNewUSKey As PHUSKEY,ByVal fIgnoreHKCU As BOOL) As LONG
SHRegDeleteEmptyUSKey(ByVal hUSKey As HUSKEY,ByVal pszSubKey As LPCSTR,ByVal delRegFlags As SHREGDEL_FLAGS) As LONG
SHRegQueryUSValue(ByVal hUSKey As HUSKEY,ByVal pszValue As LPCSTR,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD,ByVal fIgnoreHKCU As BOOL,ByVal pvDefaultData As LPVOID,ByVal dwDefaultDataSize As DWORD) As LONG
SHRegDeleteUSValue(ByVal hUSKey As HUSKEY,ByVal pszValue As LPCSTR,ByVal delRegFlags As SHREGDEL_FLAGS) As LONG
SHRegSetUSValue(ByVal pszSubKey As LPCWSTR,ByVal pszValue As LPCWSTR,ByVal dwType As DWORD,ByVal pvData As LPVOID,ByVal cbData As DWORD,ByVal dwFlags As DWORD) As LONG
SHRegSetPath(ByVal hKey As HKEY,ByVal pcszSubKey As LPCSTR,ByVal pcszValue As LPCSTR,ByVal pcszPath As LPCSTR,ByVal dwFlags As DWORD) As DWORD
SHRegWriteUSValue(ByVal hUSKey As HUSKEY,ByVal pszValue As LPCWSTR,ByVal dwType As DWORD,ByVal pvData As LPVOID,ByVal cbData As DWORD,ByVal dwFlags As DWORD) As LONG
SHRegGetUSValue(ByVal pszSubKey As LPCWSTR,ByVal pszValue As LPCWSTR,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD,ByVal fIgnoreHKCU As BOOL,ByVal pvDefaultData As LPVOID,ByVal dwDefaultDataSize As DWORD) As LONG
SHRegDeleteEmptyUSKey(ByVal hUSKey As HUSKEY,ByVal pszSubKey As LPCWSTR,ByVal delRegFlags As SHREGDEL_FLAGS) As LONG
SHRegDeleteUSValue(ByVal hUSKey As HUSKEY,ByVal pszValue As LPCWSTR,ByVal delRegFlags As SHREGDEL_FLAGS) As LONG
SHRegEnumUSKey(ByVal hUSKey As HUSKEY,ByVal dwIndex As DWORD,ByVal pszName As LPWSTR,ByVal pcchName As LPDWORD,ByVal enumRegFlags As SHREGENUM_FLAGS) As DWORD
SHRegSetUSValue(ByVal pszSubKey As LPCSTR,ByVal pszValue As LPCSTR,ByVal dwType As DWORD,ByVal pvData As LPVOID,ByVal cbData As DWORD,ByVal dwFlags As DWORD) As LONG
SHRegWriteUSValue(ByVal hUSKey As HUSKEY,ByVal pszValue As LPCSTR,ByVal dwType As DWORD,ByVal pvData As LPVOID,ByVal cbData As DWORD,ByVal dwFlags As DWORD) As LONG
SHRegGetPath(ByVal hKey As HKEY,ByVal pcszSubKey As LPCSTR,ByVal pcszValue As LPCSTR,ByVal pszPath As LPSTR,ByVal dwFlags As DWORD) As DWORD
SHRegGetBoolUSValue(ByVal pszSubKey As LPCSTR,ByVal pszValue As LPCSTR,ByVal fIgnoreHKCU As BOOL,ByVal fDefault As BOOL) As BOOL
SHRegCloseUSKey(ByVal hUSKey As HUSKEY) As DWORD
SHRegEnumUSValue(ByVal hUSkey As HUSKEY,ByVal dwIndex As DWORD,ByVal pszValueName As LPSTR,ByVal pcchValueName As LPDWORD,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD,ByVal enumRegFlags As SHREGENUM_FLAGS) As DWORD
SHRegQueryUSValue(ByVal hUSKey As HUSKEY,ByVal pszValue As LPCWSTR,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD,ByVal fIgnoreHKCU As BOOL,ByVal pvDefaultData As LPVOID,ByVal dwDefaultDataSize As DWORD) As LONG
SHRegEnumUSValue(ByVal hUSkey As HUSKEY,ByVal dwIndex As DWORD,ByVal pszValueName As LPWSTR,ByVal pcchValueName As LPDWORD,ByVal pdwType As LPDWORD,ByVal pvData As LPVOID,ByVal pcbData As LPDWORD,ByVal enumRegFlags As SHREGENUM_FLAGS) As DWORD
SHRegGetBoolUSValue(ByVal pszSubKey As LPCWSTR,ByVal pszValue As LPCWSTR,ByVal fIgnoreHKCU As BOOL,ByVal fDefault As BOOL) As BOOL
SHRegGetPath(ByVal hKey As HKEY,ByVal pcszSubKey As LPCWSTR,ByVal pcszValue As LPCWSTR,ByVal pszPath As LPWSTR,ByVal dwFlags As DWORD) As DWORD
SHRegSetPath(ByVal hKey As HKEY,ByVal pcszSubKey As LPCWSTR,ByVal pcszValue As LPCWSTR,ByVal pcszPath As LPCWSTR,ByVal dwFlags As DWORD) As DWORD
SHRegDuplicateHKey(ByVal hKey As HKEY) As HKEY
SHRegEnumUSKey(ByVal hUSKey As HUSKEY,ByVal dwIndex As DWORD,ByVal pszName As LPSTR,ByVal pcchName As LPDWORD,ByVal enumRegFlags As SHREGENUM_FLAGS) As DWORD
SHRegQueryInfoUSKey(ByVal hUSKey As HUSKEY,ByVal pcSubKeys As LPDWORD,ByVal pcchMaxSubKeyLen As LPDWORD,ByVal pcValues As LPDWORD,ByVal pcchMaxValueNameLen As LPDWORD) As DWORD
SHSetValue(ByVal hkey As HKEY,ByVal pszSubKey As LPCWSTR,ByVal pszValue As LPCWSTR,ByVal dwType As DWORD,ByVal pvData As LPCVOID,ByVal cbData As DWORD) As DWORD
SHSetValue(ByVal hkey As HKEY,ByVal pszSubKey As LPCSTR,ByVal pszValue As LPCSTR,ByVal dwType As DWORD,ByVal pvData As LPCVOID,ByVal cbData As DWORD) As DWORD
SHSetThreadRef(ByVal punk As IUnknown PTR) As HRESULT
SHSkipJunction(ByVal pbc As IBindCtx PTR,ByVal pclsid As CLSID PTR) As BOOL
SHStrDup(ByVal psz As LPCSTR,ByVal ppwsz As LPWSTR PTR) As HRESULT
SHStrDup(ByVal psz As LPCWSTR,ByVal ppwsz As LPWSTR PTR) As HRESULT
shutdown(ByVal s As SOCKET,ByVal how As Integer) As Integer
SignalObjectAndWait(ByVal hObjectToSignal As HANDLE,ByVal hObjectToWaitOn As HANDLE,ByVal dwMilliseconds As DWORD,ByVal bAlertable As BOOL) As DWORD
SizeofResource(ByVal hInstance As HINSTANCE,ByVal hResInfo As HRSRC) As DWORD
SleepEx(ByVal dwMilliseconds As DWORD,ByVal bAlertable As BOOL) As DWORD
Sleep_(ByVal As DWORD) 
SNB_free_xmit(ByVal As RemSNB PTR) 
SNB_free_inst(ByVal As SNB PTR) 
SNB_from_xmit(ByVal As RemSNB PTR,ByVal As SNB PTR) 
SNB_to_xmit(ByVal As SNB PTR,ByVal As RemSNB PTR PTR) 
sndPlaySound(ByVal lpszSoundName As LPCWSTR,ByVal uFlags As UINT) As BOOL
sndPlaySound(ByVal lpszSoundName As LPCSTR,ByVal uFlags As UINT) As BOOL
SnmpRecvMsg(ByVal session As HSNMP_SESSION,ByVal srcEntity As LPHSNMP_ENTITY,ByVal dstEntity As LPHSNMP_ENTITY,ByVal context As LPHSNMP_CONTEXT,ByVal PDU As LPHSNMP_PDU) As SNMPAPI_STATUS
SnmpSetEntityInfo(ByVal As HSNMP_ENTITY,ByVal As smiLPENTITYINFO) As SNMPAPI_STATUS
SnmpUtilOctetsCmp(ByVal pOctets1 As AsnOctetString PTR,ByVal pOctets2 As AsnOctetString PTR) As SNMPAPI
SnmpUtilMemReAlloc(ByVal pMem As LPVOID,ByVal nBytes As UINT) As LPVOID
SnmpEntityToStr(ByVal entity As HSNMP_ENTITY,ByVal size As smiUINT32,ByVal sstring As LPSTR) As SNMPAPI_STATUS
SnmpUtilVarBindListCpy(ByVal pVblDst As SnmpVarBindList PTR,ByVal pVblSrc As SnmpVarBindList PTR) As SNMPAPI
SnmpFreeEntityInfo(ByVal As smiLPENTITYINFO) As SNMPAPI_STATUS
SnmpEncodeMsg(ByVal session As HSNMP_SESSION,ByVal srcEntity As HSNMP_ENTITY,ByVal dstEntity As HSNMP_ENTITY,ByVal context As HSNMP_CONTEXT,ByVal PDU As HSNMP_PDU,ByVal msgBufDesc As smiLPOCTETS) As SNMPAPI_STATUS
SnmpDuplicateVbl(ByVal session As HSNMP_SESSION,ByVal vbl As HSNMP_VBL) As HSNMP_VBL
SnmpDuplicatePdu(ByVal session As HSNMP_SESSION,ByVal PDU As HSNMP_PDU) As HSNMP_PDU
SnmpFreeContext(ByVal context As HSNMP_CONTEXT) As SNMPAPI_STATUS
SnmpFreeDescriptor(ByVal syntax As smiUINT32,ByVal descriptor As smiLPOPAQUE) As SNMPAPI_STATUS
SnmpGetEntityInfo(ByVal As HSNMP_ENTITY,ByVal As smiLPENTITYINFO) As SNMPAPI_STATUS
SnmpUtilOidToA(ByVal As AsnObjectIdentifier PTR) As LPSTR
SnmpUtilOidNCmp(ByVal pOid1 As AsnObjectIdentifier PTR,ByVal pOid2 As AsnObjectIdentifier PTR,ByVal nSubIds As UINT) As SNMPAPI
SnmpCreateEntity(ByVal As HSNMP_SESSION,ByVal As smiLPENTITYINFO) As HSNMP_ENTITY
SnmpStrToOid(ByVal sstring As LPCSTR,ByVal dstOID As smiLPOID) As SNMPAPI_STATUS
SnmpUtilOidCpy(ByVal pOidDst As AsnObjectIdentifier PTR,ByVal pOidSrc As AsnObjectIdentifier PTR) As SNMPAPI
SnmpFreeEntity(ByVal entity As HSNMP_ENTITY) As SNMPAPI_STATUS
SnmpFreePdu(ByVal PDU As HSNMP_PDU) As SNMPAPI_STATUS
SnmpFreeVbl(ByVal vbl As HSNMP_VBL) As SNMPAPI_STATUS
SnmpUtilOidCmp(ByVal pOid1 As AsnObjectIdentifier PTR,ByVal pOid2 As AsnObjectIdentifier PTR) As SNMPAPI
SnmpUtilOidAppend(ByVal pOidDst As AsnObjectIdentifier PTR,ByVal pOidSrc As AsnObjectIdentifier PTR) As SNMPAPI
SnmpGetLastError(ByVal session As HSNMP_SESSION) As SNMPAPI_STATUS
SnmpGetPduData(ByVal PDU As HSNMP_PDU,ByVal PDU_type As smiLPINT,ByVal request_id As smiLPINT32,ByVal error_status As smiLPINT,ByVal error_index As smiLPINT,ByVal varbindlist As LPHSNMP_VBL) As SNMPAPI_STATUS
SnmpUtilOctetsNCmp(ByVal pOctets1 As AsnOctetString PTR,ByVal pOctets2 As AsnOctetString PTR,ByVal nChars As UINT) As SNMPAPI
SnmpUtilOctetsCpy(ByVal pOctetsDst As AsnOctetString PTR,ByVal pOctetsSrc As AsnOctetString PTR) As SNMPAPI
SnmpGetRetransmitMode(ByVal nRetransmitMode As smiLPUINT32) As SNMPAPI_STATUS
SnmpGetRetry(ByVal hEntity As HSNMP_ENTITY,ByVal nPolicyRetry As smiLPUINT32,ByVal nActualRetry As smiLPUINT32) As SNMPAPI_STATUS
SnmpStrToContext(ByVal session As HSNMP_SESSION,ByVal sstring As smiLPCOCTETS) As HSNMP_CONTEXT
SnmpGetTimeout(ByVal hEntity As HSNMP_ENTITY,ByVal nPolicyTimeout As smiLPTIMETICKS,ByVal nActualTimeout As smiLPTIMETICKS) As SNMPAPI_STATUS
SnmpStrToEntity(ByVal session As HSNMP_SESSION,ByVal sstring As LPCSTR) As HSNMP_ENTITY
SnmpCancelMsg(ByVal session As HSNMP_SESSION,ByVal reqId As smiINT32) As SNMPAPI_STATUS
SnmpGetTranslateMode(ByVal nTranslateMode As smiLPUINT32) As SNMPAPI_STATUS
SnmpCleanup() As SNMPAPI_STATUS
SnmpCreateContext(ByVal As HSNMP_SESSION,ByVal As smiLPCONTEXTINFO) As HSNMP_CONTEXT
SnmpGetVendorInfo(ByVal vendorInfo As smiLPVENDORINFO) As SNMPAPI_STATUS
SnmpClose(ByVal session As HSNMP_SESSION) As SNMPAPI_STATUS
SnmpContextToStr(ByVal context As HSNMP_CONTEXT,ByVal sstring As smiLPOCTETS) As SNMPAPI_STATUS
SnmpCountVbl(ByVal vbl As HSNMP_VBL) As SNMPAPI_STATUS
SnmpCreatePdu(ByVal session As HSNMP_SESSION,ByVal PDU_type As smiINT,ByVal request_id As smiINT32,ByVal error_status As smiINT,ByVal error_index As smiINT,ByVal varbindlist As HSNMP_VBL) As HSNMP_PDU
SnmpSvcSetLogLevel(ByVal nLogLevel As INT_) 
SnmpRegister(ByVal session As HSNMP_SESSION,ByVal srcEntity As HSNMP_ENTITY,ByVal dstEntity As HSNMP_ENTITY,ByVal context As HSNMP_CONTEXT,ByVal notification As smiLPCOID,ByVal state As smiUINT32) As SNMPAPI_STATUS
SnmpUtilAsnAnyFree(ByVal pAny As AsnAny PTR) 
SnmpUtilDbgPrint(ByVal nLogLevel As INT_,ByVal szFormat As LPSTR,...) 
SnmpUtilMemFree(ByVal pMem As LPVOID) 
SnmpUtilOctetsFree(ByVal pOctets As AsnOctetString PTR) 
SnmpUtilOidFree(ByVal pOid As AsnObjectIdentifier PTR) 
SnmpUtilPrintAsnAny(ByVal pAny As AsnAny PTR) 
SnmpUtilPrintOid(ByVal Oid As AsnObjectIdentifier PTR) 
SnmpUtilVarBindFree(ByVal pVb As SnmpVarBind PTR) 
SnmpUtilVarBindListFree(ByVal pVbl As SnmpVarBindList PTR) 
SnmpListen(ByVal hEntity As HSNMP_ENTITY,ByVal lStatus As SNMPAPI_STATUS) As SNMPAPI_STATUS
SnmpCreateSession(ByVal hwnd As HWND,ByVal wMsg As UINT,ByVal fCallBack As SNMPAPI_CALLBACK,ByVal lpClientData As LPVOID) As HSNMP_SESSION
SnmpMgrClose(ByVal session As LPSNMP_MGR_SESSION) As BOOL
SnmpStartup(ByVal nMajorVersion As smiLPUINT32,ByVal nMinorVersion As smiLPUINT32,ByVal nLevel As smiLPUINT32,ByVal nTranslateMode As smiLPUINT32,ByVal nRetransmitMode As smiLPUINT32) As SNMPAPI_STATUS
SnmpMgrCtl(ByVal session As LPSNMP_MGR_SESSION,ByVal dwCtlCode As DWORD,ByVal lpvInBuffer As LPVOID,ByVal cbInBuffer As DWORD,ByVal lpvOUTBuffer As LPVOID,ByVal cbOUTBuffer As DWORD,ByVal lpcbBytesReturned As LPDWORD) As BOOL
SnmpSetVb(ByVal vbl As HSNMP_VBL,ByVal index As smiUINT32,ByVal Name As smiLPCOID,ByVal Value As smiLPCVALUE) As SNMPAPI_STATUS
SnmpSetTranslateMode(ByVal nTranslateMode As smiUINT32) As SNMPAPI_STATUS
SnmpMgrGetTrap(ByVal enterprise As AsnObjectIdentifier PTR,ByVal IPAddress As AsnNetworkAddress PTR,ByVal genericTrap As AsnInteger32 PTR,ByVal specificTrap As AsnInteger32 PTR,ByVal timeStamp As AsnTimeticks PTR,ByVal variableBindings As SnmpVarBindList PTR) As BOOL
SnmpCreateVbl(ByVal session As HSNMP_SESSION,ByVal Name As smiLPCOID,ByVal Value As smiLPCVALUE) As HSNMP_VBL
SnmpDecodeMsg(ByVal session As HSNMP_SESSION,ByVal srcEntity As LPHSNMP_ENTITY,ByVal dstEntity As LPHSNMP_ENTITY,ByVal context As LPHSNMP_CONTEXT,ByVal PDU As LPHSNMP_PDU,ByVal msgBufDesc As smiLPCOCTETS) As SNMPAPI_STATUS
SnmpDeleteVb(ByVal vbl As HSNMP_VBL,ByVal index As smiUINT32) As SNMPAPI_STATUS
SnmpExtensionInit(ByVal dwUptimeReference As DWORD,ByVal phSubagentTrapEvent As HANDLE PTR,ByVal pFirstSupportedRegion As AsnObjectIdentifier PTR) As BOOL
SnmpExtensionInitEx(ByVal pNextSupportedRegion As AsnObjectIdentifier PTR) As BOOL
SnmpExtensionMonitor(ByVal As LPVOID) As BOOL
SnmpExtensionQuery(ByVal bPduType As BYTE,ByVal pVarBindList As SnmpVarBindList PTR,ByVal pErrorStatus As AsnInteger32 PTR,ByVal pErrorIndex As AsnInteger32 PTR) As BOOL
SnmpMgrGetTrapEx(ByVal enterprise As AsnObjectIdentifier PTR,ByVal agentAddress As AsnNetworkAddress PTR,ByVal sourceAddress As AsnNetworkAddress PTR,ByVal genericTrap As AsnInteger32 PTR,ByVal specificTrap As AsnInteger32 PTR,ByVal community As AsnOctetString PTR,ByVal timeStamp As AsnTimeticks PTR,ByVal variableBindings As SnmpVarBindList PTR) As BOOL
SnmpOidCompare(ByVal xOID As smiLPCOID,ByVal yOID As smiLPCOID,ByVal maxlen As smiUINT32,ByVal result As smiLPINT) As SNMPAPI_STATUS
SnmpOidCopy(ByVal srcOID As smiLPCOID,ByVal dstOID As smiLPOID) As SNMPAPI_STATUS
SnmpGetContextInfo(ByVal As HSNMP_CONTEXT,ByVal As smiLPCONTEXTINFO) As SNMPAPI_STATUS
SnmpMgrOidToStr(ByVal oid As AsnObjectIdentifier PTR,ByVal sstring As LPSTR PTR) As BOOL
SnmpMgrOpen(ByVal lpAgentAddress As LPSTR,ByVal lpAgentCommunity As LPSTR,ByVal nTimeOut As INT_,ByVal nRetries As INT_) As LPSNMP_MGR_SESSION
SnmpSetContextInfo(ByVal As HSNMP_CONTEXT,ByVal As smiLPCONTEXTINFO) As SNMPAPI_STATUS
SnmpFreeContextInfo(ByVal As smiLPCONTEXTINFO) As SNMPAPI_STATUS
SnmpPasswordToKey(ByVal As smiLPOCTETS,ByVal As smiINT32,ByVal As smiLPOCTETS) As SNMPAPI_STATUS
SnmpGetVb(ByVal vbl As HSNMP_VBL,ByVal index As smiUINT32,ByVal Name As smiLPOID,ByVal Value As smiLPVALUE) As SNMPAPI_STATUS
SnmpMgrRequest(ByVal session As LPSNMP_MGR_SESSION,ByVal requestType As BYTE,ByVal variableBindings As SnmpVarBindList PTR,ByVal errorStatus As AsnInteger32 PTR,ByVal errorIndex As AsnInteger32 PTR) As INT_
SnmpMgrStrToOid(ByVal sstring As LPSTR,ByVal oid As AsnObjectIdentifier PTR) As BOOL
SnmpUtilVarBindCpy(ByVal pVbDst As SnmpVarBind PTR,ByVal pVbSrc As SnmpVarBind PTR) As SNMPAPI
SnmpExtensionQueryEx(ByVal As DWORD,ByVal As DWORD,ByVal As SnmpVarBindList PTR,ByVal As AsnOctetString PTR,ByVal As AsnInteger32 PTR,ByVal As AsnInteger32 PTR) As BOOL
SnmpExtensionTrap(ByVal pEnterpriseOid As AsnObjectIdentifier PTR,ByVal pGenericTrapId As AsnInteger32 PTR,ByVal pSpecificTrapId As AsnInteger32 PTR,ByVal pTimeStamp As AsnTimeticks PTR,ByVal pVarBindList As SnmpVarBindList PTR) As BOOL
SnmpSvcGetUptime() As DWORD
SnmpUtilAsnAnyCpy(ByVal pAnyDst As AsnAny PTR,ByVal pAnySrc As AsnAny PTR) As SNMPAPI
SnmpMgrTrapListen(ByVal phTrapAvailable As HANDLE PTR) As BOOL
SnmpUtilIdsToA(ByVal As UINT PTR,ByVal As UINT) As LPSTR
SnmpOidToStr(ByVal srcOID As smiLPCOID,ByVal size As smiUINT32,ByVal sstring As LPSTR) As SNMPAPI_STATUS
SnmpUtilMemAlloc(ByVal nBytes As UINT) As LPVOID
SnmpSetTimeout(ByVal hEntity As HSNMP_ENTITY,ByVal nPolicyTimeout As smiTIMETICKS) As SNMPAPI_STATUS
SnmpOpen(ByVal hwnd As HWND,ByVal wMsg As UINT) As HSNMP_SESSION
SnmpExtensionClose() 
SnmpSetRetry(ByVal hEntity As HSNMP_ENTITY,ByVal nPolicyRetry As smiUINT32) As SNMPAPI_STATUS
SnmpSetRetransmitMode(ByVal nRetransmitMode As smiUINT32) As SNMPAPI_STATUS
SnmpSetPort(ByVal hEntity As HSNMP_ENTITY,ByVal nPort As UINT) As SNMPAPI_STATUS
SnmpSvcSetLogType(ByVal nLogType As INT_) 
SnmpSetPduData(ByVal PDU As HSNMP_PDU,ByVal PDU_type As smiINT PTR,ByVal request_id As smiINT32 PTR,ByVal non_repeaters As smiINT PTR,ByVal max_repetitions As smiINT PTR,ByVal varbindlist As HSNMP_VBL PTR) As SNMPAPI_STATUS
SnmpSendMsg(ByVal session As HSNMP_SESSION,ByVal srcEntity As HSNMP_ENTITY,ByVal dstEntity As HSNMP_ENTITY,ByVal context As HSNMP_CONTEXT,ByVal PDU As HSNMP_PDU) As SNMPAPI_STATUS
socket_(ByVal As Integer,ByVal As Integer,ByVal As Integer) As SOCKET
SplitSymbols(ByVal ImageName As LPSTR,ByVal SymbolsPath As LPSTR,ByVal SymbolFilePath As LPSTR,ByVal Flags As DWORD) As BOOL
SQLAllocConnect(ByVal henv As SQLHENV,ByVal phdbc As SQLHDBC PTR) As SQLRETURN
SQLAllocHandle(ByVal HandleType As SQLSMALLINT,ByVal InputHandle As SQLHANDLE,ByVal OutputHandle As SQLHANDLE PTR) As SQLRETURN
SQLAllocHandleStd(ByVal fHandleType As SQLSMALLINT,ByVal hInput As SQLHANDLE,ByVal phOutput As SQLHANDLE PTR) As SQLRETURN
SQLAllocEnv(ByVal phenv As SQLHENV PTR) As SQLRETURN
SQLAllocStmt(ByVal hdbc As SQLHDBC,ByVal phstmt As SQLHSTMT PTR) As SQLRETURN
SQLBindParam(ByVal StatementHandle As SQLHSTMT,ByVal ParameterNumber As SQLUSMALLINT,ByVal ValueType As SQLSMALLINT,ByVal ParameterType As SQLSMALLINT,ByVal LengthPrecision As SQLUINTEGER,ByVal ParameterScale As SQLSMALLINT,ByVal ParameterValue As SQLPOINTER,ByVal StrLen_or_Ind As SQLINTEGER PTR) As SQLRETURN
SQLBrowseConnectW(ByVal As SQLHDBC,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLBrowseConnectA(ByVal As SQLHDBC,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLBindParameter(ByVal hstmt As SQLHSTMT,ByVal ipar As SQLUSMALLINT,ByVal fParamType As SQLSMALLINT,ByVal fCType As SQLSMALLINT,ByVal fSqlType As SQLSMALLINT,ByVal cbColDef As SQLUINTEGER,ByVal ibScale As SQLSMALLINT,ByVal rgbValue As SQLPOINTER,ByVal cbValueMax As SQLINTEGER,ByVal pcbValue As SQLINTEGER PTR) As SQLRETURN
SQLBrowseConnect(ByVal hdbc As SQLHDBC,ByVal szConnStrIn As SQLCHAR PTR,ByVal cbConnStrIn As SQLSMALLINT,ByVal szConnStrOut As SQLCHAR PTR,ByVal cbConnStrOutMax As SQLSMALLINT,ByVal pcbConnStrOut As SQLSMALLINT PTR) As SQLRETURN
SQLBulkOperations(ByVal StatementHandle As SQLHSTMT,ByVal Operation As SQLSMALLINT) As SQLRETURN
SQLBindCol(ByVal hstmt As SQLHSTMT,ByVal icol As SQLUSMALLINT,ByVal fCType As SQLSMALLINT,ByVal rgbValue As SQLPOINTER,ByVal cbValueMax As SQLINTEGER,ByVal pcbValue As SQLINTEGER PTR) As SQLRETURN
SQLColumnsW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLColumnsA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLConfigDataSource(ByVal hwndParent As HWND,ByVal fRequest As WORD,ByVal lpszDriver As LPCWSTR,ByVal lpszAttributes As LPCWSTR) As BOOL
SQLCreateDataSource(ByVal hwndParent As HWND,ByVal lpszDSN As LPCSTR) As BOOL
SQLConnectW(ByVal As SQLHDBC,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLColumnPrivilegesW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLColAttributesW(ByVal As SQLHSTMT,ByVal As SQLUSMALLINT,ByVal As SQLUSMALLINT,ByVal As SQLPOINTER,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLColAttributes(ByVal hstmt As SQLHSTMT,ByVal icol As SQLUSMALLINT,ByVal fDescType As SQLUSMALLINT,ByVal rgbDesc As SQLPOINTER,ByVal cbDescMax As SQLSMALLINT,ByVal pcbDesc As SQLSMALLINT PTR,ByVal pfDesc As SQLINTEGER PTR) As SQLRETURN
SQLColAttributeW(ByVal As SQLHSTMT,ByVal As SQLUSMALLINT,ByVal As SQLUSMALLINT,ByVal As SQLPOINTER,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLPOINTER) As SQLRETURN
SQLCloseCursor(ByVal StatementHandle As SQLHSTMT) As SQLRETURN
SQLColAttribute(ByVal hstmt As SQLHSTMT,ByVal iCol As SQLUSMALLINT,ByVal iField As SQLUSMALLINT,ByVal pCharAttr As SQLPOINTER,ByVal cbCharAttrMax As SQLSMALLINT,ByVal pcbCharAttr As SQLSMALLINT PTR,ByVal pNumAttr As SQLPOINTER) As SQLRETURN
SQLConnectA(ByVal As SQLHDBC,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLCreateDataSource(ByVal hwndParent As HWND,ByVal lpszDSN As LPCWSTR) As BOOL
SQLColAttributeA(ByVal As SQLHSTMT,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT,ByVal As SQLPOINTER,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLPOINTER) As SQLRETURN
SQLColumnPrivilegesA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLColumns(ByVal hstmt As SQLHSTMT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szTableName As SQLCHAR PTR,ByVal cbTableName As SQLSMALLINT,ByVal szColumnName As SQLCHAR PTR,ByVal cbColumnName As SQLSMALLINT) As SQLRETURN
SQLColAttributesA(ByVal As SQLHSTMT,ByVal As SQLUSMALLINT,ByVal As SQLUSMALLINT,ByVal As SQLPOINTER,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLConfigDataSource(ByVal hwndParent As HWND,ByVal fRequest As WORD,ByVal lpszDriver As LPCSTR,ByVal lpszAttributes As LPCSTR) As BOOL
SQLConfigDriver(ByVal hwndParent As HWND,ByVal fRequest As WORD,ByVal lpszDriver As LPCWSTR,ByVal lpszArgs As LPCWSTR,ByVal lpszMsg As LPWSTR,ByVal cbMsgMax As WORD,ByVal pcbMsgOut As WORD PTR) As BOOL
SQLConnect(ByVal hdbc As SQLHDBC,ByVal szDSN As SQLCHAR PTR,ByVal cbDSN As SQLSMALLINT,ByVal szUID As SQLCHAR PTR,ByVal cbUID As SQLSMALLINT,ByVal szAuthStr As SQLCHAR PTR,ByVal cbAuthStr As SQLSMALLINT) As SQLRETURN
SQLCancel(ByVal hstmt As SQLHSTMT) As SQLRETURN
SQLCopyDesc(ByVal SourceDescHandle As SQLHDESC,ByVal TargetDescHandle As SQLHDESC) As SQLRETURN
SQLColumnPrivileges(ByVal hstmt As SQLHSTMT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szTableName As SQLCHAR PTR,ByVal cbTableName As SQLSMALLINT,ByVal szColumnName As SQLCHAR PTR,ByVal cbColumnName As SQLSMALLINT) As SQLRETURN
SQLConfigDriver(ByVal hwndParent As HWND,ByVal fRequest As WORD,ByVal lpszDriver As LPCSTR,ByVal lpszArgs As LPCSTR,ByVal lpszMsg As LPSTR,ByVal cbMsgMax As WORD,ByVal pcbMsgOut As WORD PTR) As BOOL
SQLDriverConnectW(ByVal As SQLHDBC,ByVal As SQLHWND,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLUSMALLINT) As SQLRETURN
SQLDisconnect(ByVal hdbc As SQLHDBC) As SQLRETURN
SQLDriversW(ByVal As SQLHENV,ByVal As SQLUSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLDrivers(ByVal henv As SQLHENV,ByVal fDirection As SQLUSMALLINT,ByVal szDriverDesc As SQLCHAR PTR,ByVal cbDriverDescMax As SQLSMALLINT,ByVal pcbDriverDesc As SQLSMALLINT PTR,ByVal szDriverAttributes As SQLCHAR PTR,ByVal cbDrvrAttrMax As SQLSMALLINT,ByVal pcbDrvrAttr As SQLSMALLINT PTR) As SQLRETURN
SQLDescribeCol(ByVal hstmt As SQLHSTMT,ByVal icol As SQLUSMALLINT,ByVal szColName As SQLCHAR PTR,ByVal cbColNameMax As SQLSMALLINT,ByVal pcbColName As SQLSMALLINT PTR,ByVal pfSqlType As SQLSMALLINT PTR,ByVal pcbColDef As SQLUINTEGER PTR,ByVal pibScale As SQLSMALLINT PTR,ByVal pfNullable As SQLSMALLINT PTR) As SQLRETURN
SQLDataSourcesA(ByVal As SQLHENV,ByVal As SQLUSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLDescribeParam(ByVal hstmt As SQLHSTMT,ByVal ipar As SQLUSMALLINT,ByVal pfSqlType As SQLSMALLINT PTR,ByVal pcbParamDef As SQLUINTEGER PTR,ByVal pibScale As SQLSMALLINT PTR,ByVal pfNullable As SQLSMALLINT PTR) As SQLRETURN
SQLDescribeColA(ByVal As SQLHSTMT,ByVal As SQLUSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLUINTEGER PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLDriverConnectA(ByVal As SQLHDBC,ByVal As SQLHWND,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLUSMALLINT) As SQLRETURN
SQLDriverConnect(ByVal hdbc As SQLHDBC,ByVal hwnd As SQLHWND,ByVal szConnStrIn As SQLCHAR PTR,ByVal cbConnStrIn As SQLSMALLINT,ByVal szConnStrOut As SQLCHAR PTR,ByVal cbConnStrOutMax As SQLSMALLINT,ByVal pcbConnStrOut As SQLSMALLINT PTR,ByVal fDriverCompletion As SQLUSMALLINT) As SQLRETURN
SQLDriversA(ByVal As SQLHENV,ByVal As SQLUSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLDataSourcesW(ByVal As SQLHENV,ByVal As SQLUSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLDataSources(ByVal henv As SQLHENV,ByVal fDirection As SQLUSMALLINT,ByVal szDSN As SQLCHAR PTR,ByVal cbDSNMax As SQLSMALLINT,ByVal pcbDSN As SQLSMALLINT PTR,ByVal szDescription As SQLCHAR PTR,ByVal cbDescriptionMax As SQLSMALLINT,ByVal pcbDescription As SQLSMALLINT PTR) As SQLRETURN
SQLDescribeColW(ByVal As SQLHSTMT,ByVal As SQLUSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLUINTEGER PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLExecDirectW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLINTEGER) As SQLRETURN
SQLEndTran(ByVal HandleType As SQLSMALLINT,ByVal handle As SQLHANDLE,ByVal CompletionType As SQLSMALLINT) As SQLRETURN
SQLExtendedFetch(ByVal hstmt As SQLHSTMT,ByVal fFetchType As SQLUSMALLINT,ByVal irow As SQLINTEGER,ByVal pcrow As SQLUINTEGER PTR,ByVal rgfRowStatus As SQLUSMALLINT PTR) As SQLRETURN
SQLErrorA(ByVal As SQLHENV,ByVal As SQLHDBC,ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLINTEGER PTR,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLExecDirectA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLINTEGER) As SQLRETURN
SQLErrorW(ByVal As SQLHENV,ByVal As SQLHDBC,ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLINTEGER PTR,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLExecute(ByVal hstmt As SQLHSTMT) As SQLRETURN
SQLExecDirect(ByVal hstmt As SQLHSTMT,ByVal szSqlStr As SQLCHAR PTR,ByVal cbSqlStr As SQLINTEGER) As SQLRETURN
SQLError(ByVal henv As SQLHENV,ByVal hdbc As SQLHDBC,ByVal hstmt As SQLHSTMT,ByVal szSqlState As SQLCHAR PTR,ByVal pfNativeError As SQLINTEGER PTR,ByVal szErrorMsg As SQLCHAR PTR,ByVal cbErrorMsgMax As SQLSMALLINT,ByVal pcbErrorMsg As SQLSMALLINT PTR) As SQLRETURN
SQLFreeHandle(ByVal HandleType As SQLSMALLINT,ByVal handle As SQLHANDLE) As SQLRETURN
SQLFreeEnv(ByVal henv As SQLHENV) As SQLRETURN
SQLFetchScroll(ByVal StatementHandle As SQLHSTMT,ByVal FetchOrientation As SQLSMALLINT,ByVal FetchOffset As SQLINTEGER) As SQLRETURN
SQLForeignKeys(ByVal hstmt As SQLHSTMT,ByVal szPkCatalogName As SQLCHAR PTR,ByVal cbPkCatalogName As SQLSMALLINT,ByVal szPkSchemaName As SQLCHAR PTR,ByVal cbPkSchemaName As SQLSMALLINT,ByVal szPkTableName As SQLCHAR PTR,ByVal cbPkTableName As SQLSMALLINT,ByVal szFkCatalogName As SQLCHAR PTR,ByVal cbFkCatalogName As SQLSMALLINT,ByVal szFkSchemaName As SQLCHAR PTR,ByVal cbFkSchemaName As SQLSMALLINT,ByVal szFkTableName As SQLCHAR PTR,ByVal cbFkTableName As SQLSMALLINT) As SQLRETURN
SQLFetch(ByVal hstmt As SQLHSTMT) As SQLRETURN
SQLFreeConnect(ByVal hdbc As SQLHDBC) As SQLRETURN
SQLForeignKeysA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLForeignKeysW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLFreeStmt(ByVal hstmt As SQLHSTMT,ByVal fOption As SQLUSMALLINT) As SQLRETURN
SQLGetAvailableDrivers(ByVal lpszInfFile As LPCWSTR,ByVal lpszBuf As LPWSTR,ByVal cbBufMax As WORD,ByVal pcbBufOut As WORD PTR) As BOOL
SQLGetCursorName(ByVal hstmt As SQLHSTMT,ByVal szCursor As SQLCHAR PTR,ByVal cbCursorMax As SQLSMALLINT,ByVal pcbCursor As SQLSMALLINT PTR) As SQLRETURN
SQLGetTranslator(ByVal hwnd As HWND,ByVal lpszName As LPWSTR,ByVal cbNameMax As WORD,ByVal pcbNameOut As WORD PTR,ByVal lpszPath As LPWSTR,ByVal cbPathMax As WORD,ByVal pcbPathOut As WORD PTR,ByVal pvOption As DWORD PTR) As BOOL
SQLGetAvailableDrivers(ByVal lpszInfFile As LPCSTR,ByVal lpszBuf As LPSTR,ByVal cbBufMax As WORD,ByVal pcbBufOut As WORD PTR) As BOOL
SQLGetInstalledDrivers(ByVal lpszBuf As LPSTR,ByVal cbBufMax As WORD,ByVal pcbBufOut As WORD PTR) As BOOL
SQLGetDiagRecA(ByVal As SQLSMALLINT,ByVal As SQLHANDLE,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLINTEGER PTR,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetDiagFieldA(ByVal As SQLSMALLINT,ByVal As SQLHANDLE,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT,ByVal As SQLPOINTER,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetDescRecA(ByVal As SQLHDESC,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLINTEGER PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetDescFieldA(ByVal As SQLHDESC,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT,ByVal As SQLPOINTER,ByVal As SQLINTEGER,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLGetConnectAttr(ByVal ConnectionHandle As SQLHDBC,ByVal lAttribute As SQLINTEGER,ByVal lValue As SQLPOINTER,ByVal BufferLength As SQLINTEGER,ByVal StringLength As SQLINTEGER PTR) As SQLRETURN
SQLGetDescRecW(ByVal As SQLHDESC,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLINTEGER PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetDescField(ByVal hdesc As SQLHDESC,ByVal iRecord As SQLSMALLINT,ByVal iField As SQLSMALLINT,ByVal rgbValue As SQLPOINTER,ByVal cbValueMax As SQLINTEGER,ByVal pcbValue As SQLINTEGER PTR) As SQLRETURN
SQLGetDescRec(ByVal hdesc As SQLHDESC,ByVal iRecord As SQLSMALLINT,ByVal szName As SQLCHAR PTR,ByVal cbNameMax As SQLSMALLINT,ByVal pcbName As SQLSMALLINT PTR,ByVal pfType As SQLSMALLINT PTR,ByVal pfSubType As SQLSMALLINT PTR,ByVal pLength As SQLINTEGER PTR,ByVal pPrecision As SQLSMALLINT PTR,ByVal pScale As SQLSMALLINT PTR,ByVal pNullable As SQLSMALLINT PTR) As SQLRETURN
SQLGetDiagField(ByVal HandleType As SQLSMALLINT,ByVal handle As SQLHANDLE,ByVal RecNumber As SQLSMALLINT,ByVal DiagIdentifier As SQLSMALLINT,ByVal DiagInfo As SQLPOINTER,ByVal BufferLength As SQLSMALLINT,ByVal StringLength As SQLSMALLINT PTR) As SQLRETURN
SQLGetDiagRec(ByVal fHandleType As SQLSMALLINT,ByVal handle As SQLHANDLE,ByVal iRecord As SQLSMALLINT,ByVal szSqlState As SQLCHAR PTR,ByVal pfNativeError As SQLINTEGER PTR,ByVal szErrorMsg As SQLCHAR PTR,ByVal cbErrorMsgMax As SQLSMALLINT,ByVal pcbErrorMsg As SQLSMALLINT PTR) As SQLRETURN
SQLGetConnectAttrA(ByVal As SQLHDBC,ByVal As SQLINTEGER,ByVal As SQLPOINTER,ByVal As SQLINTEGER,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLGetTranslator(ByVal hwnd As HWND,ByVal lpszName As LPSTR,ByVal cbNameMax As WORD,ByVal pcbNameOut As WORD PTR,ByVal lpszPath As LPSTR,ByVal cbPathMax As WORD,ByVal pcbPathOut As WORD PTR,ByVal pvOption As DWORD PTR) As BOOL
SQLGetTypeInfoW(ByVal As SQLHSTMT,ByVal As SQLSMALLINT) As SQLRETURN
SQLGetEnvAttr(ByVal EnvironmentHandle As SQLHENV,ByVal lAttribute As SQLINTEGER,ByVal lValue As SQLPOINTER,ByVal BufferLength As SQLINTEGER,ByVal StringLength As SQLINTEGER PTR) As SQLRETURN
SQLGetConnectAttrW(ByVal As SQLHDBC,ByVal As SQLINTEGER,ByVal As SQLPOINTER,ByVal As SQLINTEGER,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLGetTypeInfoA(ByVal As SQLHSTMT,ByVal As SQLSMALLINT) As SQLRETURN
SQLGetDiagFieldW(ByVal As SQLSMALLINT,ByVal As SQLHANDLE,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT,ByVal As SQLPOINTER,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetPrivateProfileString(ByVal lpszSection As LPCSTR,ByVal lpszEntry As LPCSTR,ByVal lpszDefault As LPCSTR,ByVal lpszRetBuffer As LPSTR,ByVal cbRetBuffer As Integer,ByVal lpszFilename As LPCSTR) As Integer
SQLGetDiagRecW(ByVal As SQLSMALLINT,ByVal As SQLHANDLE,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLINTEGER PTR,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetConnectOptionW(ByVal As SQLHDBC,ByVal As SQLUSMALLINT,ByVal As SQLPOINTER) As SQLRETURN
SQLGetCursorNameW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetTypeInfo(ByVal hstmt As SQLHSTMT,ByVal fSqlType As SQLSMALLINT) As SQLRETURN
SQLGetStmtOption(ByVal hstmt As SQLHSTMT,ByVal fOption As SQLUSMALLINT,ByVal pvParam As SQLPOINTER) As SQLRETURN
SQLGetConfigMode(ByVal pwConfigMode As UWORD PTR) As BOOL
SQLGetInfo(ByVal hdbc As SQLHDBC,ByVal fInfoType As SQLUSMALLINT,ByVal rgbInfoValue As SQLPOINTER,ByVal cbInfoValueMax As SQLSMALLINT,ByVal pcbInfoValue As SQLSMALLINT PTR) As SQLRETURN
SQLGetFunctions(ByVal hdbc As SQLHDBC,ByVal fFunction As SQLUSMALLINT,ByVal pfExists As SQLUSMALLINT PTR) As SQLRETURN
SQLGetData(ByVal hstmt As SQLHSTMT,ByVal icol As SQLUSMALLINT,ByVal fCType As SQLSMALLINT,ByVal rgbValue As SQLPOINTER,ByVal cbValueMax As SQLINTEGER,ByVal pcbValue As SQLINTEGER PTR) As SQLRETURN
SQLGetConnectOption(ByVal hdbc As SQLHDBC,ByVal fOption As SQLUSMALLINT,ByVal pvParam As SQLPOINTER) As SQLRETURN
SQLGetConnectOptionA(ByVal As SQLHDBC,ByVal As SQLUSMALLINT,ByVal As SQLPOINTER) As SQLRETURN
SQLGetStmtAttrA(ByVal As SQLHSTMT,ByVal As SQLINTEGER,ByVal As SQLPOINTER,ByVal As SQLINTEGER,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLGetPrivateProfileString(ByVal lpszSection As LPCWSTR,ByVal lpszEntry As LPCWSTR,ByVal lpszDefault As LPCWSTR,ByVal lpszRetBuffer As LPWSTR,ByVal cbRetBuffer As Integer,ByVal lpszFilename As LPCWSTR) As Integer
SQLGetInstalledDrivers(ByVal lpszBuf As LPWSTR,ByVal cbBufMax As WORD,ByVal pcbBufOut As WORD PTR) As BOOL
SQLGetInfoW(ByVal As SQLHDBC,ByVal As SQLUSMALLINT,ByVal As SQLPOINTER,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetStmtAttrW(ByVal As SQLHSTMT,ByVal As SQLINTEGER,ByVal As SQLPOINTER,ByVal As SQLINTEGER,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLGetStmtAttr(ByVal hstmt As SQLHSTMT,ByVal fAttribute As SQLINTEGER,ByVal rgbValue As SQLPOINTER,ByVal cbValueMax As SQLINTEGER,ByVal pcbValue As SQLINTEGER PTR) As SQLRETURN
SQLGetCursorNameA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLGetInfoA(ByVal As SQLHDBC,ByVal As SQLUSMALLINT,ByVal As SQLPOINTER,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT PTR) As SQLRETURN
SQLInstallDriverManager(ByVal lpszPath As LPWSTR,ByVal cbPathMax As WORD,ByVal pcbPathOut As WORD PTR) As BOOL
SQLInstallDriverEx(ByVal lpszDriver As LPCSTR,ByVal lpszPathIn As LPCSTR,ByVal lpszPathOut As LPSTR,ByVal cbPathOutMax As WORD,ByVal pcbPathOut As WORD PTR,ByVal fRequest As WORD,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLInstallTranslator(ByVal lpszInfFile As LPCWSTR,ByVal lpszTranslator As LPCWSTR,ByVal lpszPathIn As LPCWSTR,ByVal lpszPathOut As LPWSTR,ByVal cbPathOutMax As WORD,ByVal pcbPathOut As WORD PTR,ByVal fRequest As WORD,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLInstallDriverEx(ByVal lpszDriver As LPCWSTR,ByVal lpszPathIn As LPCWSTR,ByVal lpszPathOut As LPWSTR,ByVal cbPathOutMax As WORD,ByVal pcbPathOut As WORD PTR,ByVal fRequest As WORD,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLInstallerError(ByVal iError As WORD,ByVal pfErrorCode As DWORD PTR,ByVal lpszErrorMsg As LPWSTR,ByVal cbErrorMsgMax As WORD,ByVal pcbErrorMsg As WORD PTR) As SQLRETURN
SQLInstallTranslatorEx(ByVal lpszTranslator As LPCWSTR,ByVal lpszPathIn As LPCWSTR,ByVal lpszPathOut As LPWSTR,ByVal cbPathOutMax As WORD,ByVal pcbPathOut As WORD PTR,ByVal fRequest As WORD,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLInstallTranslator(ByVal lpszInfFile As LPCSTR,ByVal lpszTranslator As LPCSTR,ByVal lpszPathIn As LPCSTR,ByVal lpszPathOut As LPSTR,ByVal cbPathOutMax As WORD,ByVal pcbPathOut As WORD PTR,ByVal fRequest As WORD,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLInstallDriver(ByVal lpszInfFile As LPCSTR,ByVal lpszDriver As LPCSTR,ByVal lpszPath As LPSTR,ByVal cbPathMax As WORD,ByVal pcbPathOut As WORD PTR) As BOOL
SQLInstallTranslatorEx(ByVal lpszTranslator As LPCSTR,ByVal lpszPathIn As LPCSTR,ByVal lpszPathOut As LPSTR,ByVal cbPathOutMax As WORD,ByVal pcbPathOut As WORD PTR,ByVal fRequest As WORD,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLInstallODBC(ByVal hwndParent As HWND,ByVal lpszInfFile As LPCWSTR,ByVal lpszSrcPath As LPCWSTR,ByVal lpszDrivers As LPCWSTR) As BOOL
SQLInstallDriver(ByVal lpszInfFile As LPCWSTR,ByVal lpszDriver As LPCWSTR,ByVal lpszPath As LPWSTR,ByVal cbPathMax As WORD,ByVal pcbPathOut As WORD PTR) As BOOL
SQLInstallDriverManager(ByVal lpszPath As LPSTR,ByVal cbPathMax As WORD,ByVal pcbPathOut As WORD PTR) As BOOL
SQLInstallODBC(ByVal hwndParent As HWND,ByVal lpszInfFile As LPCSTR,ByVal lpszSrcPath As LPCSTR,ByVal lpszDrivers As LPCSTR) As BOOL
SQLInstallerError(ByVal iError As WORD,ByVal pfErrorCode As DWORD PTR,ByVal lpszErrorMsg As LPSTR,ByVal cbErrorMsgMax As WORD,ByVal pcbErrorMsg As WORD PTR) As SQLRETURN
SQLMoreResults(ByVal hstmt As SQLHSTMT) As SQLRETURN
SQLManageDataSources(ByVal hwndParent As HWND) As BOOL
SQLNumResultCols(ByVal hstmt As SQLHSTMT,ByVal pccol As SQLSMALLINT PTR) As SQLRETURN
SQLNativeSqlW(ByVal As SQLHDBC,ByVal As SQLWCHAR PTR,ByVal As SQLINTEGER,ByVal As SQLWCHAR PTR,ByVal As SQLINTEGER,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLNativeSql(ByVal hdbc As SQLHDBC,ByVal szSqlStrIn As SQLCHAR PTR,ByVal cbSqlStrIn As SQLINTEGER,ByVal szSqlStr As SQLCHAR PTR,ByVal cbSqlStrMax As SQLINTEGER,ByVal pcbSqlStr As SQLINTEGER PTR) As SQLRETURN
SQLNumParams(ByVal hstmt As SQLHSTMT,ByVal pcpar As SQLSMALLINT PTR) As SQLRETURN
SQLNativeSqlA(ByVal As SQLHDBC,ByVal As SQLCHAR PTR,ByVal As SQLINTEGER,ByVal As SQLCHAR PTR,ByVal As SQLINTEGER,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLPrepareA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLINTEGER) As SQLRETURN
SQLProcedureColumns(ByVal hstmt As SQLHSTMT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szProcName As SQLCHAR PTR,ByVal cbProcName As SQLSMALLINT,ByVal szColumnName As SQLCHAR PTR,ByVal cbColumnName As SQLSMALLINT) As SQLRETURN
SQLPrepare(ByVal hstmt As SQLHSTMT,ByVal szSqlStr As SQLCHAR PTR,ByVal cbSqlStr As SQLINTEGER) As SQLRETURN
SQLProcedureColumnsA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLProceduresA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLPrimaryKeysA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLPostInstallerError(ByVal dwErrorCode As DWORD,ByVal lpszErrMsg As LPCSTR) As SQLRETURN
SQLPutData(ByVal hstmt As SQLHSTMT,ByVal rgbValue As SQLPOINTER,ByVal cbValue As SQLINTEGER) As SQLRETURN
SQLParamData(ByVal hstmt As SQLHSTMT,ByVal prgbValue As SQLPOINTER PTR) As SQLRETURN
SQLProcedures(ByVal hstmt As SQLHSTMT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szProcName As SQLCHAR PTR,ByVal cbProcName As SQLSMALLINT) As SQLRETURN
SQLProceduresW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLProcedureColumnsW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLPrimaryKeysW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLPrepareW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLINTEGER) As SQLRETURN
SQLPrimaryKeys(ByVal hstmt As SQLHSTMT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szTableName As SQLCHAR PTR,ByVal cbTableName As SQLSMALLINT) As SQLRETURN
SQLParamOptions(ByVal hstmt As SQLHSTMT,ByVal crow As SQLUINTEGER,ByVal pirow As SQLUINTEGER PTR) As SQLRETURN
SQLPostInstallerError(ByVal dwErrorCode As DWORD,ByVal lpszErrMsg As LPCWSTR) As SQLRETURN
SQLRemoveDefaultDataSource() As BOOL
SQLRemoveDriver(ByVal lpszDriver As LPCWSTR,ByVal fRemoveDSN As BOOL,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLRowCount(ByVal hstmt As SQLHSTMT,ByVal pcrow As SQLINTEGER PTR) As SQLRETURN
SQLReadFileDSN(ByVal lpszFileName As LPCWSTR,ByVal lpszAppName As LPCWSTR,ByVal lpszKeyName As LPCWSTR,ByVal lpszString As LPWSTR,ByVal cbString As WORD,ByVal pcbString As WORD PTR) As BOOL
SQLRemoveTranslator(ByVal lpszTranslator As LPCWSTR,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLReadFileDSN(ByVal lpszFileName As LPCSTR,ByVal lpszAppName As LPCSTR,ByVal lpszKeyName As LPCSTR,ByVal lpszString As LPSTR,ByVal cbString As WORD,ByVal pcbString As WORD PTR) As BOOL
SQLRemoveTranslator(ByVal lpszTranslator As LPCSTR,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLRemoveDSNFromIni(ByVal lpszDSN As LPCSTR) As BOOL
SQLRemoveDSNFromIni(ByVal lpszDSN As LPCWSTR) As BOOL
SQLRemoveDriverManager(ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLRemoveDriver(ByVal lpszDriver As LPCSTR,ByVal fRemoveDSN As BOOL,ByVal lpdwUsageCount As LPDWORD) As BOOL
SQLSetParam(ByVal hstmt As SQLHSTMT,ByVal ipar As SQLUSMALLINT,ByVal fCType As SQLSMALLINT,ByVal fSqlType As SQLSMALLINT,ByVal cbParamDef As SQLUINTEGER,ByVal ibScale As SQLSMALLINT,ByVal rgbValue As SQLPOINTER,ByVal pcbValue As SQLINTEGER PTR) As SQLRETURN
SQLSetConnectOptionW(ByVal As SQLHDBC,ByVal As SQLUSMALLINT,ByVal As SQLUINTEGER) As SQLRETURN
SQLSetEnvAttr(ByVal EnvironmentHandle As SQLHENV,ByVal lAttribute As SQLINTEGER,ByVal Value As SQLPOINTER,ByVal StringLength As SQLINTEGER) As SQLRETURN
SQLSetConnectOption(ByVal hdbc As SQLHDBC,ByVal fOption As SQLUSMALLINT,ByVal vParam As SQLUINTEGER) As SQLRETURN
SQLSetCursorName(ByVal hstmt As SQLHSTMT,ByVal szCursor As SQLCHAR PTR,ByVal cbCursor As SQLSMALLINT) As SQLRETURN
SQLSetStmtOption(ByVal hstmt As SQLHSTMT,ByVal fOption As SQLUSMALLINT,ByVal vParam As SQLUINTEGER) As SQLRETURN
SQLSpecialColumns(ByVal hstmt As SQLHSTMT,ByVal fColType As SQLUSMALLINT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szTableName As SQLCHAR PTR,ByVal cbTableName As SQLSMALLINT,ByVal fScope As SQLUSMALLINT,ByVal fNullable As SQLUSMALLINT) As SQLRETURN
SQLStatistics(ByVal hstmt As SQLHSTMT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szTableName As SQLCHAR PTR,ByVal cbTableName As SQLSMALLINT,ByVal fUnique As SQLUSMALLINT,ByVal fAccuracy As SQLUSMALLINT) As SQLRETURN
SQLSetPos(ByVal hstmt As SQLHSTMT,ByVal irow As SQLUSMALLINT,ByVal fOption As SQLUSMALLINT,ByVal fLock As SQLUSMALLINT) As SQLRETURN
SQLSetConnectAttr(ByVal hdbc As SQLHDBC,ByVal fAttribute As SQLINTEGER,ByVal rgbValue As SQLPOINTER,ByVal cbValue As SQLINTEGER) As SQLRETURN
SQLSetDescField(ByVal DescriptorHandle As SQLHDESC,ByVal RecNumber As SQLSMALLINT,ByVal FieldIdentifier As SQLSMALLINT,ByVal Value As SQLPOINTER,ByVal BufferLength As SQLINTEGER) As SQLRETURN
SQLSetDescRec(ByVal DescriptorHandle As SQLHDESC,ByVal RecNumber As SQLSMALLINT,ByVal lType As SQLSMALLINT,ByVal SubType As SQLSMALLINT,ByVal Length As SQLINTEGER,ByVal Precision As SQLSMALLINT,ByVal kScale As SQLSMALLINT,ByVal Data As SQLPOINTER,ByVal StringLength As SQLINTEGER PTR,ByVal Indicator As SQLINTEGER PTR) As SQLRETURN
SQLSetScrollOptions(ByVal hstmt As SQLHSTMT,ByVal fConcurrency As SQLUSMALLINT,ByVal crowKeyset As SQLINTEGER,ByVal crowRowset As SQLUSMALLINT) As SQLRETURN
SQLSetConfigMode(ByVal wConfigMode As UWORD) As BOOL
SQLSetDescFieldW(ByVal As SQLHDESC,ByVal As SQLSMALLINT,ByVal As SQLSMALLINT,ByVal As SQLPOINTER,ByVal As SQLINTEGER,ByVal As SQLINTEGER PTR) As SQLRETURN
SQLStatisticsW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLUSMALLINT,ByVal As SQLUSMALLINT) As SQLRETURN
SQLSpecialColumnsW(ByVal As SQLHSTMT,ByVal As SQLUSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLUSMALLINT,ByVal As SQLUSMALLINT) As SQLRETURN
SQLSetStmtAttrW(ByVal As SQLHSTMT,ByVal As SQLINTEGER,ByVal As SQLPOINTER,ByVal As SQLINTEGER) As SQLRETURN
SQLSetConnectAttrA(ByVal As SQLHDBC,ByVal As SQLINTEGER,ByVal As SQLPOINTER,ByVal As SQLINTEGER) As SQLRETURN
SQLSetConnectOptionA(ByVal As SQLHDBC,ByVal As SQLUSMALLINT,ByVal As SQLUINTEGER) As SQLRETURN
SQLSetCursorNameA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLSetStmtAttrA(ByVal As SQLHSTMT,ByVal As SQLINTEGER,ByVal As SQLPOINTER,ByVal As SQLINTEGER) As SQLRETURN
SQLSpecialColumnsA(ByVal As SQLHSTMT,ByVal As SQLUSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLUSMALLINT,ByVal As SQLUSMALLINT) As SQLRETURN
SQLStatisticsA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLUSMALLINT,ByVal As SQLUSMALLINT) As SQLRETURN
SQLSetCursorNameW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLSetStmtAttr(ByVal StatementHandle As SQLHSTMT,ByVal lAttribute As SQLINTEGER,ByVal Value As SQLPOINTER,ByVal StringLength As SQLINTEGER) As SQLRETURN
SQLSetConnectAttrW(ByVal As SQLHDBC,ByVal As SQLINTEGER,ByVal As SQLPOINTER,ByVal As SQLINTEGER) As SQLRETURN
SQLTablePrivilegesA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLTables(ByVal hstmt As SQLHSTMT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szTableName As SQLCHAR PTR,ByVal cbTableName As SQLSMALLINT,ByVal szTableType As SQLCHAR PTR,ByVal cbTableType As SQLSMALLINT) As SQLRETURN
SQLTablesA(ByVal As SQLHSTMT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLTablePrivilegesW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLTablePrivileges(ByVal hstmt As SQLHSTMT,ByVal szCatalogName As SQLCHAR PTR,ByVal cbCatalogName As SQLSMALLINT,ByVal szSchemaName As SQLCHAR PTR,ByVal cbSchemaName As SQLSMALLINT,ByVal szTableName As SQLCHAR PTR,ByVal cbTableName As SQLSMALLINT) As SQLRETURN
SQLTransact(ByVal henv As SQLHENV,ByVal hdbc As SQLHDBC,ByVal fType As SQLUSMALLINT) As SQLRETURN
SQLTablesW(ByVal As SQLHSTMT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT,ByVal As SQLWCHAR PTR,ByVal As SQLSMALLINT) As SQLRETURN
SQLValidDSN(ByVal lpszDSN As LPCSTR) As BOOL
SQLValidDSN(ByVal lpszDSN As LPCWSTR) As BOOL
SQLWriteDSNToIni(ByVal lpszDSN As LPCWSTR,ByVal lpszDriver As LPCWSTR) As BOOL
SQLWriteDSNToIni(ByVal lpszDSN As LPCSTR,ByVal lpszDriver As LPCSTR) As BOOL
SQLWritePrivateProfileString(ByVal lpszSection As LPCSTR,ByVal lpszEntry As LPCSTR,ByVal lpszString As LPCSTR,ByVal lpszFilename As LPCSTR) As BOOL
SQLWriteFileDSN(ByVal lpszFileName As LPCSTR,ByVal lpszAppName As LPCSTR,ByVal lpszKeyName As LPCSTR,ByVal lpszString As LPCSTR) As BOOL
SQLWriteFileDSN(ByVal lpszFileName As LPCWSTR,ByVal lpszAppName As LPCWSTR,ByVal lpszKeyName As LPCWSTR,ByVal lpszString As LPCWSTR) As BOOL
SQLWritePrivateProfileString(ByVal lpszSection As LPCWSTR,ByVal lpszEntry As LPCWSTR,ByVal lpszString As LPCWSTR,ByVal lpszFilename As LPCWSTR) As BOOL
StackWalk(ByVal MachineType As DWORD,ByVal hProcess As HANDLE,ByVal hThread As HANDLE,ByVal StackFrame As LPSTACKFRAME,ByVal ContextRecord As LPVOID,ByVal ReadMemoryRoutine As PREAD_PROCESS_MEMORY_ROUTINE,ByVal FunctionTableAccessRoutine As PFUNCTION_TABLE_ACCESS_ROUTINE,ByVal GetModuleBaseRoutine As PGET_MODULE_BASE_ROUTINE,ByVal TranslateAddress As PTRANSLATE_ADDRESS_ROUTINE) As BOOL
StartDocPrinter(ByVal hPrinter As HANDLE,ByVal Level As DWORD,ByVal pDocInfo As PBYTE) As DWORD
StartPagePrinter(ByVal hPrinter As HANDLE) As BOOL
StartService(ByVal hService As SC_HANDLE,ByVal dwNumServiceArgs As DWORD,ByVal lpServiceArgVectors As LPCWSTR PTR) As BOOL
StartDoc(ByVal hdc As HDC,ByVal lpdi As DOCINFOA PTR) As Integer
StartDoc(ByVal hdc As HDC,ByVal lpdi As DOCINFOW PTR) As Integer
StartService(ByVal hService As SC_HANDLE,ByVal dwNumServiceArgs As DWORD,ByVal lpServiceArgVectors As LPCSTR PTR) As BOOL
StartPage(ByVal hdc As HDC) As Integer
StartServiceCtrlDispatcher(ByVal lpServiceStartTable As LPSERVICE_TABLE_ENTRYW) As BOOL
StartServiceCtrlDispatcher(ByVal lpServiceStartTable As LPSERVICE_TABLE_ENTRYA) As BOOL
StgCreateDocfileOnILockBytes(ByVal plkbyt As ILockBytes PTR,ByVal grfMode As DWORD,ByVal reserved As DWORD,ByVal ppstgOpen As IStorage PTR PTR) As HRESULT
StgCreateStorageEx(ByVal pwcsName As WCHAR PTR,ByVal grfMode As DWORD,ByVal stgfmt As DWORD,ByVal grfAttrs As DWORD,ByVal pStgOptions As STGOPTIONS PTR,ByVal reserved As any PTR,ByVal riid As IID PTR,ByVal ppObjectOpen As any PTR PTR) As HRESULT
StgCreateDocfile(ByVal pwcsName As OLECHAR PTR,ByVal grfMode As DWORD,ByVal reserved As DWORD,ByVal ppstgOpen As IStorage PTR PTR) As HRESULT
StgIsStorageFile(ByVal pwcsName As OLECHAR PTR) As HRESULT
StgIsStorageILockBytes(ByVal plkbyt As ILockBytes PTR) As HRESULT
StgOpenStorageOnILockBytes(ByVal plkbyt As ILockBytes PTR,ByVal pstgPriority As IStorage PTR,ByVal grfMode As DWORD,ByVal snbExclude As SNB,ByVal reserved As DWORD,ByVal ppstgOpen As IStorage PTR PTR) As HRESULT
StgOpenStorage(ByVal pwcsName As OLECHAR PTR,ByVal pstgPriority As IStorage PTR,ByVal grfMode As DWORD,ByVal snbExclude As SNB,ByVal reserved As DWORD,ByVal ppstgOpen As IStorage PTR PTR) As HRESULT
StgOpenStorageEx(ByVal pwcsName As WCHAR PTR,ByVal grfMode As DWORD,ByVal stgfmt As DWORD,ByVal grfAttrs As DWORD,ByVal pStgOptions As STGOPTIONS PTR,ByVal reserved As any PTR,ByVal riid As IID PTR,ByVal ppObjectOpen As any PTR PTR) As HRESULT
StgSetTimes(ByVal lpszName As OLECHAR PTR,ByVal pctime As FILETIME PTR,ByVal patime As FILETIME PTR,ByVal pmtime As FILETIME PTR) As HRESULT
StrCmpNI(ByVal lpStr1 As LPCSTR,ByVal lpStr2 As LPCSTR,ByVal nChar As Integer) As Integer
StrCSpn(ByVal lpStr As LPCSTR,ByVal lpSet As LPCSTR) As Integer
StrCat(ByVal As LPWSTR,ByVal As LPCWSTR) As LPWSTR
StrChrI(ByVal lpStart As LPCSTR,ByVal wMatch As WORD) As LPSTR
StrCSpnI(ByVal lpStr As LPCSTR,ByVal lpSet As LPCSTR) As Integer
StrCatBuff(ByVal pszDest As LPWSTR,ByVal pszSrc As LPCWSTR,ByVal cchDestBuffSize As Integer) As LPWSTR
StrCat(ByVal As LPSTR,ByVal As LPCSTR) As LPSTR
StrCatBuff(ByVal pszDest As LPSTR,ByVal pszSrc As LPCSTR,ByVal cchDestBuffSize As Integer) As LPSTR
StrCSpnI(ByVal lpStr As LPCWSTR,ByVal lpSet As LPCWSTR) As Integer
StrChr(ByVal lpStart As LPCSTR,ByVal wMatch As WORD) As LPSTR
StrCSpn(ByVal lpStr As LPCWSTR,ByVal lpSet As LPCWSTR) As Integer
StrCmpNI(ByVal lpStr1 As LPCWSTR,ByVal lpStr2 As LPCWSTR,ByVal nChar As Integer) As Integer
StrCmpN(ByVal lpStr1 As LPCSTR,ByVal lpStr2 As LPCSTR,ByVal nChar As Integer) As Integer
StrCmpN(ByVal lpStr1 As LPCWSTR,ByVal lpStr2 As LPCWSTR,ByVal nChar As Integer) As Integer
StrCpyN(ByVal As LPWSTR,ByVal As LPCWSTR,ByVal As Integer) As LPWSTR
StrCpy(ByVal As LPWSTR,ByVal As LPCWSTR) As LPWSTR
StrCmp(ByVal As LPCWSTR,ByVal As LPCWSTR) As Integer
StrCmpI(ByVal As LPCWSTR,ByVal As LPCWSTR) As Integer
StrChrI(ByVal lpStart As LPCWSTR,ByVal wMatch As WCHAR) As LPWSTR
StrChr(ByVal lpStart As LPCWSTR,ByVal wMatch As WCHAR) As LPWSTR
StrCatChain(ByVal As LPWSTR,ByVal As DWORD,ByVal As DWORD,ByVal As LPCWSTR) As DWORD
StrDup(ByVal lpSrch As LPCSTR) As LPSTR
StrDup(ByVal lpSrch As LPCWSTR) As LPWSTR
StretchBlt(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal nWidth As Integer,ByVal nHeight As Integer,ByVal hSrcDC As HDC,ByVal xSrc As Integer,ByVal ySrc As Integer,ByVal nSrcWidth As Integer,ByVal nSrcHeight As Integer,ByVal dwRop As DWORD) As BOOL
StretchDIBits(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal dx As Integer,ByVal dy As Integer,ByVal SrcX As Integer,ByVal SrcY As Integer,ByVal wSrcWidth As Integer,ByVal wSrcHeight As Integer,ByVal lpBits As any PTR,ByVal lpBitsInfo As BITMAPINFO PTR,ByVal wUsage As UINT,ByVal dwRop As DWORD) As Integer
StrFromTimeInterval(ByVal pszOut As LPWSTR,ByVal cchMax As UINT,ByVal dwTimeMS As DWORD,ByVal digits As Integer) As Integer
StrFromTimeInterval(ByVal pszOut As LPSTR,ByVal cchMax As UINT,ByVal dwTimeMS As DWORD,ByVal digits As Integer) As Integer
StrFormatKBSize(ByVal qdw As LONGLONG,ByVal szBuf As LPSTR,ByVal uiBufSize As UINT) As LPSTR
StrFormatByteSize64(ByVal qdw As LONGLONG,ByVal szBuf As LPSTR,ByVal uiBufSize As UINT) As LPSTR
StrFormatKBSize(ByVal qdw As LONGLONG,ByVal szBuf As LPWSTR,ByVal uiBufSize As UINT) As LPWSTR
StrFormatByteSize(ByVal dw As LONGLONG,ByVal szBuf As LPWSTR,ByVal uiBufSize As UINT) As LPWSTR
StrFormatByteSize(ByVal dw As DWORD,ByVal szBuf As LPSTR,ByVal uiBufSize As UINT) As LPSTR
StrIsIntlEqual(ByVal fCaseSens As BOOL,ByVal lpString1 As LPCSTR,ByVal lpString2 As LPCSTR,ByVal nChar As Integer) As BOOL
StrIsIntlEqual(ByVal fCaseSens As BOOL,ByVal lpString1 As LPCWSTR,ByVal lpString2 As LPCWSTR,ByVal nChar As Integer) As BOOL
StringFromCLSID(ByVal rclsid As CLSID PTR,ByVal lplpsz As LPOLESTR PTR) As HRESULT
StringFromIID(ByVal rclsid As IID PTR,ByVal lplpsz As LPOLESTR PTR) As HRESULT
StringFromGUID2(ByVal rguid As GUID PTR,ByVal lpsz As LPOLESTR,ByVal cchMax As Integer) As Integer
StrNCat(ByVal psz1 As LPSTR,ByVal psz2 As LPCSTR,ByVal cchMax As Integer) As LPSTR
StrNCat(ByVal psz1 As LPWSTR,ByVal psz2 As LPCWSTR,ByVal cchMax As Integer) As LPWSTR
StrokePath(ByVal hdc As HDC) As BOOL
StrokeAndFillPath(ByVal hdc As HDC) As BOOL
StrPBrk(ByVal psz As LPCWSTR,ByVal pszSet As LPCWSTR) As LPWSTR
StrPBrk(ByVal psz As LPCSTR,ByVal pszSet As LPCSTR) As LPSTR
StrRChr(ByVal lpStart As LPCWSTR,ByVal lpEnd As LPCWSTR,ByVal wMatch As WCHAR) As LPWSTR
StrRChr(ByVal lpStart As LPCSTR,ByVal lpEnd As LPCSTR,ByVal wMatch As WORD) As LPSTR
StrRetToBuf(ByVal pstr As LPSTRRET,ByVal pidl As LPCITEMIDLIST,ByVal pszBuf As LPWSTR,ByVal cchBuf As UINT) As HRESULT
StrRetToStr(ByVal pstr As LPSTRRET,ByVal pidl As LPCITEMIDLIST,ByVal ppsz As LPWSTR PTR) As HRESULT
StrRStrI(ByVal lpSource As LPCWSTR,ByVal lpLast As LPCWSTR,ByVal lpSrch As LPCWSTR) As LPWSTR
StrRetToStr(ByVal pstr As LPSTRRET,ByVal pidl As LPCITEMIDLIST,ByVal ppsz As LPSTR PTR) As HRESULT
StrRStrI(ByVal lpSource As LPCSTR,ByVal lpLast As LPCSTR,ByVal lpSrch As LPCSTR) As LPSTR
StrRetToBuf(ByVal pstr As LPSTRRET,ByVal pidl As LPCITEMIDLIST,ByVal pszBuf As LPSTR,ByVal cchBuf As UINT) As HRESULT
StrRChrI(ByVal lpStart As LPCWSTR,ByVal lpEnd As LPCWSTR,ByVal wMatch As WCHAR) As LPWSTR
StrRChrI(ByVal lpStart As LPCSTR,ByVal lpEnd As LPCSTR,ByVal wMatch As WORD) As LPSTR
StrStrI(ByVal lpFirst As LPCWSTR,ByVal lpSrch As LPCWSTR) As LPWSTR
StrSpn(ByVal psz As LPCWSTR,ByVal pszSet As LPCWSTR) As Integer
StrStrI(ByVal lpFirst As LPCSTR,ByVal lpSrch As LPCSTR) As LPSTR
StrStr(ByVal lpFirst As LPCSTR,ByVal lpSrch As LPCSTR) As LPSTR
StrStr(ByVal lpFirst As LPCWSTR,ByVal lpSrch As LPCWSTR) As LPWSTR
StrSpn(ByVal psz As LPCSTR,ByVal pszSet As LPCSTR) As Integer
StrTrim(ByVal psz As LPWSTR,ByVal pszTrimChars As LPCWSTR) As BOOL
StrToInt(ByVal lpSrc As LPCWSTR) As Integer
StrToIntEx(ByVal pszString As LPCWSTR,ByVal dwFlags As DWORD,ByVal piRet As Integer PTR) As BOOL
StrTrim(ByVal psz As LPSTR,ByVal pszTrimChars As LPCSTR) As BOOL
StrToIntEx(ByVal pszString As LPCSTR,ByVal dwFlags As DWORD,ByVal piRet As Integer PTR) As BOOL
StrToInt(ByVal lpSrc As LPCSTR) As Integer
SubtractRect(ByVal lprcDst As LPRECT,ByVal lprcSrc1 As LPCRECT,ByVal lprcSrc2 As LPCRECT) As BOOL
SuspendThread(ByVal hThread As HANDLE) As DWORD
SwapBuffers(ByVal hDC As HDC) As BOOL
SwapMouseButton(ByVal bSwap As BOOL) As BOOL
SwitchToThread() As BOOL
SwitchDesktop(ByVal hDesktop As HDESK) As BOOL
SwitchToFiber(ByVal lpFiber As PVOID) 
SwitchToThisWindow(ByVal As HWND,ByVal As BOOL) 
SymCleanup(ByVal hProcess As HANDLE) As BOOL
SymEnumerateModules(ByVal hProcess As HANDLE,ByVal EnumModulesCallback As PSYM_ENUMMODULES_CALLBACK,ByVal UserContext As PVOID) As BOOL
SymEnumerateSymbols(ByVal hProcess As HANDLE,ByVal BaseOfDll As DWORD,ByVal EnumSymbolsCallback As PSYM_ENUMSYMBOLS_CALLBACK,ByVal UserContext As PVOID) As BOOL
SymFunctionTableAccess(ByVal hProcess As HANDLE,ByVal AddrBase As DWORD) As LPVOID
SymGetModuleInfo(ByVal hProcess As HANDLE,ByVal dwAddr As DWORD,ByVal ModuleInfo As PIMAGEHLP_MODULE) As BOOL
SymGetSymNext(ByVal hProcess As HANDLE,ByVal Symbol As PIMAGEHLP_SYMBOL) As BOOL
SymGetOptions() As DWORD
SymGetSymPrev(ByVal hProcess As HANDLE,ByVal Symbol As PIMAGEHLP_SYMBOL) As BOOL
SymGetSymFromName(ByVal hProcess As HANDLE,ByVal Name As LPSTR,ByVal Symbol As PIMAGEHLP_SYMBOL) As BOOL
SymGetLineFromAddr(ByVal hProcess As HANDLE,ByVal dwAddr As DWORD,ByVal pdwDisplacement As PDWORD,ByVal Line As PIMAGEHLP_LINE) As BOOL
SymGetLineFromName(ByVal hProcess As HANDLE,ByVal ModuleName As LPSTR,ByVal FileName As LPSTR,ByVal dwLineNumber As DWORD,ByVal plDisplacement As PLONG,ByVal Line As PIMAGEHLP_LINE) As BOOL
SymGetLineNext(ByVal hProcess As HANDLE,ByVal Line As PIMAGEHLP_LINE) As BOOL
SymGetLinePrev(ByVal hProcess As HANDLE,ByVal Line As PIMAGEHLP_LINE) As BOOL
SymGetSymFromAddr(ByVal hProcess As HANDLE,ByVal dwAddr As DWORD,ByVal pdwDisplacement As PDWORD,ByVal Symbol As PIMAGEHLP_SYMBOL) As BOOL
SymGetSearchPath(ByVal hProcess As HANDLE,ByVal SearchPath As LPSTR,ByVal SearchPathLength As DWORD) As BOOL
SymGetModuleBase(ByVal hProcess As HANDLE,ByVal dwAddr As DWORD) As DWORD
SymInitialize(ByVal hProcess As HANDLE,ByVal UserSearchPath As LPSTR,ByVal fInvadeProcess As BOOL) As BOOL
SymLoadModule(ByVal hProcess As HANDLE,ByVal hFile As HANDLE,ByVal ImageName As PSTR,ByVal ModuleName As PSTR,ByVal BaseOfDll As DWORD,ByVal SizeOfDll As DWORD) As BOOL
SymMatchFileName(ByVal FileName As LPSTR,ByVal Match As LPSTR,ByVal FileNameStop As LPSTR PTR,ByVal MatchStop As LPSTR PTR) As BOOL
SymRegisterCallback(ByVal hProcess As HANDLE,ByVal CallbackFunction As PSYMBOL_REGISTERED_CALLBACK,ByVal UserContext As PVOID) As BOOL
SymSetSearchPath(ByVal hProcess As HANDLE,ByVal SearchPath As LPSTR) As BOOL
SymSetOptions(ByVal SymOptions As DWORD) As DWORD
SymUnDName(ByVal sym As PIMAGEHLP_SYMBOL,ByVal UnDecName As LPSTR,ByVal UnDecNameLength As DWORD) As BOOL
SymUnloadModule(ByVal hProcess As HANDLE,ByVal BaseOfDll As DWORD) As BOOL
SysAllocStringByteLen(ByVal m_pBase As zstring PTR,ByVal FunctionCall As uinteger) As BSTR
SysAllocString(ByVal pOlechar As OLECHAR PTR) As BSTR
SysAllocStringLen(ByVal pOlechar As OLECHAR PTR,ByVal uint As uinteger) As BSTR
SysFreeString(ByVal bstr As BSTR) 
SysReAllocString(ByVal pBstr As BSTR PTR,ByVal pOlechar As OLECHAR PTR) As Integer
SysReAllocStringLen(ByVal pBstr As BSTR PTR,ByVal pOlechar As OLECHAR PTR,ByVal uint As uinteger) As Integer
SysStringLen(ByVal bstr As BSTR) As uinteger
SysStringByteLen(ByVal bstr As BSTR) As uinteger
SystemTimeToVariantTime(ByVal lpSystemTime As LPSYSTEMTIME,ByVal pvtime As Double PTR) As Integer
SystemTimeToTzSpecificLocalTime(ByVal lpTimeZoneInformation As LPTIME_ZONE_INFORMATION,ByVal lpUniversalTime As LPSYSTEMTIME,ByVal lpLocalTime As LPSYSTEMTIME) As BOOL
SystemParametersInfo(ByVal uAction As UINT,ByVal uParam As UINT,ByVal ByRef As PVOID,ByVal fuWinIni As UINT) As BOOL
SystemTimeToFileTime(ByVal lpSystemTime As SYSTEMTIME PTR,ByVal lpFileTime As LPFILETIME) As BOOL
TabbedTextOut(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal lpString As LPCWSTR,ByVal nCount As Integer,ByVal nTabPositions As Integer,ByVal lpnTabStopPositions As LPINT,ByVal nTabOrigin As Integer) As LONG
TabbedTextOut(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal lpString As LPCSTR,ByVal nCount As Integer,ByVal nTabPositions As Integer,ByVal lpnTabStopPositions As LPINT,ByVal nTabOrigin As Integer) As LONG
TerminateJobObject(ByVal hJob As HANDLE,ByVal uExitCode As UINT) As BOOL
TerminateThread(ByVal hThread As HANDLE,ByVal dwExitCode As DWORD) As BOOL
TermVFW() As LONG
TerminateProcess(ByVal hProcess As HANDLE,ByVal uExitCode As UINT) As BOOL
TextOut(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal lpString As LPCWSTR,ByVal nCount As Integer) As BOOL
TextOut(ByVal hdc As HDC,ByVal x As Integer,ByVal y As Integer,ByVal lpString As LPCSTR,ByVal nCount As Integer) As BOOL
Thread32Next(ByVal hSnapshot As HANDLE,ByVal lpte As LPTHREADENTRY32) As BOOL
Thread32First(ByVal hSnapshot As HANDLE,ByVal lpte As LPTHREADENTRY32) As BOOL
TileWindows(ByVal hwndParent As HWND,ByVal wHow As UINT,ByVal lpRect As LPCRECT,ByVal cKids As UINT,ByVal lpKids As HWND PTR) As WORD
timeEndPeriod(ByVal uPeriod As UINT) As MMRESULT
timeGetTime() As DWORD
timeSetEvent(ByVal uDelay As UINT,ByVal uResolution As UINT,ByVal lpFunction As LPTIMECALLBACK,ByVal dwUser As DWORD,ByVal uFlags As UINT) As MMRESULT
timeGetDevCaps(ByVal lpTimeCaps As LPTIMECAPS,ByVal uSize As UINT) As MMRESULT
timeBeginPeriod(ByVal uPeriod As UINT) As MMRESULT
timeGetSystemTime(ByVal lpTime As LPMMTIME,ByVal uSize As UINT) As MMRESULT
timeKillEvent(ByVal uID As UINT) As MMRESULT
TlsAlloc() As DWORD
TlsFree(ByVal dwTlsIndex As DWORD) As BOOL
TlsGetValue(ByVal dwTlsIndex As DWORD) As PVOID
TlsSetValue(ByVal dwTlsIndex As DWORD,ByVal lpTlsValue As PVOID) As BOOL
ToAsciiEx(ByVal uVirtKey As UINT,ByVal uScanCode As UINT,ByVal lpKeyState As PBYTE,ByVal lpChar As LPWORD,ByVal uFlags As UINT,ByVal dwhkl As HKL) As Integer
ToAscii(ByVal uVirtKey As UINT,ByVal uScanCode As UINT,ByVal lpbKeyState As PBYTE,ByVal lpwTransKey As LPWORD,ByVal fuState As UINT) As Integer
Toolhelp32ReadProcessMemory(ByVal th32ProcessID As DWORD,ByVal lpBaseAddress As LPCVOID,ByVal lpBuffer As LPVOID,ByVal cbRead As DWORD,ByVal lpNumberOfBytesRead As LPDWORD) As BOOL
TouchFileTimes(ByVal FileHandle As HANDLE,ByVal pSystemTime As LPSYSTEMTIME) As BOOL
ToUnicodeEx(ByVal wVirtKey As UINT,ByVal wScanCode As UINT,ByVal lpKeyState As PBYTE,ByVal pwszBuff As LPWSTR,ByVal cchBuff As Integer,ByVal wFlags As UINT,ByVal dwhkl As HKL) As Integer
ToUnicode(ByVal wVirtKey As UINT,ByVal wScanCode As UINT,ByVal lpKeyState As PBYTE,ByVal pwszBuff As LPWSTR,ByVal cchBuff As Integer,ByVal wFlags As UINT) As Integer
TraceReturn(ByVal retcode As RETCODE,ByVal retcode As RETCODE) 
TraceVersion() As DWORD
TraceOpenLogFile(ByVal lpwstr As LPWSTR,ByVal lpwstr As LPWSTR,ByVal dword As DWORD) As RETCODE
TrackPopupMenu(ByVal hMenu As HMENU,ByVal uFlags As UINT,ByVal x As Integer,ByVal y As Integer,ByVal nReserved As Integer,ByVal hwnd As HWND,ByVal lprc As LPCRECT) As BOOL
TrackMouseEvent(ByVal lpEventTrack As LPTRACKMOUSEEVENT) As BOOL
TraceCloseLogFile() As RETCODE
TrackPopupMenuEx(ByVal hMenu As HMENU,ByVal un As UINT,ByVal n1 As Integer,ByVal n2 As Integer,ByVal hWnd As HWND,ByVal lpTPMParams As LPTPMPARAMS) As BOOL
TranslateName(ByVal lpAccountName As LPCSTR,ByVal AccountNameFormat As EXTENDED_NAME_FORMAT,ByVal DesiredNameFormat As EXTENDED_NAME_FORMAT,ByVal lpTranslatedName As LPSTR,ByVal nSize As PULONG) As BOOLEAN
TranslateURL(ByVal pcszURL As PCSTR,ByVal dwInFlags As DWORD,ByVal ppszTranslatedURL As PSTR PTR) As HRESULT
TransmitCommChar(ByVal nCid As HANDLE,ByVal cChar As byte) As BOOL
TranslateMessage(ByVal lpMsg As MSG PTR) As BOOL
TranslateName(ByVal lpAccountName As LPCWSTR,ByVal AccountNameFormat As EXTENDED_NAME_FORMAT,ByVal DesiredNameFormat As EXTENDED_NAME_FORMAT,ByVal lpTranslatedName As LPWSTR,ByVal nSize As PULONG) As BOOLEAN
TranslateAccelerator(ByVal hwnd As HWND,ByVal hAccTable As HACCEL,ByVal lpMsg As LPMSG) As Integer
TranslateURL(ByVal pcszURL As PCWSTR,ByVal dwInFlags As DWORD,ByVal ppszTranslatedURL As PWSTR PTR) As HRESULT
TransactNamedPipe(ByVal hNamedPipe As HANDLE,ByVal lpInBuffer As PVOID,ByVal nInBufferSize As DWORD,ByVal lpOutBuffer As PVOID,ByVal nOutBufferSize As DWORD,ByVal lpBytesRead As PDWORD,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
TransmitFile(ByVal hSocket As SOCKET,ByVal hFile As HANDLE,ByVal nNumberOfBytesToWrite As DWORD,ByVal nNumberOfBytesPerSend As DWORD,ByVal lpOverlapped As LPOVERLAPPED,ByVal lpTransmitBuffers As LPTRANSMIT_FILE_BUFFERS,ByVal dwReserved As DWORD) As BOOL
TranslateCharsetInfo(ByVal lpSrc As PDWORD,ByVal lpcs As LPCHARSETINFO,ByVal dwFlags As DWORD) As BOOL
TranslateMDISysAccel(ByVal hWndClient As HWND,ByVal lpMsg As LPMSG) As BOOL
tree_peek_ndr(ByVal source As PRPC_MESSAGE,ByVal buffer As ubyte PTR PTR,ByVal format As zstring PTR,ByVal MscPak As ubyte) 
tree_size_ndr(ByVal source As any PTR,ByVal target As PRPC_MESSAGE,ByVal format As zstring PTR,ByVal MscPak As ubyte) 
tree_into_ndr(ByVal source As any PTR,ByVal target As PRPC_MESSAGE,ByVal format As zstring PTR,ByVal MscPak As ubyte) 
TryEnterCriticalSection(ByVal lpCriticalSection As LPCRITICAL_SECTION) As BOOL
UnDecorateSymbolName(ByVal DecoratedName As LPCSTR,ByVal UnDecoratedName As LPSTR,ByVal UndecoratedLength As DWORD,ByVal Flags As DWORD) As DWORD
UnenableRouter(ByVal pOverlapped As OVERLAPPED PTR,ByVal lpdwEnableCount As LPDWORD) As DWORD
UnhandledExceptionFilter(ByVal ExceptionInfo As LPEXCEPTION_POINTERS) As LONG
UnhookWindowsHookEx(ByVal hHook As HHOOK) As BOOL
UnhookWindowsHook(ByVal nCode As Integer,ByVal pfnFilterProc As HOOKPROC) As BOOL
UnionRect(ByVal lpDestRect As LPRECT,ByVal lpSrc1Rect As LPCRECT,ByVal lpSrc2Rect As LPCRECT) As BOOL
UnlockUrlCacheEntryStream(ByVal hUrlCacheStream As HANDLE,ByVal Reserved As DWORD) As BOOL
UnlockUrlCacheEntryFile(ByVal lpszUrlName As LPCSTR,ByVal dwReserved As DWORD) As BOOL
UnlockFile(ByVal hFile As HANDLE,ByVal dwFileOffsetLow As DWORD,ByVal dwFileOffsetHigh As DWORD,ByVal nNumberOfBytesToUnlockLow As DWORD,ByVal nNumberOfBytesToUnlockHigh As DWORD) As BOOL
UnlockServiceDatabase(ByVal ScLock As SC_LOCK) As BOOL
UnlockFileEx(ByVal hFile As HANDLE,ByVal dwReserved As DWORD,ByVal nNumberOfBytesToUnlockLow As DWORD,ByVal nNumberOfBytesToUnlockHigh As DWORD,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
UnloadKeyboardLayout(ByVal HKL As HKL) As BOOL
UnloadUserProfile(ByVal hToken As HANDLE,ByVal hProfile As HANDLE) As BOOL
UnMapAndLoad(ByVal LoadedImage As PLOADED_IMAGE) As BOOL
UnmapDebugInformation(ByVal DebugInfo As PIMAGE_DEBUG_INFORMATION) As BOOL
UnmapViewOfFile(ByVal lpBaseAddress As PVOID) As BOOL
UnpackDDElParam(ByVal msg As UINT,ByVal lParam As LPARAM,ByVal puiLo As PUINT_PTR,ByVal puiHi As PUINT_PTR) As BOOL
UnRegisterTypeLib(ByVal libID As GUID PTR,ByVal wVerMajor As WORD,ByVal wVerMinor As WORD,ByVal lcid As LCID,ByVal syskind As SYSKIND) As HRESULT
UnregisterClass(ByVal lpClassName As LPCSTR,ByVal hInstance As HINSTANCE) As BOOL
UnregisterHotKey(ByVal hwnd As HWND,ByVal id As Integer) As BOOL
UnregisterDeviceNotification(ByVal Handle As HANDLE) As BOOL
UnregisterWaitEx(ByVal WaitHandle As HANDLE,ByVal CompletionEvent As HANDLE) As BOOL
UnregisterClass(ByVal lpClassName As LPCWSTR,ByVal hInstance As HINSTANCE) As BOOL
UnrealizeObject(ByVal hObject As HGDIOBJ) As BOOL
UpdateDebugInfoFileEx(ByVal ImageFileName As LPSTR,ByVal SymbolPath As LPSTR,ByVal DebugFilePath As LPSTR,ByVal NtHeaders As PIMAGE_NT_HEADERS,ByVal OldChecksum As DWORD) As BOOL
UpdateDebugInfoFile(ByVal ImageFileName As LPSTR,ByVal SymbolPath As LPSTR,ByVal DebugFilePath As LPSTR,ByVal NtHeaders As PIMAGE_NT_HEADERS) As BOOL
UpdateColors(ByVal hdc As HDC) As BOOL
UpdateResource(ByVal hUpdate As HANDLE,ByVal lpType As LPCSTR,ByVal lpName As LPCSTR,ByVal wLanguage As WORD,ByVal lpData As PVOID,ByVal cbData As DWORD) As BOOL
UpdateWindow(ByVal hwnd As HWND) As BOOL
UpdateICMRegKey(ByVal dword As DWORD,ByVal lpstr As DWORD,ByVal lpstr As LPWSTR,ByVal uint As UINT) As BOOL
UpdateResource(ByVal hUpdate As HANDLE,ByVal lpType As LPCWSTR,ByVal lpName As LPCWSTR,ByVal wLanguage As WORD,ByVal lpData As PVOID,ByVal cbData As DWORD) As BOOL
UpdateLayeredWindow(ByVal hWnd As HWND,ByVal hdcDst As HDC,ByVal pptDst As POINT PTR,ByVal psize As SIZE PTR,ByVal hdcSrc As HDC,ByVal pptSrc As POINT PTR,ByVal crKey As COLORREF,ByVal pblend As BLENDFUNCTION PTR,ByVal dwFlags As DWORD) As BOOL
UpdateICMRegKey(ByVal dword As DWORD,ByVal lpstr As DWORD,ByVal lpstr As LPSTR,ByVal uint As UINT) As BOOL
URLAssociationDialog(ByVal hwndParent As HWND,ByVal dwInFlags As DWORD,ByVal pcszFile As PCSTR,ByVal pcszURL As PCSTR,ByVal pszAppBuf As PSTR,ByVal ucAppBufLen As UINT) As HRESULT
URLAssociationDialog(ByVal hwndParent As HWND,ByVal dwInFlags As DWORD,ByVal pcszFile As PCWSTR,ByVal pcszURL As PCWSTR,ByVal pszAppBuf As PWSTR,ByVal ucAppBufLen As UINT) As HRESULT
UrlApplyScheme(ByVal pszIn As LPCWSTR,ByVal pszOut As LPWSTR,ByVal pcchOut As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlApplyScheme(ByVal pszIn As LPCSTR,ByVal pszOut As LPSTR,ByVal pcchOut As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlCreateFromPath(ByVal pszPath As LPCWSTR,ByVal pszUrl As LPWSTR,ByVal pcchUrl As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlCompare(ByVal psz1 As LPCWSTR,ByVal psz2 As LPCWSTR,ByVal fIgnoreSlash As BOOL) As Integer
UrlCombine(ByVal pszBase As LPCWSTR,ByVal pszRelative As LPCWSTR,ByVal pszCombined As LPWSTR,ByVal pcchCombined As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlCreateFromPath(ByVal pszPath As LPCSTR,ByVal pszUrl As LPSTR,ByVal pcchUrl As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlCompare(ByVal psz1 As LPCSTR,ByVal psz2 As LPCSTR,ByVal fIgnoreSlash As BOOL) As Integer
UrlCanonicalize(ByVal pszUrl As LPCSTR,ByVal pszCanonicalized As LPSTR,ByVal pcchCanonicalized As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlCanonicalize(ByVal pszUrl As LPCWSTR,ByVal pszCanonicalized As LPWSTR,ByVal pcchCanonicalized As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlCombine(ByVal pszBase As LPCSTR,ByVal pszRelative As LPCSTR,ByVal pszCombined As LPSTR,ByVal pcchCombined As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlEscape(ByVal pszUrl As LPCSTR,ByVal pszEscaped As LPSTR,ByVal pcchEscaped As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlEscape(ByVal pszUrl As LPCWSTR,ByVal pszEscaped As LPWSTR,ByVal pcchEscaped As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlGetPart(ByVal pszIn As LPCWSTR,ByVal pszOut As LPWSTR,ByVal pcchOut As LPDWORD,ByVal dwPart As DWORD,ByVal dwFlags As DWORD) As HRESULT
UrlGetPart(ByVal pszIn As LPCSTR,ByVal pszOut As LPSTR,ByVal pcchOut As LPDWORD,ByVal dwPart As DWORD,ByVal dwFlags As DWORD) As HRESULT
UrlGetLocation(ByVal psz1 As LPCWSTR) As LPCWSTR
UrlGetLocation(ByVal psz1 As LPCSTR) As LPCSTR
UrlHash(ByVal pszUrl As LPCWSTR,ByVal pbHash As LPBYTE,ByVal cbHash As DWORD) As HRESULT
UrlHash(ByVal pszUrl As LPCSTR,ByVal pbHash As LPBYTE,ByVal cbHash As DWORD) As HRESULT
UrlIs(ByVal pszUrl As LPCSTR,ByVal UrlIs As URLIS) As BOOL
UrlIsOpaque(ByVal pszURL As LPCWSTR) As BOOL
UrlIsNoHistory(ByVal pszURL As LPCWSTR) As BOOL
UrlIsOpaque(ByVal pszURL As LPCSTR) As BOOL
UrlIs(ByVal pszUrl As LPCWSTR,ByVal UrlIs As URLIS) As BOOL
UrlIsNoHistory(ByVal pszURL As LPCSTR) As BOOL
UrlUnescape(ByVal pszUrl As LPWSTR,ByVal pszUnescaped As LPWSTR,ByVal pcchUnescaped As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UrlUnescape(ByVal pszUrl As LPSTR,ByVal pszUnescaped As LPSTR,ByVal pcchUnescaped As LPDWORD,ByVal dwFlags As DWORD) As HRESULT
UserHandleGrantAccess(ByVal hUserHandle As HANDLE,ByVal hJob As HANDLE,ByVal bGrant As BOOL) As BOOL
UuidCreate(ByVal Uuid As UUID PTR) As RPC_STATUS
UuidHash(ByVal Uuid As UUID PTR,ByVal Status As RPC_STATUS PTR) As ushort
UuidEqual(ByVal Uuid1 As UUID PTR,ByVal Uuid2 As UUID PTR,ByVal Status As RPC_STATUS PTR) As Integer
UuidFromString(ByVal StringUuid As ushort PTR,ByVal Uuid As UUID PTR) As RPC_STATUS
UuidToString(ByVal Uuid As UUID PTR,ByVal StringUuid As ushort PTR PTR) As RPC_STATUS
UuidToString(ByVal Uuid As UUID PTR,ByVal StringUuid As ubyte PTR PTR) As RPC_STATUS
UuidCompare(ByVal Uuid1 As UUID PTR,ByVal Uuid2 As UUID PTR,ByVal Status As RPC_STATUS PTR) As Integer
UuidCreateNil(ByVal NilUuid As UUID PTR) As RPC_STATUS
UuidFromString(ByVal StringUuid As ubyte PTR,ByVal Uuid As UUID PTR) As RPC_STATUS
UuidIsNil(ByVal Uuid As UUID PTR,ByVal Status As RPC_STATUS PTR) As Integer
ValidateRect(ByVal hwnd As HWND,ByVal lpRect As LPCRECT) As BOOL
ValidateRgn(ByVal hwnd As HWND,ByVal hRgn As HRGN) As BOOL
ValidatePowerPolicies(ByVal As PGLOBAL_POWER_POLICY,ByVal As PPOWER_POLICY) As BOOLEAN
VarAnd(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarAdd(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarAbs(ByVal pvarIn As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarBstrFromI4(ByVal lIn As LONG,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBoolFromI2(ByVal sIn As SHORT,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBstrFromI2(ByVal iVal As SHORT,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBoolFromR4(ByVal fltIn As FLOAT,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBoolFromR8(ByVal dblIn As Double,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBoolFromDate(ByVal dateIn As DATE_,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBoolFromI4(ByVal lIn As LONG,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBstrCmp(ByVal bstrLeft As BSTR,ByVal bstrRight As BSTR,ByVal lcid As LCID,ByVal dwFlags As ULONG) As HRESULT
VarBoolFromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBoolFromDec(ByVal pdecIn As DECIMAL PTR,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBoolFromCy(ByVal cyIn As CY,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBoolFromUI8(ByVal As ULONG64,ByVal As VARIANT_BOOL PTR) As HRESULT
VarBoolFromUI4(ByVal ulIn As ULONG,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBoolFromUI2(ByVal uiIn As USHORT,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBstrCat(ByVal bstrLeft As BSTR,ByVal bstrRight As BSTR,ByVal pbstrResult As BSTR PTR) As HRESULT
VarBstrFromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromDec(ByVal pdecIn As DECIMAL PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromCy(ByVal cyIn As CY,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromUI4(ByVal ulIn As ULONG,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromUI8(ByVal As ULONG64,ByVal As LCID,ByVal As ULONG,ByVal As BSTR PTR) As HRESULT
VarBstrFromUI2(ByVal uiIn As USHORT,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromI1(ByVal cIn As byte,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromBool(ByVal boolIn As VARIANT_BOOL,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromDate(ByVal dateIn As DATE_,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBoolFromI1(ByVal cIn As byte,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBoolFromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBstrFromR8(ByVal dblIn As Double,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromR4(ByVal fltIn As FLOAT,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarBstrFromI8(ByVal As LONG64,ByVal As LCID,ByVal As ULONG,ByVal As BSTR PTR) As HRESULT
VarBoolFromI8(ByVal As LONG64,ByVal As VARIANT_BOOL PTR) As HRESULT
VarBoolFromUI1(ByVal bIn As BYTE,ByVal pboolOut As VARIANT_BOOL PTR) As HRESULT
VarBstrFromUI1(ByVal bVal As BYTE,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbstrOut As BSTR PTR) As HRESULT
VarCyAbs(ByVal cyIn As CY,ByVal pcyResult As CY PTR) As HRESULT
VarCyCmp(ByVal cyLeft As CY,ByVal cyRight As CY) As HRESULT
VarCyAdd(ByVal cyLeft As CY,ByVal cyRight As CY,ByVal pcyResult As CY PTR) As HRESULT
VarCyFromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromDec(ByVal pdecIn As DECIMAL PTR,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromUI8(ByVal As ULONG64,ByVal As CY PTR) As HRESULT
VarCyFromUI4(ByVal ulIn As ULONG,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromUI2(ByVal uiIn As USHORT,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromI1(ByVal cIn As byte,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromBool(ByVal boolIn As VARIANT_BOOL,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromDate(ByVal dateIn As DATE_,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromR8(ByVal dblIn As Double,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromR4(ByVal fltIn As FLOAT,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromI8(ByVal As LONG64,ByVal As CY PTR) As HRESULT
VarCyFromI4(ByVal lIn As LONG,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromI2(ByVal sIn As SHORT,ByVal pcyOut As CY PTR) As HRESULT
VarCyFromUI1(ByVal bIn As BYTE,ByVal pcyOut As CY PTR) As HRESULT
VarCyMul(ByVal cyLeft As CY,ByVal cyRight As CY,ByVal pcyResult As CY PTR) As HRESULT
VarCyMulI4(ByVal cyLeft As CY,ByVal lRight As LONG,ByVal pcyResult As CY PTR) As HRESULT
VarCat(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarCyMulI8(ByVal As CY,ByVal As LONG64,ByVal As CY PTR) As HRESULT
VarCyNeg(ByVal cyIn As CY,ByVal pcyResult As CY PTR) As HRESULT
VarCyRound(ByVal cyIn As CY,ByVal cDecimals As INT_,ByVal pcyResult As CY PTR) As HRESULT
VarCyInt(ByVal cyIn As CY,ByVal pcyResult As CY PTR) As HRESULT
VarCyFix(ByVal cyIn As CY,ByVal pcyResult As CY PTR) As HRESULT
VarCyCmpR8(ByVal cyLeft As CY,ByVal dblRight As Double) As HRESULT
VarCmp(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal lcid As LCID,ByVal dwFlags As ULONG) As HRESULT
VarCySub(ByVal cyLeft As CY,ByVal cyRight As CY,ByVal pcyResult As CY PTR) As HRESULT
VarCyFromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pcyOut As CY PTR) As HRESULT
VarDecFromI2(ByVal uiIn As SHORT,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromCy(ByVal cyIn As CY,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDiv(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarDecNeg(ByVal pdecIn As DECIMAL PTR,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecAbs(ByVal pdecIn As DECIMAL PTR,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecAdd(ByVal pdecLeft As DECIMAL PTR,ByVal pdecRight As DECIMAL PTR,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecCmp(ByVal pdecLeft As DECIMAL PTR,ByVal pdecRight As DECIMAL PTR) As HRESULT
VarDecCmpR8(ByVal pdecLeft As DECIMAL PTR,ByVal dblRight As Double) As HRESULT
VarDecDiv(ByVal pdecLeft As DECIMAL PTR,ByVal pdecRight As DECIMAL PTR,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecFix(ByVal pdecIn As DECIMAL PTR,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecInt(ByVal pdecIn As DECIMAL PTR,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecMul(ByVal pdecLeft As DECIMAL PTR,ByVal pdecRight As DECIMAL PTR,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecRound(ByVal pdecIn As DECIMAL PTR,ByVal cDecimals As Integer,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecSub(ByVal pdecLeft As DECIMAL PTR,ByVal pdecRight As DECIMAL PTR,ByVal pdecResult As DECIMAL PTR) As HRESULT
VarDecFromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromI4(ByVal lIn As LONG,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromUI8(ByVal As ULONG64,ByVal As DECIMAL PTR) As HRESULT
VarDecFromUI4(ByVal ulIn As ULONG,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromUI1(ByVal bIn As BYTE,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromUI2(ByVal uiIn As USHORT,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromI1(ByVal cIn As byte,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromBool(ByVal boolIn As VARIANT_BOOL,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromDate(ByVal dateIn As DATE_,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromR8(ByVal dblIn As Double,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromR4(ByVal fltIn As FLOAT,ByVal pdecOut As DECIMAL PTR) As HRESULT
VarDecFromI8(ByVal As LONG64,ByVal As DECIMAL PTR) As HRESULT
VarDateFromUdateEx(ByVal pudateIn As UDATE PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromUdate(ByVal pudateIn As UDATE PTR,ByVal dwFlags As ULONG,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromDec(ByVal pdecIn As DECIMAL PTR,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromCy(ByVal cyIn As CY,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromBool(ByVal boolIn As VARIANT_BOOL,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromUI8(ByVal As ULONG64,ByVal As DATE_ PTR) As HRESULT
VarDateFromUI4(ByVal ulIn As ULONG,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromUI2(ByVal uiIn As USHORT,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromI1(ByVal cIn As byte,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromR8(ByVal dblIn As Double,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromR4(ByVal fltIn As FLOAT,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromI8(ByVal As LONG64,ByVal As DATE_ PTR) As HRESULT
VarDateFromI4(ByVal lIn As LONG,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromI2(ByVal sIn As SHORT,ByVal pdateOut As DATE_ PTR) As HRESULT
VarDateFromUI1(ByVal bIn As BYTE,ByVal pdateOut As DATE_ PTR) As HRESULT
VarEqv(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarFix(ByVal pvarIn As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarI1FromDec(ByVal pdecIn As DECIMAL PTR,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromI8(ByVal As LONG64,ByVal As zstring PTR) As HRESULT
VarImp(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarI8FromUI2(ByVal As USHORT,ByVal As LONG64 PTR) As HRESULT
VarI8FromStr(ByVal As OLECHAR PTR,ByVal As LCID,ByVal As ULONG,ByVal As LONG64 PTR) As HRESULT
VarI8FromDate(ByVal As DATE_,ByVal As LONG64 PTR) As HRESULT
VarI8FromR8(ByVal As Double,ByVal As LONG64 PTR) As HRESULT
VarI8FromBool(ByVal As VARIANT_BOOL,ByVal As LONG64 PTR) As HRESULT
VarIdiv(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarInt(ByVal pvarIn As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarI8FromR4(ByVal As FLOAT,ByVal As LONG64 PTR) As HRESULT
VarI8FromI4(ByVal As LONG,ByVal As LONG64 PTR) As HRESULT
VarI8FromI2(ByVal As SHORT,ByVal As LONG64 PTR) As HRESULT
VarI8FromUI1(ByVal As BYTE,ByVal As LONG64 PTR) As HRESULT
VarI4FromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal plOut As LONG PTR) As HRESULT
VarI4FromDec(ByVal pdecIn As DECIMAL PTR,ByVal plOut As LONG PTR) As HRESULT
VarI4FromCy(ByVal cyIn As CY,ByVal plOut As LONG PTR) As HRESULT
VarI8FromUI4(ByVal As ULONG,ByVal As LONG64 PTR) As HRESULT
VarI8FromUI8(ByVal As ULONG64,ByVal As LONG64 PTR) As HRESULT
VarI8FromDec(ByVal pdecIn As DECIMAL PTR,ByVal As LONG64 PTR) As HRESULT
VarI8FromInt(ByVal intIn As INT_,ByVal As LONG64 PTR) As HRESULT
VarI4FromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal plOut As LONG PTR) As HRESULT
VarI4FromUI8(ByVal As ULONG64,ByVal As LONG PTR) As HRESULT
VarI4FromUI4(ByVal ulIn As ULONG,ByVal plOut As LONG PTR) As HRESULT
VarI4FromUI2(ByVal uiIn As USHORT,ByVal plOut As LONG PTR) As HRESULT
VarI4FromI1(ByVal cIn As byte,ByVal plOut As LONG PTR) As HRESULT
VarI4FromBool(ByVal boolIn As VARIANT_BOOL,ByVal plOut As LONG PTR) As HRESULT
VarI4FromDate(ByVal dateIn As DATE_,ByVal plOut As LONG PTR) As HRESULT
VarI4FromR8(ByVal dblIn As Double,ByVal plOut As LONG PTR) As HRESULT
VarI4FromR4(ByVal fltIn As FLOAT,ByVal plOut As LONG PTR) As HRESULT
VarI4FromI8(ByVal As LONG64,ByVal As LONG PTR) As HRESULT
VarI4FromI2(ByVal sIn As SHORT,ByVal plOut As LONG PTR) As HRESULT
VarI4FromUI1(ByVal bIn As BYTE,ByVal plOut As LONG PTR) As HRESULT
VarI2FromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal psOut As SHORT PTR) As HRESULT
VarI8FromCy(ByVal As CY,ByVal As LONG64 PTR) As HRESULT
VarI8FromDisp(ByVal As IDispatch PTR,ByVal As LCID,ByVal As LONG64 PTR) As HRESULT
VarI1FromUI1(ByVal bIn As BYTE,ByVal pcOut As zstring PTR) As HRESULT
VarI2FromDec(ByVal pdecIn As DECIMAL PTR,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromCy(ByVal cyIn As CY,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromUI8(ByVal As ULONG64,ByVal As SHORT PTR) As HRESULT
VarI2FromUI4(ByVal ulIn As ULONG,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromUI2(ByVal uiIn As USHORT,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromI1(ByVal cIn As byte,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromBool(ByVal boolIn As VARIANT_BOOL,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromDate(ByVal dateIn As DATE_,ByVal psOut As SHORT PTR) As HRESULT
VarI1FromI2(ByVal uiIn As SHORT,ByVal pcOut As zstring PTR) As HRESULT
VarI2FromR8(ByVal dblIn As Double,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromR4(ByVal fltIn As FLOAT,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromI8(ByVal As LONG64,ByVal As SHORT PTR) As HRESULT
VarI2FromI4(ByVal lIn As LONG,ByVal psOut As SHORT PTR) As HRESULT
VarI2FromUI1(ByVal bIn As BYTE,ByVal psOut As SHORT PTR) As HRESULT
VarI8FromI1(ByVal As byte,ByVal As LONG64 PTR) As HRESULT
VarI1FromBool(ByVal boolIn As VARIANT_BOOL,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromI4(ByVal lIn As LONG,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromCy(ByVal cyIn As CY,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromR4(ByVal fltIn As FLOAT,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromR8(ByVal dblIn As Double,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromDate(ByVal dateIn As DATE_,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromUI2(ByVal uiIn As USHORT,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromUI4(ByVal ulIn As ULONG,ByVal pcOut As zstring PTR) As HRESULT
VarI1FromUI8(ByVal As ULONG64,ByVal As zstring PTR) As HRESULT
VariantClear(ByVal pvarg As VARIANTARG PTR) As HRESULT
VariantInit(ByVal pvarg As VARIANTARG PTR) 
VariantTimeToDosDateTime(ByVal vtime As Double,ByVal pwDosDate As ushort PTR,ByVal pwDosTime As ushort PTR) As Integer
VariantCopy(ByVal pvargDest As VARIANTARG PTR,ByVal pvargSrc As VARIANTARG PTR) As HRESULT
VariantChangeTypeEx(ByVal pvargDest As VARIANTARG PTR,ByVal pvarSrc As VARIANTARG PTR,ByVal lcid As LCID,ByVal wFlags As ushort,ByVal vt As VARTYPE) As HRESULT
VariantChangeType(ByVal pvargDest As VARIANTARG PTR,ByVal pvarSrc As VARIANTARG PTR,ByVal wFlags As ushort,ByVal vt As VARTYPE) As HRESULT
VariantTimeToSystemTime(ByVal vtime As Double,ByVal lpSystemTime As LPSYSTEMTIME) As Integer
VariantCopyInd(ByVal pvarDest As VARIANT PTR,ByVal pvargSrc As VARIANTARG PTR) As HRESULT
VarMod(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarMul(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarNot(ByVal pvarIn As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarNumFromParseNum(ByVal pnumprs As NUMPARSE PTR,ByVal rgbDig As BYTE PTR,ByVal dwVtBits As ULONG,ByVal pvar As VARIANT PTR) As HRESULT
VarNeg(ByVal pvarIn As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarOr(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarParseNumFromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pnumprs As NUMPARSE PTR,ByVal rgbDig As BYTE PTR) As HRESULT
VarPow(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarR8Pow(ByVal dblLeft As Double,ByVal dblRight As Double,ByVal pdblResult As Double PTR) As HRESULT
VarR8Round(ByVal dblIn As Double,ByVal cDecimals As Integer,ByVal pdblResult As Double PTR) As HRESULT
VarR4CmpR8(ByVal fltLeft As Single,ByVal dblRight As Double) As HRESULT
VarR8FromUI2(ByVal uiIn As USHORT,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromI1(ByVal cIn As byte,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromBool(ByVal boolIn As VARIANT_BOOL,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromDate(ByVal dateIn As DATE_,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromR4(ByVal fltIn As FLOAT,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromI8(ByVal As LONG64,ByVal As Double PTR) As HRESULT
VarR4FromDec(ByVal pdecIn As DECIMAL PTR,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR4FromCy(ByVal cyIn As CY,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR8FromI4(ByVal lIn As LONG,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromUI4(ByVal ulIn As ULONG,ByVal pdblOut As Double PTR) As HRESULT
VarR4FromUI1(ByVal bIn As BYTE,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR4FromI2(ByVal sIn As SHORT,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR8FromUI1(ByVal bIn As BYTE,ByVal pdblOut As Double PTR) As HRESULT
VarR4FromI8(ByVal As LONG64,ByVal As FLOAT PTR) As HRESULT
VarR4FromR8(ByVal dblIn As Double,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR4FromDate(ByVal dateIn As DATE_,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR4FromBool(ByVal boolIn As VARIANT_BOOL,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR8FromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromDec(ByVal pdecIn As DECIMAL PTR,ByVal pdblOut As Double PTR) As HRESULT
VarR4FromI1(ByVal cIn As byte,ByVal pfltOut As FLOAT PTR) As HRESULT
VarRound(ByVal pvarIn As LPVARIANT,ByVal cDecimals As Integer,ByVal pvarResult As LPVARIANT) As HRESULT
VarR8FromCy(ByVal cyIn As CY,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromI2(ByVal sIn As SHORT,ByVal pdblOut As Double PTR) As HRESULT
VarR8FromUI8(ByVal As ULONG64,ByVal As Double PTR) As HRESULT
VarR4FromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR4FromI4(ByVal lIn As LONG,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR4FromUI2(ByVal uiIn As USHORT,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR4FromUI4(ByVal ulIn As ULONG,ByVal pfltOut As FLOAT PTR) As HRESULT
VarR4FromUI8(ByVal As ULONG64,ByVal As FLOAT PTR) As HRESULT
VarR4FromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pfltOut As FLOAT PTR) As HRESULT
VarSub(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VarUI4FromI4(ByVal lIn As LONG,ByVal pulOut As ULONG PTR) As HRESULT
VarUI2FromI4(ByVal lIn As LONG,ByVal puiOut As USHORT PTR) As HRESULT
VarUI4FromI2(ByVal uiIn As SHORT,ByVal pulOut As ULONG PTR) As HRESULT
VarUI8FromDisp(ByVal As IDispatch PTR,ByVal As LCID,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromCy(ByVal As CY,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromInt(ByVal As INT_,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromDec(ByVal As DECIMAL PTR,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromUI4(ByVal As ULONG,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromUI2(ByVal As USHORT,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromI4(ByVal As LONG,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromI1(ByVal As byte,ByVal As ULONG64 PTR) As HRESULT
VarUI2FromCy(ByVal cyIn As CY,ByVal puiOut As USHORT PTR) As HRESULT
VarUI8FromI2(ByVal As SHORT,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromBool(ByVal As VARIANT_BOOL,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromStr(ByVal As OLECHAR PTR,ByVal As LCID,ByVal As ULONG,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromDate(ByVal As DATE_,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromR8(ByVal As Double,ByVal As ULONG64 PTR) As HRESULT
VarUI8FromR4(ByVal As FLOAT,ByVal As ULONG64 PTR) As HRESULT
VarUI2FromUI1(ByVal bIn As BYTE,ByVal puiOut As USHORT PTR) As HRESULT
VarUI8FromUI1(ByVal As BYTE,ByVal As ULONG64 PTR) As HRESULT
VarUI2FromI2(ByVal uiIn As SHORT,ByVal puiOut As USHORT PTR) As HRESULT
VarUI4FromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pulOut As ULONG PTR) As HRESULT
VarUI4FromDec(ByVal pdecIn As DECIMAL PTR,ByVal pulOut As ULONG PTR) As HRESULT
VarUI4FromCy(ByVal cyIn As CY,ByVal pulOut As ULONG PTR) As HRESULT
VarUI4FromUI8(ByVal As ULONG64,ByVal As ULONG PTR) As HRESULT
VarUI4FromUI1(ByVal bIn As BYTE,ByVal pulOut As ULONG PTR) As HRESULT
VarUI2FromI8(ByVal As LONG64,ByVal As USHORT PTR) As HRESULT
VarUI2FromR4(ByVal fltIn As FLOAT,ByVal puiOut As USHORT PTR) As HRESULT
VarUI2FromR8(ByVal dblIn As Double,ByVal puiOut As USHORT PTR) As HRESULT
VarUI2FromDate(ByVal dateIn As DATE_,ByVal puiOut As USHORT PTR) As HRESULT
VarUI2FromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal puiOut As USHORT PTR) As HRESULT
VarUI4FromUI2(ByVal uiIn As USHORT,ByVal pulOut As ULONG PTR) As HRESULT
VarUI1FromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromDec(ByVal pdecIn As DECIMAL PTR,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromCy(ByVal cyIn As CY,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromUI8(ByVal As ULONG64,ByVal As BYTE PTR) As HRESULT
VarUI1FromUI4(ByVal ulIn As ULONG,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromUI2(ByVal uiIn As USHORT,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromI1(ByVal cIn As byte,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromBool(ByVal boolIn As VARIANT_BOOL,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromDate(ByVal dateIn As DATE_,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromR8(ByVal dblIn As Double,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromR4(ByVal fltIn As FLOAT,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromI8(ByVal As LONG64,ByVal As BYTE PTR) As HRESULT
VarUI1FromI4(ByVal lIn As LONG,ByVal pbOut As BYTE PTR) As HRESULT
VarUI1FromI2(ByVal sIn As SHORT,ByVal pbOut As BYTE PTR) As HRESULT
VarUI2FromBool(ByVal boolIn As VARIANT_BOOL,ByVal puiOut As USHORT PTR) As HRESULT
VarUI2FromI1(ByVal cIn As byte,ByVal puiOut As USHORT PTR) As HRESULT
VarUI4FromI1(ByVal cIn As byte,ByVal pulOut As ULONG PTR) As HRESULT
VarUI4FromBool(ByVal boolIn As VARIANT_BOOL,ByVal pulOut As ULONG PTR) As HRESULT
VarUI2FromUI4(ByVal ulIn As ULONG,ByVal puiOut As USHORT PTR) As HRESULT
VarUI2FromUI8(ByVal As ULONG64,ByVal As USHORT PTR) As HRESULT
VarUI8FromI8(ByVal As LONG64,ByVal As ULONG64 PTR) As HRESULT
VarUI2FromDec(ByVal pdecIn As DECIMAL PTR,ByVal puiOut As USHORT PTR) As HRESULT
VarUI2FromDisp(ByVal pdispIn As IDispatch PTR,ByVal lcid As LCID,ByVal puiOut As USHORT PTR) As HRESULT
VarUI4FromStr(ByVal strIn As OLECHAR PTR,ByVal lcid As LCID,ByVal dwFlags As ULONG,ByVal pulOut As ULONG PTR) As HRESULT
VarUI4FromDate(ByVal dateIn As DATE_,ByVal pulOut As ULONG PTR) As HRESULT
VarUI4FromR8(ByVal dblIn As Double,ByVal pulOut As ULONG PTR) As HRESULT
VarUI4FromR4(ByVal fltIn As FLOAT,ByVal pulOut As ULONG PTR) As HRESULT
VarUI4FromI8(ByVal As LONG64,ByVal As ULONG PTR) As HRESULT
VarUdateFromDate(ByVal dateIn As DATE_,ByVal dwFlags As ULONG,ByVal pudateOut As UDATE PTR) As HRESULT
VarXor(ByVal pvarLeft As LPVARIANT,ByVal pvarRight As LPVARIANT,ByVal pvarResult As LPVARIANT) As HRESULT
VectorFromBstr(ByVal bstr As BSTR,ByVal ppsa As SAFEARRAY PTR PTR) As HRESULT
VerFindFile(ByVal uFlags As DWORD,ByVal szFileName As LPSTR,ByVal szWinDir As LPSTR,ByVal szAppDir As LPSTR,ByVal szCurDir As LPSTR,ByVal lpuCurDirLen As PUINT,ByVal szDestDir As LPSTR,ByVal lpuDestDirLen As PUINT) As DWORD
VerFindFile(ByVal uFlags As DWORD,ByVal szFileName As LPWSTR,ByVal szWinDir As LPWSTR,ByVal szAppDir As LPWSTR,ByVal szCurDir As LPWSTR,ByVal lpuCurDirLen As PUINT,ByVal szDestDir As LPWSTR,ByVal lpuDestDirLen As PUINT) As DWORD
VerInstallFile(ByVal uFlags As DWORD,ByVal szSrcFileName As LPWSTR,ByVal szDestFileName As LPWSTR,ByVal szSrcDir As LPWSTR,ByVal szDestDir As LPWSTR,ByVal szCurDir As LPWSTR,ByVal szTmpFile As LPWSTR,ByVal lpuTmpFileLen As PUINT) As DWORD
VerInstallFile(ByVal uFlags As DWORD,ByVal szSrcFileName As LPSTR,ByVal szDestFileName As LPSTR,ByVal szSrcDir As LPSTR,ByVal szDestDir As LPSTR,ByVal szCurDir As LPSTR,ByVal szTmpFile As LPSTR,ByVal lpuTmpFileLen As PUINT) As DWORD
VerifyVersionInfo(ByVal lpVersionInformation As LPOSVERSIONINFOEXA,ByVal dwTypeMask As DWORD,ByVal dwlConditionMask As DWORDLONG) As BOOL
VerifySignature(ByVal phContext As PCtxtHandle,ByVal pMessage As PSecBufferDesc,ByVal MessageSeqNo As ULONG,ByVal pfQOP As PULONG) As SECURITY_STATUS
VerifyVersionInfo(ByVal lpVersionInformation As LPOSVERSIONINFOEXW,ByVal dwTypeMask As DWORD,ByVal dwlConditionMask As DWORDLONG) As BOOL
VerLanguageName(ByVal wLang As DWORD,ByVal szLang As LPSTR,ByVal nSize As DWORD) As DWORD
VerLanguageName(ByVal wLang As DWORD,ByVal szLang As LPWSTR,ByVal nSize As DWORD) As DWORD
VerQueryValue(ByVal pBlock As LPVOID,ByVal lpSubBlock As LPSTR,ByVal lplpBuffer As LPVOID PTR,ByVal puLen As PUINT) As BOOL
VerQueryValue(ByVal pBlock As LPVOID,ByVal lpSubBlock As LPWSTR,ByVal lplpBuffer As LPVOID PTR,ByVal puLen As PUINT) As BOOL
VerSetConditionMask(ByVal ConditionMask As ULONGLONG,ByVal TypeMask As DWORD,ByVal Condition As BYTE) As ULONGLONG
VideoForWindowsVersion() As DWORD
VirtualFree(ByVal lpAddress As PVOID,ByVal dwSize As DWORD,ByVal dwFreeType As DWORD) As BOOL
VirtualLock(ByVal lpAddress As PVOID,ByVal dwSize As DWORD) As BOOL
VirtualProtect(ByVal lpAddress As PVOID,ByVal dwSize As DWORD,ByVal flNewProtect As DWORD,ByVal lpflOldProtect As PDWORD) As BOOL
VirtualUnlock(ByVal lpAddress As PVOID,ByVal dwSize As DWORD) As BOOL
VirtualAlloc(ByVal lpAddress As PVOID,ByVal dwSize As DWORD,ByVal flAllocationType As DWORD,ByVal flProtect As DWORD) As PVOID
VirtualAllocEx(ByVal hProcess As HANDLE,ByVal lpAddress As PVOID,ByVal dwSize As DWORD,ByVal flAllocationType As DWORD,ByVal flProtect As DWORD) As PVOID
VirtualFreeEx(ByVal hProcess As HANDLE,ByVal lpAddress As PVOID,ByVal dwSize As DWORD,ByVal dwFreeType As DWORD) As BOOL
VirtualQueryEx(ByVal hProcess As HANDLE,ByVal lpAddress As LPCVOID,ByVal lpBuffer As PMEMORY_BASIC_INFORMATION,ByVal dwLength As DWORD) As DWORD
VirtualQuery(ByVal lpAddress As LPCVOID,ByVal lpBuffer As PMEMORY_BASIC_INFORMATION,ByVal dwLength As DWORD) As DWORD
VirtualProtectEx(ByVal hProcess As HANDLE,ByVal lpAddress As PVOID,ByVal dwSize As DWORD,ByVal flNewProtect As DWORD,ByVal lpflOldProtect As PDWORD) As BOOL
VkKeyScanEx(ByVal ch As CHAR,ByVal dwhkl As HKL) As SHORT
VkKeyScan(ByVal cChar As CHAR) As SHORT
VkKeyScanEx(ByVal ch As WCHAR,ByVal dwhkl As HKL) As SHORT
VkKeyScan(ByVal cChar As WCHAR) As SHORT
WaitForMultipleObjectsEx(ByVal nCount As DWORD,ByVal lpHandles As HANDLE PTR,ByVal bWaitAll As BOOL,ByVal dwMilliseconds As DWORD,ByVal bAlertable As BOOL) As DWORD
WaitForPrinterChange(ByVal hPrinter As HANDLE,ByVal flags As DWORD) As DWORD
WaitForSingleObject(ByVal hHandle As HANDLE,ByVal dwMilliseconds As DWORD) As DWORD
WaitMessage() As BOOL
WaitCommEvent(ByVal hFile As HANDLE,ByVal lpEvtMask As PDWORD,ByVal lpOverlapped As LPOVERLAPPED) As BOOL
WaitNamedPipe(ByVal lpNamedPipeName As LPCSTR,ByVal nTimeOut As DWORD) As BOOL
WaitForMultipleObjects(ByVal nCount As DWORD,ByVal lpHandles As HANDLE PTR,ByVal bWaitAll As BOOL,ByVal dwMilliseconds As DWORD) As DWORD
WaitForSingleObjectEx(ByVal hHandle As HANDLE,ByVal dwMilliseconds As DWORD,ByVal bAlertable As BOOL) As DWORD
WaitForDebugEvent(ByVal lpDebugEvent As LPDEBUG_EVENT,ByVal dwMilliseconds As DWORD) As BOOL
WaitForInputIdle(ByVal hProcess As HANDLE,ByVal dwMilliseconds As DWORD) As DWORD
WaitNamedPipe(ByVal lpNamedPipeName As LPCWSTR,ByVal nTimeOut As DWORD) As BOOL
waveInClose(ByVal hWaveIn As HWAVEIN) As MMRESULT
waveOutWrite(ByVal hWaveOut As HWAVEOUT,ByVal lpWaveOutHdr As LPWAVEHDR,ByVal uSize As UINT) As MMRESULT
waveInPrepareHeader(ByVal hWaveIn As HWAVEIN,ByVal lpWaveInHdr As LPWAVEHDR,ByVal uSize As UINT) As MMRESULT
waveOutGetNumDevs() As UINT
waveOutGetVolume(ByVal uDeviceID As HWAVEOUT,ByVal lpdwVolume As PDWORD) As MMRESULT
waveInGetErrorText(ByVal err As MMRESULT,ByVal lpText As LPSTR,ByVal uSize As UINT) As MMRESULT
waveInGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPWAVEINCAPSA,ByVal uSize As UINT) As MMRESULT
waveOutGetErrorText(ByVal err As MMRESULT,ByVal lpText As LPSTR,ByVal uSize As UINT) As MMRESULT
waveOutGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPWAVEOUTCAPSA,ByVal uSize As UINT) As MMRESULT
waveOutSetVolume(ByVal uDeviceID As HWAVEOUT,ByVal dwVolume As DWORD) As MMRESULT
waveOutOpen(ByVal lphWaveOut As LPHWAVEOUT,ByVal uDeviceID As UINT,ByVal lpFormat As LPCWAVEFORMATEX,ByVal dwCallback As DWORD,ByVal dwInstance As DWORD,ByVal dwFlags As DWORD) As MMRESULT
waveOutClose(ByVal hWaveOut As HWAVEOUT) As MMRESULT
waveOutPrepareHeader(ByVal hWaveOut As HWAVEOUT,ByVal lpWaveOutHdr As LPWAVEHDR,ByVal uSize As UINT) As MMRESULT
waveOutUnprepareHeader(ByVal hWaveOut As HWAVEOUT,ByVal lpWaveOutHdr As LPWAVEHDR,ByVal uSize As UINT) As MMRESULT
waveInUnprepareHeader(ByVal hWaveIn As HWAVEIN,ByVal lpWaveInHdr As LPWAVEHDR,ByVal uSize As UINT) As MMRESULT
waveOutPause(ByVal hWaveOut As HWAVEOUT) As MMRESULT
waveOutRestart(ByVal hWaveOut As HWAVEOUT) As MMRESULT
waveOutReset(ByVal hWaveOut As HWAVEOUT) As MMRESULT
waveOutBreakLoop(ByVal hWaveOut As HWAVEOUT) As MMRESULT
waveOutGetPosition(ByVal hWaveOut As HWAVEOUT,ByVal lpInfo As LPMMTIME,ByVal uSize As UINT) As MMRESULT
waveOutGetPitch(ByVal hWaveOut As HWAVEOUT,ByVal lpdwPitch As PDWORD) As MMRESULT
waveOutSetPitch(ByVal hWaveOut As HWAVEOUT,ByVal dwPitch As DWORD) As MMRESULT
waveOutGetPlaybackRate(ByVal hWaveOut As HWAVEOUT,ByVal lpdwRate As PDWORD) As MMRESULT
waveOutSetPlaybackRate(ByVal hWaveOut As HWAVEOUT,ByVal dwRate As DWORD) As MMRESULT
waveInGetErrorText(ByVal err As MMRESULT,ByVal lpText As LPWSTR,ByVal uSize As UINT) As MMRESULT
waveInGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPWAVEINCAPSW,ByVal uSize As UINT) As MMRESULT
waveOutGetErrorText(ByVal err As MMRESULT,ByVal lpText As LPWSTR,ByVal uSize As UINT) As MMRESULT
waveOutGetDevCaps(ByVal uDeviceID As UINT,ByVal lpCaps As LPWAVEOUTCAPSW,ByVal uSize As UINT) As MMRESULT
waveOutGetID(ByVal hWaveOut As HWAVEOUT,ByVal lpuDeviceID As LPUINT) As MMRESULT
waveOutMessage(ByVal hWaveOut As HWAVEOUT,ByVal msg As UINT,ByVal dw1 As DWORD,ByVal dw2 As DWORD) As MMRESULT
waveInGetNumDevs() As UINT
waveInOpen(ByVal lphWaveIn As LPHWAVEIN,ByVal uDeviceID As UINT,ByVal lpFormat As LPCWAVEFORMATEX,ByVal dwCallback As DWORD,ByVal dwInstance As DWORD,ByVal dwFlags As DWORD) As MMRESULT
waveInMessage(ByVal hWaveIn As HWAVEIN,ByVal msg As UINT,ByVal dw1 As DWORD,ByVal dw2 As DWORD) As MMRESULT
waveInGetID(ByVal hWaveIn As HWAVEIN,ByVal lpuDeviceID As LPUINT) As MMRESULT
waveInGetPosition(ByVal hWaveIn As HWAVEIN,ByVal lpInfo As LPMMTIME,ByVal uSize As UINT) As MMRESULT
waveInReset(ByVal hWaveIn As HWAVEIN) As MMRESULT
waveInStop(ByVal hWaveIn As HWAVEIN) As MMRESULT
waveInStart(ByVal hWaveIn As HWAVEIN) As MMRESULT
waveInAddBuffer(ByVal hWaveIn As HWAVEIN,ByVal lpWaveInHdr As LPWAVEHDR,ByVal uSize As UINT) As MMRESULT
wglCreateLayerContext(ByVal hdc As HDC,ByVal ByValt As Integer) As HGLRC
wglCreateContext(ByVal hdc As HDC) As HGLRC
wglCopyContext(ByVal hglrc As HGLRC,ByVal hglrc As HGLRC,ByVal uint As UINT) As BOOL
wglDescribeLayerPlane(ByVal hdc As HDC,ByVal ByValt As Integer,ByVal ByValt As Integer,ByVal uint As UINT,ByVal TLPLAYERPLANEDESCRIPTOR As LPLAYERPLANEDESCRIPTOR) As BOOL
wglDeleteContext(ByVal hglrc As HGLRC) As BOOL
wglGetCurrentDC() As HDC
wglGetCurrentContext() As HGLRC
wglGetLayerPaletteEntries(ByVal hdc As HDC,ByVal ByValt As Integer,ByVal ByValt As Integer,ByVal ByValt As Integer,ByVal pColorref As COLORREF PTR) As Integer
wglGetProcAddress(ByVal lpcstr As LPCSTR) As PROC
wglMakeCurrent(ByVal hdc As HDC,ByVal hglrc As HGLRC) As BOOL
wglRealizeLayerPalette(ByVal hdc As HDC,ByVal ByValt As Integer,ByVal bool As BOOL) As BOOL
wglSwapLayerBuffers(ByVal hdc As HDC,ByVal uint As UINT) As BOOL
wglShareLists(ByVal hglrc As HGLRC,ByVal hglrc As HGLRC) As BOOL
wglSetLayerPaletteEntries(ByVal hdc As HDC,ByVal ByValt As Integer,ByVal ByValt As Integer,ByVal ByValt As Integer,ByVal pColorref As COLORREF PTR) As Integer
wglUseFontBitmaps(ByVal hdc As HDC,ByVal dword As DWORD,ByVal dword As DWORD,ByVal dword As DWORD) As BOOL
wglUseFontOutlines(ByVal hdc As HDC,ByVal dword As DWORD,ByVal dword As DWORD,ByVal dword As DWORD,ByVal float As FLOAT,ByVal float As FLOAT,ByVal ByValt As Integer,ByVal TLPGLYPHMETRICSFLOAT As LPGLYPHMETRICSFLOAT) As BOOL
WidenPath(ByVal hdc As HDC) As BOOL
WideCharToMultiByte(ByVal CodePage As UINT,ByVal dwFlags As DWORD,ByVal lpWideCharStr As LPCWSTR,ByVal cchWideChar As Integer,ByVal lpMultiByteStr As LPSTR,ByVal cchMultiByte As Integer,ByVal lpDefaultChar As LPCSTR,ByVal lpUsedDefaultChar As LPBOOL) As Integer
WindowFromDC(ByVal hDC As HDC) As HWND
WindowFromAccessibleObject(ByVal TIAccessible As IAccessible PTR,ByVal phwnd As HWND PTR) As HRESULT
WindowFromPoint(ByVal xPoint As POINT) As HWND
WinExec(ByVal lpCmdLine As LPCSTR,ByVal nCmdShow As UINT) As UINT
WinHelp(ByVal hwnd As HWND,ByVal lpHelpFile As LPCSTR,ByVal wCommand As UINT,ByVal dwData As DWORD) As BOOL
WinHelp(ByVal hwnd As HWND,ByVal lpHelpFile As LPCWSTR,ByVal wCommand As UINT,ByVal dwData As DWORD) As BOOL
WinLoadTrustProvider(ByVal As GUID PTR) As BOOL
WNetConnectionDialog1(ByVal lpConnDlgStruct As LPCONNECTDLGSTRUCTW) As DWORD
WNetGetNetworkInformation(ByVal lpProvider As LPCSTR,ByVal lpNetInfoStruct As LPNETINFOSTRUCT) As DWORD
WNetConnectionDialog(ByVal hwnd As HWND,ByVal dwType As DWORD) As DWORD
WNetCancelConnection(ByVal lpszName As LPCWSTR,ByVal bForce As BOOL) As DWORD
WNetCancelConnection2(ByVal lpName As LPCWSTR,ByVal dwFlags As DWORD,ByVal fForce As BOOL) As DWORD
WNetAddConnection3(ByVal hwndOwner As HWND,ByVal lpNetResource As LPNETRESOURCEW,ByVal lpPassword As LPCWSTR,ByVal lpUserName As LPCWSTR,ByVal dwFlags As DWORD) As DWORD
WNetGetConnection(ByVal lpszLocalName As LPCWSTR,ByVal lpszRemoteName As LPWSTR,ByVal cbRemoteName As PDWORD) As DWORD
WNetUseConnection(ByVal As HWND,ByVal As LPNETRESOURCEW,ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As DWORD,ByVal As LPWSTR,ByVal As PDWORD,ByVal As PDWORD) As DWORD
WNetSetConnection(ByVal As LPCWSTR,ByVal As DWORD,ByVal As PVOID) As DWORD
WNetAddConnection2(ByVal lpNetResource As LPNETRESOURCEW,ByVal lpPassword As LPCWSTR,ByVal lpUserName As LPCWSTR,ByVal dwFlags As DWORD) As DWORD
WNetDisconnectDialog1(ByVal lpConnDlgStruct As LPDISCDLGSTRUCTW) As DWORD
WNetOpenEnum(ByVal As DWORD,ByVal As DWORD,ByVal As DWORD,ByVal As LPNETRESOURCEW,ByVal As LPHANDLE) As DWORD
WNetEnumResource(ByVal hEnum As HANDLE,ByVal lpcCount As PDWORD,ByVal lpBuffer As PVOID,ByVal lpBufferSize As PDWORD) As DWORD
WNetGetUniversalName(ByVal lpLocalPath As LPCWSTR,ByVal dwInfoLevel As DWORD,ByVal lpBuffer As PVOID,ByVal lpBufferSize As PDWORD) As DWORD
WNetGetUser(ByVal lpName As LPCWSTR,ByVal lpUserName As LPWSTR,ByVal lpnLength As PDWORD) As DWORD
WNetGetProviderName(ByVal dwNetType As DWORD,ByVal lpProviderName As LPWSTR,ByVal lpBufferSize As PDWORD) As DWORD
WNetGetNetworkInformation(ByVal lpProvider As LPCWSTR,ByVal lpNetInfoStruct As LPNETINFOSTRUCT) As DWORD
WNetGetResourceInformation(ByVal lpNetResource As LPNETRESOURCEW,ByVal lpBuffer As LPVOID,ByVal lpcbBuffer As LPDWORD,ByVal lplpSystem As LPWSTR PTR) As DWORD
WNetCloseEnum(ByVal hEnum As HANDLE) As DWORD
WNetGetLastError(ByVal lpError As PDWORD,ByVal lpErrorBuf As LPWSTR,ByVal nErrorBufSize As DWORD,ByVal lpNameBuf As LPWSTR,ByVal nNameBufSize As DWORD) As DWORD
WNetAddConnection(ByVal lpszNetPath As LPCSTR,ByVal lpszPassword As LPCSTR,ByVal lpszLocalName As LPCSTR) As DWORD
WNetAddConnection2(ByVal lpNetResource As LPNETRESOURCEA,ByVal lpPassword As LPCSTR,ByVal lpUserName As LPCSTR,ByVal dwFlags As DWORD) As DWORD
WNetAddConnection3(ByVal hwndOwner As HWND,ByVal lpNetResource As LPNETRESOURCEA,ByVal lpPassword As LPCSTR,ByVal lpUserName As LPCSTR,ByVal dwFlags As DWORD) As DWORD
WNetCancelConnection(ByVal lpszName As LPCSTR,ByVal bForce As BOOL) As DWORD
WNetCancelConnection2(ByVal lpName As LPCSTR,ByVal dwFlags As DWORD,ByVal fForce As BOOL) As DWORD
WNetGetConnection(ByVal lpszLocalName As LPCSTR,ByVal lpszRemoteName As LPSTR,ByVal cbRemoteName As PDWORD) As DWORD
WNetUseConnection(ByVal As HWND,ByVal As LPNETRESOURCEA,ByVal As LPCSTR,ByVal As LPCSTR,ByVal As DWORD,ByVal As LPSTR,ByVal As PDWORD,ByVal As PDWORD) As DWORD
WNetSetConnection(ByVal As LPCSTR,ByVal As DWORD,ByVal As PVOID) As DWORD
WNetConnectionDialog1(ByVal lpConnDlgStruct As LPCONNECTDLGSTRUCTA) As DWORD
WNetDisconnectDialog1(ByVal lpConnDlgStruct As LPDISCDLGSTRUCTA) As DWORD
WNetOpenEnum(ByVal As DWORD,ByVal As DWORD,ByVal As DWORD,ByVal As LPNETRESOURCEA,ByVal As LPHANDLE) As DWORD
WNetEnumResource(ByVal hEnum As HANDLE,ByVal lpcCount As PDWORD,ByVal lpBuffer As PVOID,ByVal lpBufferSize As PDWORD) As DWORD
WNetGetUniversalName(ByVal lpLocalPath As LPCSTR,ByVal dwInfoLevel As DWORD,ByVal lpBuffer As PVOID,ByVal lpBufferSize As PDWORD) As DWORD
WNetGetUser(ByVal lpName As LPCSTR,ByVal lpUserName As LPSTR,ByVal lpnLength As PDWORD) As DWORD
WNetGetProviderName(ByVal dwNetType As DWORD,ByVal lpProviderName As LPSTR,ByVal lpBufferSize As PDWORD) As DWORD
WNetAddConnection(ByVal lpszNetPath As LPCWSTR,ByVal lpszPassword As LPCWSTR,ByVal lpszLocalName As LPCWSTR) As DWORD
WNetDisconnectDialog(ByVal hwnd As HWND,ByVal dwType As DWORD) As DWORD
WNetGetResourceInformation(ByVal lpNetResource As LPNETRESOURCEA,ByVal lpBuffer As LPVOID,ByVal lpcbBuffer As LPDWORD,ByVal lplpSystem As LPSTR PTR) As DWORD
WNetGetLastError(ByVal lpError As PDWORD,ByVal lpErrorBuf As LPSTR,ByVal nErrorBufSize As DWORD,ByVal lpNameBuf As LPSTR,ByVal nNameBufSize As DWORD) As DWORD
wnsprintf(ByVal As LPWSTR,ByVal As Integer,ByVal As LPCWSTR,...) As Integer
wnsprintf(ByVal As LPSTR,ByVal As Integer,ByVal As LPCSTR,...) As Integer
WPUCompleteOverlappedRequest(ByVal As SOCKET,ByVal As LPWSAOVERLAPPED,ByVal As DWORD,ByVal As DWORD,ByVal As LPINT) As INT_
WriteClassStm(ByVal As LPSTREAM,ByVal As CLSID PTR) As HRESULT
WriteFile(ByVal As HANDLE,ByVal As PCVOID,ByVal As DWORD,ByVal As PDWORD,ByVal As LPOVERLAPPED) As BOOL
WritePwrScheme(ByVal As PUINT,ByVal As LPTSTR,ByVal As LPTSTR,ByVal As PPOWER_POLICY) As BOOLEAN
WriteGlobalPwrPolicy(ByVal As PGLOBAL_POWER_POLICY) As BOOLEAN
WriteClassStg(ByVal As LPSTORAGE,ByVal As CLSID PTR) As HRESULT
WritePrivateProfileSection(ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As LPCWSTR) As BOOL
WritePrinter(ByVal As HANDLE,ByVal As PVOID,ByVal As DWORD,ByVal As PDWORD) As BOOL
WritePrivateProfileString(ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As LPCWSTR) As BOOL
WritePrivateProfileStruct(ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As LPVOID,ByVal As UINT,ByVal As LPCWSTR) As BOOL
WriteProfileSection(ByVal As LPCWSTR,ByVal As LPCWSTR) As BOOL
WriteFmtUserTypeStg(ByVal As LPSTORAGE,ByVal As CLIPFORMAT,ByVal As LPOLESTR) As HRESULT
WriteTapemark(ByVal As HANDLE,ByVal As DWORD,ByVal As DWORD,ByVal As BOOL) As DWORD
WriteProfileString(ByVal As LPCWSTR,ByVal As LPCWSTR,ByVal As LPCWSTR) As BOOL
WritePrivateProfileSection(ByVal As LPCSTR,ByVal As LPCSTR,ByVal As LPCSTR) As BOOL
WritePrivateProfileString(ByVal As LPCSTR,ByVal As LPCSTR,ByVal As LPCSTR,ByVal As LPCSTR) As BOOL
WritePrivateProfileStruct(ByVal As LPCSTR,ByVal As LPCSTR,ByVal As LPVOID,ByVal As UINT,ByVal As LPCSTR) As BOOL
WriteProcessorPwrScheme(ByVal As UINT,ByVal As PMACHINE_PROCESSOR_POWER_POLICY) As BOOLEAN
WriteProfileString(ByVal As LPCSTR,ByVal As LPCSTR,ByVal As LPCSTR) As BOOL
WriteFileEx(ByVal As HANDLE,ByVal As PCVOID,ByVal As DWORD,ByVal As LPOVERLAPPED,ByVal As LPOVERLAPPED_COMPLETION_ROUTINE) As BOOL
WriteConsoleOutputAttribute(ByVal As HANDLE,ByVal As WORD PTR,ByVal As DWORD,ByVal As COORD,ByVal As PDWORD) As BOOL
WriteConsole(ByVal As HANDLE,ByVal As PCVOID,ByVal As DWORD,ByVal As PDWORD,ByVal As PVOID) As BOOL
WriteConsoleInput(ByVal As HANDLE,ByVal As INPUT_RECORD PTR,ByVal As DWORD,ByVal As PDWORD) As BOOL
WriteConsoleOutput(ByVal As HANDLE,ByVal As CHAR_INFO PTR,ByVal As COORD,ByVal As COORD,ByVal As PSMALL_RECT) As BOOL
WriteConsoleOutputCharacter(ByVal As HANDLE,ByVal As LPCWSTR,ByVal As DWORD,ByVal As COORD,ByVal As PDWORD) As BOOL
WriteConsole(ByVal As HANDLE,ByVal As PCVOID,ByVal As DWORD,ByVal As PDWORD,ByVal As PVOID) As BOOL
WriteConsoleInput(ByVal As HANDLE,ByVal As INPUT_RECORD PTR,ByVal As DWORD,ByVal As PDWORD) As BOOL
WriteConsoleOutput(ByVal As HANDLE,ByVal As CHAR_INFO PTR,ByVal As COORD,ByVal As COORD,ByVal As PSMALL_RECT) As BOOL
WriteConsoleOutputCharacter(ByVal As HANDLE,ByVal As LPCSTR,ByVal As DWORD,ByVal As COORD,ByVal As PDWORD) As BOOL
WriteProcessMemory(ByVal As HANDLE,ByVal As LPVOID,ByVal As LPCVOID,ByVal As SIZE_T,ByVal As SIZE_T PTR) As BOOL
WriteProfileSection(ByVal As LPCSTR,ByVal As LPCSTR) As BOOL
WriteFileGather(ByVal As HANDLE,ByVal As FILE_SEGMENT_ELEMENT PTR,ByVal As DWORD,ByVal As LPDWORD,ByVal As LPOVERLAPPED) As BOOL
WSAAsyncGetProtoByName(ByVal As HWND,ByVal As u_int,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAccept(ByVal As SOCKET,ByVal As sockaddr PTR,ByVal As LPINT,ByVal As LPCONDITIONPROC,ByVal As DWORD) As SOCKET
WSAAsyncSelect(ByVal As SOCKET,ByVal As HWND,ByVal As u_int,ByVal As Integer) As Integer
WSAAsyncGetServByName(ByVal As HWND,ByVal As u_int,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetServByPort(ByVal As HWND,ByVal As u_int,ByVal As Integer,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetProtoByName(ByVal As HWND,ByVal As u_int,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetProtoByNumber(ByVal As HWND,ByVal As u_int,ByVal As Integer,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetHostByName(ByVal As HWND,ByVal As u_int,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAddressToString(ByVal As LPSOCKADDR,ByVal As DWORD,ByVal As LPWSAPROTOCOL_INFOA,ByVal As LPSTR,ByVal As LPDWORD) As INT_
WSAAsyncSelect(ByVal As SOCKET,ByVal As HWND,ByVal As u_int,ByVal As Integer) As Integer
WSAAddressToString(ByVal As LPSOCKADDR,ByVal As DWORD,ByVal As LPWSAPROTOCOL_INFOW,ByVal As LPWSTR,ByVal As LPDWORD) As INT_
WSAAsyncGetServByName(ByVal As HWND,ByVal As u_int,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetServByPort(ByVal As HWND,ByVal As u_int,ByVal As Integer,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetHostByAddr(ByVal As HWND,ByVal As u_int,ByVal As zstring PTR,ByVal As Integer,ByVal As Integer,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetProtoByNumber(ByVal As HWND,ByVal As u_int,ByVal As Integer,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetHostByName(ByVal As HWND,ByVal As u_int,ByVal As zstring PTR,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSAAsyncGetHostByAddr(ByVal As HWND,ByVal As u_int,ByVal As zstring PTR,ByVal As Integer,ByVal As Integer,ByVal As zstring PTR,ByVal As Integer) As HANDLE
WSACancelAsyncRequest(ByVal As HANDLE) As Integer
WSACancelBlockingCall() As Integer
WSACancelAsyncRequest(ByVal As HANDLE) As Integer
WSACleanup() As Integer
WSACreateEvent() As HANDLE
WSAConnect(ByVal As SOCKET,ByVal As sockaddr PTR,ByVal As Integer,ByVal As LPWSABUF,ByVal As LPWSABUF,ByVal As LPQOS,ByVal As LPQOS) As Integer
WSACloseEvent(ByVal As HANDLE) As BOOL
WSACleanup() As Integer
WSADuplicateSocket(ByVal As SOCKET,ByVal As DWORD,ByVal As LPWSAPROTOCOL_INFOW) As Integer
WSADuplicateSocket(ByVal As SOCKET,ByVal As DWORD,ByVal As LPWSAPROTOCOL_INFOA) As Integer
WSAEnumNameSpaceProviders(ByVal As LPDWORD,ByVal As LPWSANAMESPACE_INFOW) As INT_
WSAEnumProtocols(ByVal As LPINT,ByVal As LPWSAPROTOCOL_INFOW,ByVal As LPDWORD) As Integer
WSAEventSelect(ByVal As SOCKET,ByVal As HANDLE,ByVal As Integer) As Integer
WSAEnumNameSpaceProviders(ByVal As LPDWORD,ByVal As LPWSANAMESPACE_INFOA) As INT_
WSAEnumProtocols(ByVal As LPINT,ByVal As LPWSAPROTOCOL_INFOA,ByVal As LPDWORD) As Integer
WSAEnumNetworkEvents(ByVal As SOCKET,ByVal As HANDLE,ByVal As LPWSANETWORKEVENTS) As Integer
WSAGetLastError() As Integer
WSAGetServiceClassNameByClassId(ByVal As LPGUID,ByVal As LPSTR,ByVal As LPDWORD) As INT_
WSAGetServiceClassNameByClassId(ByVal As LPGUID,ByVal As LPWSTR,ByVal As LPDWORD) As INT_
WSAGetLastError() As Integer
WSAGetQOSByName(ByVal As SOCKET,ByVal As LPWSABUF,ByVal As LPQOS) As BOOL
WSAGetServiceClassInfo(ByVal As LPGUID,ByVal As LPGUID,ByVal As LPDWORD,ByVal As LPWSASERVICECLASSINFOW) As INT_
WSAGetServiceClassInfo(ByVal As LPGUID,ByVal As LPGUID,ByVal As LPDWORD,ByVal As LPWSASERVICECLASSINFOA) As INT_
WSAGetOverlappedResult(ByVal As SOCKET,ByVal As LPWSAOVERLAPPED,ByVal As LPDWORD,ByVal As BOOL,ByVal As LPDWORD) As BOOL
WSAHtonl(ByVal As SOCKET,ByVal As uinteger,ByVal As uinteger PTR) As Integer
WSAHtons(ByVal As SOCKET,ByVal As ushort,ByVal As ushort PTR) As Integer
WSAIsBlocking() As BOOL
WSAInstallServiceClass(ByVal As LPWSASERVICECLASSINFOA) As INT_
WSAIoctl(ByVal As SOCKET,ByVal As DWORD,ByVal As LPVOID,ByVal As DWORD,ByVal As LPVOID,ByVal As DWORD,ByVal As LPDWORD,ByVal As LPWSAOVERLAPPED,ByVal As LPWSAOVERLAPPED_COMPLETION_ROUTINE) As Integer
WSAInstallServiceClass(ByVal As LPWSASERVICECLASSINFOW) As INT_
WSAIsBlocking() As BOOL
WSAJoinLeaf(ByVal As SOCKET,ByVal As sockaddr PTR,ByVal As Integer,ByVal As LPWSABUF,ByVal As LPWSABUF,ByVal As LPQOS,ByVal As LPQOS,ByVal As DWORD) As SOCKET
WSALookupServiceNext(ByVal As HANDLE,ByVal As DWORD,ByVal As LPDWORD,ByVal As LPWSAQUERYSETA) As INT_
WSALookupServiceNext(ByVal As HANDLE,ByVal As DWORD,ByVal As LPDWORD,ByVal As LPWSAQUERYSETW) As INT_
WSALookupServiceBegin(ByVal lpqsRestrictions As LPWSAQUERYSETW,ByVal As DWORD,ByVal As LPHANDLE) As INT_
WSALookupServiceEnd(ByVal As HANDLE) As INT_
WSALookupServiceBegin(ByVal As LPWSAQUERYSETA,ByVal As DWORD,ByVal As LPHANDLE) As INT_
WSANtohl(ByVal As SOCKET,ByVal As uinteger,ByVal As uinteger PTR) As Integer
WSANtohs(ByVal As SOCKET,ByVal As ushort,ByVal As ushort PTR) As Integer
WSANSPIoctl(ByVal As HANDLE,ByVal As DWORD,ByVal As LPVOID,ByVal As DWORD,ByVal As LPVOID,ByVal As DWORD,ByVal As LPDWORD,ByVal As LPWSACOMPLETION) As Integer
WSARecvMsg(ByVal As SOCKET,ByVal As LPWSAMSG,ByVal As LPDWORD,ByVal As LPWSAOVERLAPPED,ByVal As LPWSAOVERLAPPED_COMPLETION_ROUTINE) As Integer
WSARecvFrom(ByVal As SOCKET,ByVal As LPWSABUF,ByVal As DWORD,ByVal As LPDWORD,ByVal As LPDWORD,ByVal As sockaddr PTR,ByVal As LPINT,ByVal As LPWSAOVERLAPPED,ByVal As LPWSAOVERLAPPED_COMPLETION_ROUTINE) As Integer
WSARecvDisconnect(ByVal As SOCKET,ByVal As LPWSABUF) As Integer
WSARecvEx(ByVal As SOCKET,ByVal As zstring PTR,ByVal As Integer,ByVal As Integer PTR) As Integer
WSAResetEvent(ByVal As HANDLE) As BOOL
WSARemoveServiceClass(ByVal As LPGUID) As INT_
WSARecv(ByVal As SOCKET,ByVal As LPWSABUF,ByVal As DWORD,ByVal As LPDWORD,ByVal As LPDWORD,ByVal As LPWSAOVERLAPPED,ByVal As LPWSAOVERLAPPED_COMPLETION_ROUTINE) As Integer
WSASocket(ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As LPWSAPROTOCOL_INFOA,ByVal As GROUP,ByVal As DWORD) As SOCKET
WSASendTo(ByVal As SOCKET,ByVal As LPWSABUF,ByVal As DWORD,ByVal As LPDWORD,ByVal As DWORD,ByVal As sockaddr PTR,ByVal As Integer,ByVal As LPWSAOVERLAPPED,ByVal As LPWSAOVERLAPPED_COMPLETION_ROUTINE) As Integer
WSASetLastError(ByVal As Integer) 
WSASocket(ByVal As Integer,ByVal As Integer,ByVal As Integer,ByVal As LPWSAPROTOCOL_INFOW,ByVal As GROUP,ByVal As DWORD) As SOCKET
WSAStringToAddress(ByVal As LPWSTR,ByVal As INT_,ByVal As LPWSAPROTOCOL_INFOW,ByVal As LPSOCKADDR,ByVal As LPINT) As INT_
WSASetService(ByVal As LPWSAQUERYSETW,ByVal As WSAESETSERVICEOP,ByVal As DWORD) As INT_
WSASetBlockingHook(ByVal As FARPROC) As FARPROC
WSASetEvent(ByVal As HANDLE) As BOOL
WSAStartup(ByVal As WORD,ByVal As LPWSADATA) As Integer
WSASetBlockingHook(ByVal As FARPROC) As FARPROC
WSASendDisconnect(ByVal As SOCKET,ByVal As LPWSABUF) As Integer
WSASend(ByVal As SOCKET,ByVal As LPWSABUF,ByVal As DWORD,ByVal As LPDWORD,ByVal As DWORD,ByVal As LPWSAOVERLAPPED,ByVal As LPWSAOVERLAPPED_COMPLETION_ROUTINE) As Integer
WSASetService(ByVal As LPWSAQUERYSETA,ByVal As WSAESETSERVICEOP,ByVal As DWORD) As INT_
WSAStringToAddress(ByVal As LPSTR,ByVal As INT_,ByVal As LPWSAPROTOCOL_INFOA,ByVal As LPSOCKADDR,ByVal As LPINT) As INT_
WSAUnhookBlockingHook() As Integer
WSAWaitForMultipleEvents(ByVal As DWORD,ByVal As HANDLE PTR,ByVal As BOOL,ByVal As DWORD,ByVal As BOOL) As DWORD
WSCDeinstallProvider(ByVal As LPGUID,ByVal As LPINT) As INT_
WSCEnumProtocols(ByVal As LPINT,ByVal As LPWSAPROTOCOL_INFOW,ByVal As LPDWORD,ByVal As LPINT) As INT_
WSCEnableNSProvider(ByVal As LPGUID,ByVal As BOOL) As INT_
WSCGetProviderPath(ByVal As LPGUID,ByVal As LPWSTR,ByVal As LPINT,ByVal As LPINT) As INT_
WSCInstallNameSpace(ByVal As LPWSTR,ByVal As LPWSTR,ByVal As DWORD,ByVal As DWORD,ByVal As LPGUID) As INT_
WSCInstallProvider(ByVal As LPGUID,ByVal As LPWSTR,ByVal As LPWSAPROTOCOL_INFOW,ByVal As DWORD,ByVal As LPINT) As INT_
WSCUnInstallNameSpace(ByVal As LPGUID) As INT_
WSCWriteProviderOrder(ByVal As LPDWORD,ByVal As DWORD) As INT_
WSHAddressToString(ByVal As LPSOCKADDR,ByVal As INT_,ByVal As LPWSAPROTOCOL_INFOW,ByVal As LPWSTR,ByVal As LPDWORD) As INT_
WSHEnumProtocols(ByVal As LPINT,ByVal As LPWSTR,ByVal As LPVOID,ByVal As LPDWORD) As INT_
WSHGetBroadcastSockaddr(ByVal As PVOID,ByVal As PSOCKADDR,ByVal As PINT) As INT_
WSHGetSocketInformation(ByVal As PVOID,ByVal As SOCKET,ByVal As HANDLE,ByVal As HANDLE,ByVal As INT_,ByVal As INT_,ByVal As PCHAR,ByVal As INT_) As INT_
WSHGetProviderGuid(ByVal As LPWSTR,ByVal As LPGUID) As INT_
WSHGetWSAProtocolInfo(ByVal As LPWSTR,ByVal As LPWSAPROTOCOL_INFOW PTR,ByVal As LPDWORD) As INT_
WSHGetWinsockMapping(ByVal As PWINSOCK_MAPPING,ByVal As DWORD) As DWORD
WSHGetSockaddrType(ByVal As PSOCKADDR,ByVal As DWORD,ByVal As PSOCKADDR_INFO) As INT_
WSHGetWildcardSockaddr(ByVal As PVOID,ByVal As PSOCKADDR,ByVal As PINT) As INT_
WSHIoctl(ByVal As PVOID,ByVal As SOCKET,ByVal As HANDLE,ByVal As HANDLE,ByVal As DWORD,ByVal As LPVOID,ByVal As DWORD,ByVal As LPVOID,ByVal As DWORD,ByVal As LPDWORD,ByVal As LPWSAOVERLAPPED,ByVal As LPWSAOVERLAPPED_COMPLETION_ROUTINE,ByVal As LPBOOL) As INT_
WSHJoinLeaf(ByVal As PVOID,ByVal As SOCKET,ByVal As HANDLE,ByVal As HANDLE,ByVal As PVOID,ByVal As SOCKET,ByVal As PSOCKADDR,ByVal As DWORD,ByVal As LPWSABUF,ByVal As LPWSABUF,ByVal As LPQOS,ByVal As LPQOS,ByVal As DWORD) As INT_
WSHNotify(ByVal As PVOID,ByVal As SOCKET,ByVal As HANDLE,ByVal As HANDLE,ByVal As DWORD) As INT_
WSHOpenSocket(ByVal As PINT,ByVal As PINT,ByVal As PINT,ByVal As PUNICODE_STRING,ByVal As PVOID,ByVal As PDWORD) As INT_
WSHOpenSocket2(ByVal As PINT,ByVal As PINT,ByVal As PINT,ByVal As GROUP,ByVal As DWORD,ByVal As PUNICODE_STRING,ByVal As PVOID PTR,ByVal As PDWORD) As INT_
WSHStringToAddress(ByVal As LPWSTR,ByVal As DWORD,ByVal As LPWSAPROTOCOL_INFOW,ByVal As LPSOCKADDR,ByVal As LPDWORD) As INT_
WSHSetSocketInformation(ByVal As PVOID,ByVal As SOCKET,ByVal As HANDLE,ByVal As HANDLE,ByVal As INT_,ByVal As INT_,ByVal As PCHAR,ByVal As INT_) As INT_
wsprintf(ByVal As LPSTR,ByVal As LPCSTR,...) As Integer
wsprintf(ByVal As LPWSTR,ByVal As LPCWSTR,...) As Integer
WSPStartup(ByVal As WORD,ByVal As LPWSPDATA,ByVal As LPWSAPROTOCOL_INFOW,ByVal As WSPUPCALLTABLE,ByVal As LPWSPPROC_TABLE) As INT_
wvnsprintf(ByVal As LPWSTR,ByVal As Integer,ByVal As LPCWSTR,ByVal As va_list) As Integer
wvnsprintf(ByVal As LPSTR,ByVal As Integer,ByVal As LPCSTR,ByVal As va_list) As Integer
wvsprintf(ByVal As LPSTR,ByVal As LPCSTR,ByVal arglist As va_list) As Integer
wvsprintf(ByVal As LPWSTR,ByVal As LPCWSTR,ByVal arglist As va_list) As Integer
wWinMain(ByVal As HINSTANCE,ByVal As HINSTANCE,ByVal As LPWSTR,ByVal As Integer) As Integer
ZombifyActCtx(ByVal As HANDLE) As BOOL
